<?php declare(strict_types = 1);

namespace App\Services\Search\Elastic;

use App\Models\Model;
use App\Services\Search\Builder;
use Laravel\Scout\Builder as ScoutBuilder;
use Tests\TestCase;

/**
 * @internal
 * @coversDefaultClass \App\Services\Search\Elastic\SearchRequestFactory
 */
class SearchRequestFactoryTest extends TestCase {
    /**
     * @covers ::makeFilter
     */
    public function testMakeFilter(): void {
        $builder = $this->app->make(Builder::class, [
            'query' => '*',
            'model' => new class() extends Model {
                // empty
            },
        ]);

        $builder->where('where', '123');
        $builder->whereIn('whereIn', ['a', 'b', 'c']);
        $builder->whereIn('whereIn2', ['1', '2', '3']);
        $builder->whereNot('whereNot', '123');
        $builder->whereNotIn('whereNotIn', ['a', 'b', 'c']);
        $builder->whereNotIn('whereNotIn2', ['1', '2', '3']);

        $factory = new class() extends SearchRequestFactory {
            /**
             * @inheritDoc
             */
            public function makeFilter(ScoutBuilder $builder): ?array {
                return parent::makeFilter($builder); // TODO: Change the autogenerated stub
            }
        };

        $actual   = $factory->makeFilter($builder);
        $expected = [
            [
                'term' => ['where' => '123'],
            ],
            [
                'terms' => ['whereIn' => ['a', 'b', 'c']],
            ],
            [
                'terms' => ['whereIn2' => ['1', '2', '3']],
            ],
            [
                'bool' => [
                    'must_not' => [
                        [
                            'term' => ['whereNot' => '123'],
                        ],
                        [
                            'terms' => ['whereNotIn' => ['a', 'b', 'c']],
                        ],
                        [
                            'terms' => ['whereNotIn2' => ['1', '2', '3']],
                        ],
                    ],
                ],
            ],
        ];

        $this->assertEquals($expected, $actual);
    }
}
