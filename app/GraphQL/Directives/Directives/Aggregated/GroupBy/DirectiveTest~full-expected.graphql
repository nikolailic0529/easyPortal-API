"""
Sort direction.
"""
enum AggregatedGroupByTypeDirection {
    asc
    desc
}

"""
Sort direction.
"""
enum SortByTypeDirection {
    asc
    desc
}

"""
Group clause for `input Properties` (only one property allowed at a time).
"""
input AggregatedGroupByClauseProperties {
    """
    Group by property.
    """
    dateScalar: AggregatedGroupByTypeDirection
    @aggregatedGroupByOperatorAsDate

    """
    Group by property.
    """
    dateScalarNotNull: AggregatedGroupByTypeDirection
    @aggregatedGroupByOperatorAsDate

    """
    Group by property.
    """
    idScalar: AggregatedGroupByTypeDirection
    @aggregatedGroupByOperatorAsString

    """
    Group by property.
    """
    idScalarNotNull: AggregatedGroupByTypeDirection
    @aggregatedGroupByOperatorAsString

    """
    Group by property.
    """
    intScalar: AggregatedGroupByTypeDirection
    @aggregatedGroupByOperatorAsString

    """
    Group by property.
    """
    intScalarNotNull: AggregatedGroupByTypeDirection
    @aggregatedGroupByOperatorAsString

    """
    Group by `nested_id` with additional sorting.
    """
    nested: [SortByClauseNested!]
    @aggregatedGroupByOperatorRelation

    """
    Group by property.
    """
    nested_id: AggregatedGroupByTypeDirection
    @aggregatedGroupByOperatorAsString

    """
    Group by property.
    """
    relation_id: AggregatedGroupByTypeDirection
    @aggregatedGroupByOperatorAsString

    """
    Group by `service_group_id` with additional sorting.
    """
    serviceGroup: [SortByClauseNested!]
    @aggregatedGroupByOperatorRelation

    """
    Group by property.
    """
    service_group_id: AggregatedGroupByTypeDirection
    @aggregatedGroupByOperatorAsString

    """
    Group by property.
    """
    stringScalar: AggregatedGroupByTypeDirection
    @aggregatedGroupByOperatorAsString

    """
    Group by property.
    """
    stringScalarNotNull: AggregatedGroupByTypeDirection
    @aggregatedGroupByOperatorAsString
}

"""
Sort clause for input Nested (only one property allowed at a time).
"""
input SortByClauseNested {
    """
    Property clause.
    """
    id: SortByTypeDirection
    @sortByOperatorProperty

    """
    Property clause.
    """
    nested: SortByClauseNested
    @sortByProperty

    """
    Property clause.
    """
    value: SortByTypeDirection
    @sortByOperatorProperty
}

type AggregatedGroupByTypeGroup {
    count: Int!

    key: String
    @rename(
        attribute: "__key"
    )
}

type Query {
    test(
        groupBy: AggregatedGroupByClauseProperties!
        @aggregatedGroupBy
    ): [AggregatedGroupByTypeGroup!]!
    @all
}

directive @aggregatedGroupBy(
    order: String
    where: String
)
on
    | ARGUMENT_DEFINITION

directive @aggregatedGroupByOperatorAsDate
on
    | INPUT_FIELD_DEFINITION

directive @aggregatedGroupByOperatorAsString
on
    | INPUT_FIELD_DEFINITION

directive @aggregatedGroupByOperatorRelation
on
    | INPUT_FIELD_DEFINITION

"""
Fetch all Eloquent models and return the collection as the result.
"""
directive @all(
    """
    Point to a function that provides a Query Builder instance.
    Consists of two parts: a class name and a method name, seperated by an `@` symbol.
    If you pass only a class name, the method name defaults to `__invoke`.
    Mutually exclusive with `model`.
    """
    builder: String

    """
    Specify the class name of the model to use.
    This is only needed when the default model detection does not work.
    Mutually exclusive with `builder`.
    """
    model: String

    """
    Apply scopes to the underlying query.
    """
    scopes: [String!]
)
on
    | FIELD_DEFINITION

"""
Change the internally used name of a field or argument.

This does not change the schema from a client perspective.
"""
directive @rename(
    """
    The internal name of an attribute/property/key.
    """
    attribute: String!
)
on
    | ARGUMENT_DEFINITION
    | FIELD_DEFINITION
    | INPUT_FIELD_DEFINITION

directive @sortByOperatorProperty
on
    | INPUT_FIELD_DEFINITION

directive @sortByProperty
on
    | INPUT_FIELD_DEFINITION
