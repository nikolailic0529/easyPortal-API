"""Pagination information about the corresponding list of items."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """Total number of node in connection."""
  total: Int

  """Count of nodes in current request."""
  count: Int

  """Current page of request."""
  currentPage: Int

  """Last page in connection."""
  lastPage: Int
}

"""Pagination information about the corresponding list of items."""
type PaginatorInfo {
  """Count of available items in the page."""
  count: Int!

  """Current pagination page."""
  currentPage: Int!

  """Index of first item in the current page."""
  firstItem: Int

  """If collection has more pages."""
  hasMorePages: Boolean!

  """Index of last item in the current page."""
  lastItem: Int

  """Last page number of the collection."""
  lastPage: Int!

  """Number of items per page in the collection."""
  perPage: Int!

  """Total items available in the collection."""
  total: Int!
}

type Query {
  """
  @require <organization> Authenticated user must be a member of the current organization.
  """
  value: String!

  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  """
  root: String!
}

"""Pagination information about the corresponding list of items."""
type SimplePaginatorInfo {
  """Count of available items in the page."""
  count: Int!

  """Current pagination page."""
  currentPage: Int!

  """Index of first item in the current page."""
  firstItem: Int

  """Index of last item in the current page."""
  lastItem: Int

  """Number of items per page in the collection."""
  perPage: Int!
}

"""
Description.

@require <organization> Authenticated user must be a member of the current organization.
"""
type Test {
  """
  @require <organization> Authenticated user must be a member of the current organization.
  """
  one: String!

  """
  @require <organization> Authenticated user must be a member of the current organization.
  """
  two: String!

  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  """
  root: String!

  """
  @require <organization> Authenticated user must be a member of the current organization.
  """
  extension: String!

  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  """
  extensionRoot: String!
}
