input AssetsSearchCustomerSort {
  name: String
}

input AssetsSearchProductSort {
  sku: String
  name: String
}

input AssetsSearchSort {
  serial_number: String
  product: AssetsSearchProductSort
  customer: AssetsSearchCustomerSort
}

input CustomersSearchHeadquarterCitySort {
  name: String
}

input CustomersSearchHeadquarterSort {
  city: CustomersSearchHeadquarterCitySort
}

input CustomersSearchSort {
  name: String
  assets_count: String
  locations_count: String
  headquarter: CustomersSearchHeadquarterSort
}

input DocumentsSearchCustomerSort {
  name: String
}

input DocumentsSearchSort {
  number: String
  start: String
  end: String
  price: String
  customer: DocumentsSearchCustomerSort
}

"""Information about pagination using a Relay style cursor connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """The cursor to continue paginating backwards."""
  startCursor: String

  """The cursor to continue paginating forwards."""
  endCursor: String

  """Total number of nodes in the paginated connection."""
  total: Int!

  """Number of nodes in the current page."""
  count: Int!

  """Index of the current page."""
  currentPage: Int!

  """Index of the last available page."""
  lastPage: Int!
}

"""Information about pagination using a fully featured paginator."""
type PaginatorInfo {
  """Number of items in the current page."""
  count: Int!

  """Index of the current page."""
  currentPage: Int!

  """Index of the first item in the current page."""
  firstItem: Int

  """Are there more pages after this one?"""
  hasMorePages: Boolean!

  """Index of the last item in the current page."""
  lastItem: Int

  """Index of the last available page."""
  lastPage: Int!

  """Number of items per page."""
  perPage: Int!

  """Number of total available items."""
  total: Int!
}

type Query {
  """
  @require <organization> Authenticated user must be a member of the current organization.
  """
  value: String!

  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  """
  root: String!
}

"""Information about pagination using a simple paginator."""
type SimplePaginatorInfo {
  """Number of items in the current page."""
  count: Int!

  """Index of the current page."""
  currentPage: Int!

  """Index of the first item in the current page."""
  firstItem: Int

  """Index of the last item in the current page."""
  lastItem: Int

  """Number of items per page."""
  perPage: Int!
}

"""
Description.

@require <organization> Authenticated user must be a member of the current organization.
"""
type Test {
  """
  @require <organization> Authenticated user must be a member of the current organization.
  """
  one: String!

  """
  @require <organization> Authenticated user must be a member of the current organization.
  """
  two: String!

  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  """
  root: String!

  """
  @require <organization> Authenticated user must be a member of the current organization.
  """
  extension: String!

  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  """
  extensionRoot: String!
}
