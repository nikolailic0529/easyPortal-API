type Customer {
  id: ID!
}

input CustomerSearch {
  id: ID!
}

"""Aggregated data for type Customer."""
type CustomersAggregated {
  count: Int!
}

type Query {
  """@require <me> User must be authenticated."""
  query(
    where: SearchByConditionCustomerSearch
    order: [SortByClauseCustomer!]
    test: ID

    """Maximum value is 123."""
    limit: Int! = 25
    offset: Int! = 0
  ): [Customer!]!

  """@require <me> User must be authenticated."""
  queryAggregated(where: SearchByConditionCustomerSearch): CustomersAggregated
}

"""
Available conditions for input CustomerSearch (only one property allowed at a time).
"""
input SearchByConditionCustomerSearch {
  """All of the conditions must be true."""
  allOf: [SearchByConditionCustomerSearch!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionCustomerSearch!]

  """Not."""
  not: SearchByConditionCustomerSearch

  """Property condition."""
  id: SearchByScalarID
}

"""
Available operators for scalar ID! (only one operator allowed at a time).
"""
input SearchByScalarID {
  """Equal (`=`)."""
  equal: ID

  """Not Equal (`!=`)."""
  notEqual: ID

  """Within a set of values."""
  in: [ID!]

  """Outside a set of values."""
  notIn: [ID!]
}

"""Sort clause for type Customer (only one property allowed at a time)."""
input SortByClauseCustomer {
  """Property clause."""
  id: SortByDirection
}

"""Sort direction."""
enum SortByDirection {
  asc
  desc
}
