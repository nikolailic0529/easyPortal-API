<?php declare(strict_types = 1);

namespace App\GraphQL\Mutations;

use App\GraphQL\Queries\Me;
use App\Models\User;
use Closure;
use LastDragon_ru\LaraASP\Testing\Constraints\Response\Response;
use LastDragon_ru\LaraASP\Testing\Providers\ArrayDataProvider;
use LastDragon_ru\LaraASP\Testing\Providers\CompositeDataProvider;
use Mockery;
use Tests\DataProviders\GraphQL\GuestDataProvider;
use Tests\DataProviders\TenantDataProvider;
use Tests\GraphQL\GraphQLError;
use Tests\GraphQL\GraphQLSuccess;
use Tests\TestCase;

/**
 * @internal
 * @coversDefaultClass \App\GraphQL\Mutations\AuthSignInByPassword
 */
class AuthSignInByPasswordTest extends TestCase {
    // <editor-fold desc="Tests">
    // =========================================================================
    /**
     * @covers ::__invoke
     *
     * @dataProvider dataProviderInvoke
     *
     * @param array<mixed>|null $userInfo
     */
    public function testInvoke(
        Response $expected,
        Closure $tenantFactory,
        Closure $userFactory = null,
        array $userInfo = null,
        Closure $foundUserFactory = null,
    ): void {
        $this->markTestIncomplete('FIXME [KeyCloak] Not implemented.');
        $this->markTestIncomplete(<<<'REASON'
            Validation performs BEFORE permission checks (facepalm), so data
            should be valid. This is blocked by PhoneRule that does not (yet)
            accept invalid numbers generated by Faker.

            Also we probably need extended errors for GraphQLError

            https://github.com/nuwave/lighthouse/issues/1709#issuecomment-781100041
            REASON);

        // TODO [Auth0] Instead `AuthManager::login()` and `AuthManager::logout()`
        //      probably will be better mock Auth0Service to check that data
        //      really deleted.
        //
        //      Same for AuthSignInByCodeTest

        // Prepare
        $this->setUser($userFactory, $this->setTenant($tenantFactory));

        $data = [
            'username' => $this->faker->email,
            'password' => $this->faker->password,
        ];

        // Mock
        $found        = $foundUserFactory ? $foundUserFactory($this) : null;
        $service      = Mockery::mock(AuthService::class);
        $signInByCode = $service->shouldReceive('signInByPassword');
        $rememberUser = $service->shouldReceive('rememberUser');

        $service->shouldReceive('getService')->andReturn(
            Mockery::mock(Auth0Service::class),
        );

        $this->app->bind(AuthService::class, static function () use ($service): AuthService {
            return $service;
        });

        if ($expected instanceof GraphQLSuccess) {
            $signInByCode->once()->andReturn($userInfo);

            if ($found) {
                $rememberUser->once()->andReturnFalse();
            } else {
                $rememberUser->never();
            }
        } else {
            $signInByCode->never();
            $rememberUser->never();
        }

        // Test
        $this
            ->graphQL(/** @lang GraphQL */ '
                mutation AuthSignInByPassword(
                    $username: String!
                    $password: String!
                ) {
                    authSignInByPassword(
                        username: $username
                        password: $password
                    ) {
                        id
                        family_name
                        given_name
                    }
                }
            ', $data)
            ->assertThat($expected);
    }
    // </editor-fold>

    // <editor-fold desc="DataProviders">
    // =========================================================================
    /**
     * @return array<mixed>
     */
    public function dataProviderInvoke(): array {
        return (new CompositeDataProvider(
            new TenantDataProvider(),
            new GuestDataProvider('authSignInByPassword'),
            new ArrayDataProvider([
                'auth failed'                 => [
                    new GraphQLError('authSignInByPassword', /* TODO [Tests] Better GraphQL errors */),
                    null,
                    null,
                ],
                'auth successful but no user' => [
                    new GraphQLError('authSignInByPassword', /* TODO [Tests] Better GraphQL errors */),
                    ['profile' => ['sub' => '123']],
                    null,
                ],
                'auth successful'             => [
                    new GraphQLSuccess('authSignInByPassword', Me::class),
                    ['profile' => ['sub' => '123']],
                    static function (): User {
                        return User::factory()->create(['sub' => '123']);
                    },
                ],
            ]),
        ))->getData();
    }
    // </editor-fold>
}
