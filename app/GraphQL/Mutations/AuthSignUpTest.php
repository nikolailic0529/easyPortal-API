<?php declare(strict_types = 1);

namespace App\GraphQL\Mutations;

use App\Models\Organization;
use App\Models\User;
use Closure;
use Illuminate\Support\Arr;
use Illuminate\Support\Str;
use LastDragon_ru\LaraASP\Testing\Constraints\Response\Response;
use LastDragon_ru\LaraASP\Testing\Providers\ArrayDataProvider;
use LastDragon_ru\LaraASP\Testing\Providers\CompositeDataProvider;
use LastDragon_ru\LaraASP\Testing\Providers\ExpectedFinal;
use LastDragon_ru\LaraASP\Testing\Responses\Laravel\Json\ValidationErrorResponse;
use Mockery;
use Tests\DataProviders\GraphQL\GuestDataProvider;
use Tests\DataProviders\TenantDataProvider;
use Tests\GraphQL\GraphQLSuccess;
use Tests\TestCase;

use function array_keys;

/**
 * @internal
 * @coversDefaultClass \App\GraphQL\Mutations\AuthSignUp
 */
class AuthSignUpTest extends TestCase {
    // <editor-fold desc="Tests">
    // =========================================================================
    /**
     * @covers ::__invoke
     * @dataProvider dataProviderInvoke
     */
    public function testInvoke(
        Response $expected,
        Closure $tenantFactory,
        Closure $userFactory = null,
        Closure $dataFactory = null,
    ): void {
        // FIXME [GraphQL] [Auth0] Fix tests
        $this->markTestIncomplete('FIXME [KeyCloak] Not implemented.');
        $this->markTestIncomplete(<<<'REASON'
            Validation performs BEFORE permission checks (facepalm), so data
            should be valid. This is blocked by PhoneRule that does not (yet)
            accept invalid numbers generated by Faker.

            Also we probably need extended errors for GraphQLError

            https://github.com/nuwave/lighthouse/issues/1709#issuecomment-781100041
            REASON);

        // Prepare
        $tenant = $this->setTenant($tenantFactory);
        $userId = Str::random();
        $data   = [
            'given_name'  => $this->faker->firstName,
            'family_name' => $this->faker->lastName,
            'email'       => $this->faker->email,
            'phone'       => $this->faker->e164PhoneNumber,
            'company'     => $this->faker->company,
            'reseller'    => $this->faker->company,
        ];

        $this->setUser($userFactory, $tenant);

        if ($dataFactory) {
            $data = $dataFactory($this, $data);
        }

        // Mock
        $service = Mockery::mock(Management::class);
        $method  = $service->shouldReceive('createUser');

        if ($expected instanceof GraphQLSuccess) {
            $method->once()->andReturnUsing(
                function (array $params) use ($tenant, $data, $userId) {
                    // FIXME [auth0] Test connection after "Specify connection"

                    $this->assertTrue(Arr::has($params, 'app_metadata.uuid'));
                    $this->assertTrue(Arr::has($params, 'app_metadata.tenant'));
                    $this->assertEquals($tenant->getKey(), Arr::get($params, 'app_metadata.tenant'));
                    $this->assertEquals([
                        'phone'    => $data['phone'],
                        'company'  => $data['company'],
                        'reseller' => $data['reseller'],
                    ], $params['user_metadata']);

                    return [
                        'blocked'        => true,
                        'email'          => $data['email'],
                        'email_verified' => false,
                        'family_name'    => $data['given_name'],
                        'given_name'     => $data['family_name'],
                        'picture'        => 'https://example.com/avatar.png',
                        'created_at'     => '2021-02-09T08:00:59.054Z',
                        'updated_at'     => '2021-02-09T08:00:59.054Z',
                        'user_id'        => $userId,
                    ];
                },
            );
        } else {
            $method->never();
        }

        $this->app->bind(Management::class, static function () use ($service): Management {
            return $service;
        });

        // Test
        $this
            ->graphQL(/** @lang GraphQL */ '
                mutation AuthSignUp(
                    $given_name: String!,
                    $family_name: String!,
                    $email: String!,
                    $phone: String!,
                    $company: String!,
                    $reseller: String,
                ) {
                    authSignUp(
                        given_name: $given_name,
                        family_name: $family_name,
                        email: $email,
                        phone: $phone,
                        company: $company,
                        reseller: $reseller,
                    )
                }
            ', $data)
            ->assertThat($expected);

        // Check that user created
        if ($expected instanceof GraphQLSuccess) {
            $model = new User();
            $user  = User::query()
                ->where($model->getAuthIdentifierName(), '=', $userId)
                ->first();

            $this->assertNotNull($user);
        }
    }
    // </editor-fold>

    // <editor-fold desc="DataProviders">
    // =========================================================================
    /**
     * @return array<mixed>
     */
    public function dataProviderInvoke(): array {
        return (new CompositeDataProvider(
            new TenantDataProvider(),
            new GuestDataProvider('authSignUp'),
            new ArrayDataProvider([
                'invalid request'                     => [
                    new ExpectedFinal(new ValidationErrorResponse()),
                    static function (self $test, array $data): array {
                        $key = $test->faker->randomElement(array_keys($data));

                        unset($data[$key]);

                        return $data;
                    },
                ],
                'valid request but local user exists' => [
                    new ExpectedFinal(new ValidationErrorResponse([
                        'email' => null,
                    ])),
                    static function (self $test, array $data): array {
                        User::factory()->create([
                            'email'           => $data['email'],
                            'organization_id' => Organization::factory()->create(),
                        ]);

                        return $data;
                    },
                ],
                'valid request'                       => [
                    new GraphQLSuccess('authSignUp', AuthSignUp::class),
                    null,
                ],
            ]),
        ))->getData();
    }
    // </editor-fold>
}
