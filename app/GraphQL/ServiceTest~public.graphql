"""
Sort direction.
"""
enum AggregatedGroupByTypeDirection {
    asc
    desc
}

enum OrganizationType {
    Reseller
}

enum SearchByTypeFlag {
    yes
}

"""
Sort direction.
"""
enum SortByTypeDirection {
    asc
    desc
}

enum Trashed {
    """
    Trashed items will be returned too.
    """
    Include

    """
    Only trashed items will be returned.
    """
    Only
}

"""
Group clause for `input ApplicationLogsQuery` (only one property allowed at a time).
"""
input AggregatedGroupByClauseApplicationLogsQuery {
    """
    Property clause.
    """
    action: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    category: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    object_id: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    object_type: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    status: AggregatedGroupByTypeDirection
}

"""
Group clause for `input AssetsQuery` (only one property allowed at a time).
"""
input AggregatedGroupByClauseAssetsQuery {
    """
    Property clause.
    """
    contacts_active_quantity: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    coverages_count: AggregatedGroupByTypeDirection

    """
    Relationship clause.
    """
    customer: [SortByClauseCompaniesSort!]

    """
    Property clause.
    """
    customer_id: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    eosl: AggregatedGroupByTypeDirection

    """
    Relationship clause.
    """
    location: [SortByClauseLocationsSort!]

    """
    Property clause.
    """
    location_id: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    nickname: AggregatedGroupByTypeDirection

    """
    Relationship clause.
    """
    oem: [SortByClauseOemsSort!]

    """
    Property clause.
    """
    oem_id: AggregatedGroupByTypeDirection

    """
    Relationship clause.
    """
    product: [SortByClauseProductsSort!]

    """
    Property clause.
    """
    product_id: AggregatedGroupByTypeDirection

    """
    Relationship clause.
    """
    reseller: [SortByClauseCompaniesSort!]

    """
    Property clause.
    """
    reseller_id: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    serial_number: AggregatedGroupByTypeDirection

    """
    Relationship clause.
    """
    status: [SortByClauseStatusesSort!]

    """
    Property clause.
    """
    status_id: AggregatedGroupByTypeDirection

    """
    Relationship clause.
    """
    type: [SortByClauseTypesSort!]

    """
    Property clause.
    """
    type_id: AggregatedGroupByTypeDirection

    """
    Relationship clause.
    """
    warrantyServiceGroup: [SortByClauseServiceGroupsSort!]

    """
    Relationship clause.
    """
    warrantyServiceLevel: [SortByClauseServiceLevelsSort!]

    """
    Property clause.
    """
    warranty_end: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    warranty_service_group_id: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    warranty_service_level_id: AggregatedGroupByTypeDirection
}

"""
Group clause for `input AuditsQuery` (only one property allowed at a time).
"""
input AggregatedGroupByClauseAuditsQuery {
    """
    Property clause.
    """
    action: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    object_id: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    object_type: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    organization_id: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    user_id: AggregatedGroupByTypeDirection
}

"""
Group clause for `input ChangeRequestsQuery` (only one property allowed at a time).
"""
input AggregatedGroupByClauseChangeRequestsQuery {
    """
    Property clause.
    """
    from: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    message: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    subject: AggregatedGroupByTypeDirection

    """
    Relationship clause.
    """
    user: [SortByClauseUsersSort!]

    """
    Property clause.
    """
    user_id: AggregatedGroupByTypeDirection
}

"""
Group clause for `input CompaniesQuery` (only one property allowed at a time).
"""
input AggregatedGroupByClauseCompaniesQuery {
    """
    Property clause.
    """
    contacts_count: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    name: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    statuses_count: AggregatedGroupByTypeDirection
}

"""
Group clause for `input CompanyLocationsQuery` (only one property allowed at a time).
"""
input AggregatedGroupByClauseCompanyLocationsQuery {
    """
    Relationship clause.
    """
    location: [SortByClauseLocationsSort!]

    """
    Property clause.
    """
    location_id: AggregatedGroupByTypeDirection
}

"""
Group clause for `input ContactsQuery` (only one property allowed at a time).
"""
input AggregatedGroupByClauseContactsQuery {
    """
    Property clause.
    """
    name: AggregatedGroupByTypeDirection
}

"""
Group clause for `input DistributorsQuery` (only one property allowed at a time).
"""
input AggregatedGroupByClauseDistributorsQuery {
    """
    Property clause.
    """
    name: AggregatedGroupByTypeDirection
}

"""
Group clause for `input DocumentEntriesQuery` (only one property allowed at a time).
"""
input AggregatedGroupByClauseDocumentEntriesQuery {
    """
    Relationship clause.
    """
    asset: [SortByClauseAssetsSort!]

    """
    Relationship clause.
    """
    assetType: [SortByClauseTypesSort!]

    """
    Property clause.
    """
    asset_id: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    asset_type_id: AggregatedGroupByTypeDirection

    """
    Relationship clause.
    """
    currency: [SortByClauseCurrenciesSort!]

    """
    Property clause.
    """
    currency_id: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    document_id: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    end: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    environment_id: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    equipment_number: AggregatedGroupByTypeDirection

    """
    Relationship clause.
    """
    language: [SortByClauseLanguagesSort!]

    """
    Property clause.
    """
    language_id: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    oem_said: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    oem_sar_number: AggregatedGroupByTypeDirection

    """
    Relationship clause.
    """
    product: [SortByClauseProductsSort!]

    """
    Relationship clause.
    """
    productGroup: [SortByClauseProductGroupsSort!]

    """
    Relationship clause.
    """
    productLine: [SortByClauseProductLinesSort!]

    """
    Property clause.
    """
    product_group_id: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    product_id: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    product_line_id: AggregatedGroupByTypeDirection

    """
    Relationship clause.
    """
    psp: [SortByClausePspsSort!]

    """
    Property clause.
    """
    psp_id: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    serial_number: AggregatedGroupByTypeDirection

    """
    Relationship clause.
    """
    serviceGroup: [SortByClauseServiceGroupsSort!]

    """
    Relationship clause.
    """
    serviceLevel: [SortByClauseServiceLevelsSort!]

    """
    Property clause.
    """
    service_group_id: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    service_level_id: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    start: AggregatedGroupByTypeDirection
}

"""
Group clause for `input DocumentsQuery` (only one property allowed at a time).
"""
input AggregatedGroupByClauseDocumentsQuery {
    """
    Property clause.
    """
    contacts_count: AggregatedGroupByTypeDirection

    """
    Relationship clause.
    """
    currency: [SortByClauseCurrenciesSort!]

    """
    Property clause.
    """
    currency_id: AggregatedGroupByTypeDirection

    """
    Relationship clause.
    """
    customer: [SortByClauseCompaniesSort!]

    """
    Property clause.
    """
    customer_id: AggregatedGroupByTypeDirection

    """
    Relationship clause.
    """
    distributor: [SortByClauseDistributorsSort!]

    """
    Property clause.
    """
    distributor_id: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    end: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    entries_count: AggregatedGroupByTypeDirection

    """
    Relationship clause.
    """
    language: [SortByClauseLanguagesSort!]

    """
    Property clause.
    """
    language_id: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    number: AggregatedGroupByTypeDirection

    """
    Relationship clause.
    """
    oem: [SortByClauseOemsSort!]

    """
    Relationship clause.
    """
    oemGroup: [SortByClauseOemGroupsSort!]

    """
    Property clause.
    """
    oem_amp_id: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    oem_group_id: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    oem_id: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    oem_said: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    oem_sar_number: AggregatedGroupByTypeDirection

    """
    Relationship clause.
    """
    reseller: [SortByClauseCompaniesSort!]

    """
    Property clause.
    """
    reseller_id: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    start: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    statuses_count: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    type_id: AggregatedGroupByTypeDirection
}

"""
Group clause for `input LocationsQuery` (only one property allowed at a time).
"""
input AggregatedGroupByClauseLocationsQuery {
    """
    Relationship clause.
    """
    city: [SortByClauseCitiesSort!]

    """
    Property clause.
    """
    city_id: AggregatedGroupByTypeDirection

    """
    Relationship clause.
    """
    country: [SortByClauseCountriesSort!]

    """
    Property clause.
    """
    country_id: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    line_one: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    line_two: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    postcode: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    state: AggregatedGroupByTypeDirection
}

"""
Group clause for `input MeSearchQuery` (only one property allowed at a time).
"""
input AggregatedGroupByClauseMeSearchQuery {
    """
    Property clause.
    """
    key: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    name: AggregatedGroupByTypeDirection
}

"""
Group clause for `input NotesQuery` (only one property allowed at a time).
"""
input AggregatedGroupByClauseNotesQuery {
    """
    Relationship clause.
    """
    user: [SortByClauseUsersSort!]

    """
    Property clause.
    """
    user_id: AggregatedGroupByTypeDirection
}

"""
Group clause for `input OemGroupsQuery` (only one property allowed at a time).
"""
input AggregatedGroupByClauseOemGroupsQuery {
    """
    Property clause.
    """
    key: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    name: AggregatedGroupByTypeDirection
}

"""
Group clause for `input OrganizationsQuery` (only one property allowed at a time).
"""
input AggregatedGroupByClauseOrganizationsQuery {
    """
    Property clause.
    """
    name: AggregatedGroupByTypeDirection
}

"""
Group clause for `input ProductsQuery` (only one property allowed at a time).
"""
input AggregatedGroupByClauseProductsQuery {
    """
    Property clause.
    """
    name: AggregatedGroupByTypeDirection

    """
    Relationship clause.
    """
    oem: [SortByClauseOemsSort!]

    """
    Property clause.
    """
    oem_id: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    sku: AggregatedGroupByTypeDirection
}

"""
Group clause for `input UsersQuery` (only one property allowed at a time).
"""
input AggregatedGroupByClauseUsersQuery {
    """
    Property clause.
    """
    family_name: AggregatedGroupByTypeDirection

    """
    Property clause.
    """
    given_name: AggregatedGroupByTypeDirection
}

input ApplicationMaintenanceScheduleInput {
    end: DateTime!
    message: String
    start: DateTime!
}

input AssetSetNicknameInput {
    nickname: String
}

input AuthOrganizationAuthorizeInput {
    code: String!
    state: String!
}

input AuthSignInInput {
    email: Email!
    password: String!
}

input AuthSignUpByInviteInput {
    family_name: String!
    given_name: String!
    password: String!
}

input CreateContractNoteInput {
    contract_id: String!
    files: [Upload!]
    note: HtmlString!
    pinned: Boolean
}

input CreateMeSearchInput {
    conditions: String!
    key: String!
    name: String!
}

input CreateQuoteNoteInput {
    files: [Upload!]
    note: HtmlString!
    pinned: Boolean
    quote_id: String!
}

input DeleteClientSettingsInput {
    names: [String!]!
}

input DeleteContractNoteInput {
    id: ID!
}

input DeleteMeSearchInput {
    id: ID!
}

input DeleteQuoteNoteInput {
    id: ID!
}

input DispatchApplicationServiceInput {
    """
    If true the service will be executed right now.
    """
    immediately: Boolean! = false

    """
    Name of the service.
    """
    name: String!
}

input LocaleImportInput {
    """
    XLSX file with translation strings. The first row can contains headers
    and will be ignored. The first column is the key, the second - value.
    """
    translations: Upload!
}

input LocaleUpdateInput {
    translations: [LocaleUpdateTranslationInput!]
}

input LocaleUpdateTranslationInput {
    """
    Client translations must use `client.` prefix.
    """
    key: String!

    """
    If `null` the key will be reset to default value.
    """
    value: String
}

input MeUpdateInput {
    academic_title: String
    contact_email: Email
    family_name: String
    given_name: String
    homepage: String
    job_title: String
    locale: String
    mobile_phone: PhoneNumber
    office_phone: PhoneNumber
    photo: Upload
    team_id: ID
    timezone: String
    title: String
}

input MessageInput {
    bcc: [Email!]
    cc: [Email!]
    files: [Upload!]
    message: HtmlString!
    subject: String!
}

input OemHpeImportInput {
    file: Upload!
}

input OrgRoleCreateInput {
    name: String!
    permissions: [ID!]!
}

input OrgRoleUpdateInput {
    name: String
    permissions: [ID!]
}

input OrgSetInput {
    organization_id: ID!
}

input OrgUpdateBrandingInput {
    dark_theme: Boolean
    dashboard_image_url: Upload
    favicon_url: Upload
    logo_url: Upload
    main_color: Color
    secondary_color: Color
    welcome_heading: [TranslatedStringInput!]
    welcome_image_url: Upload
    welcome_underline: [TranslatedStringInput!]
}

input OrgUpdateInput {
    analytics_code: String
    branding: OrgUpdateBrandingInput
    currency_id: ID
    email: Email
    locale: String
    timezone: String
    website_url: Url
}

input OrgUserInviteInput {
    email: Email!
    role_id: ID!
    team_id: ID
}

input OrgUserUpdateInput {
    academic_title: String
    contact_email: Email
    enabled: Boolean
    family_name: String
    given_name: String
    homepage: String
    job_title: String
    locale: String
    mobile_phone: PhoneNumber
    office_phone: PhoneNumber
    photo: Upload
    role_id: ID
    team_id: ID
    timezone: String
    title: String
}

input OrganizationUserInviteInput {
    email: Email!
    role_id: ID!
    team_id: ID
}

input QuoteRequestCreateAssetInput {
    asset_id: ID!
    duration_id: ID!
    service_level_custom: String
    service_level_id: ID
}

input QuoteRequestCreateDocumentInput {
    document_id: ID!
    duration_id: ID!
}

input QuoteRequestCreateInput {
    assets: [QuoteRequestCreateAssetInput!]
    contact_email: Email!
    contact_name: String!
    contact_phone: PhoneNumber!

    """
    If `true` the current user will receive a copy.
    """
    copy_to_me: Boolean! = true

    customer_custom: String
    customer_id: ID
    documents: [QuoteRequestCreateDocumentInput!]
    files: [Upload!]
    message: HtmlString
    oem_custom: String
    oem_id: ID
    type_custom: String
    type_id: ID
}

input ResetApplicationServiceInput {
    """
    Name of the service.
    """
    name: String!
}

input ResetOrgUserPasswordInput {
    id: ID!
}

input ResetPasswordInput {
    email: Email!
    password: String!
    token: String!
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for `input AssetWarrantiesQuery`.

See also:
* https://laravel.com/docs/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationAssetWarrantiesQuery {
    """
    Count conditions.
    """
    count: SearchByScalarInt

    """
    Alias for `count: {greaterThanOrEqual: 1}`. Will be ignored if `count` used.
    """
    exists: Boolean

    """
    Alias for `count: {lessThan: 1}`. Will be ignored if `count` used.
    """
    notExists: Boolean! = false

    """
    Additional conditions.
    """
    where: SearchByConditionAssetWarrantiesQuery
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for `input AssetsQuery`.

See also:
* https://laravel.com/docs/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationAssetsQuery {
    """
    Count conditions.
    """
    count: SearchByScalarInt

    """
    Alias for `count: {greaterThanOrEqual: 1}`. Will be ignored if `count` used.
    """
    exists: Boolean

    """
    Alias for `count: {lessThan: 1}`. Will be ignored if `count` used.
    """
    notExists: Boolean! = false

    """
    Additional conditions.
    """
    where: SearchByConditionAssetsQuery
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for `input CitiesQuery`.

See also:
* https://laravel.com/docs/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationCitiesQuery {
    """
    Count conditions.
    """
    count: SearchByScalarInt

    """
    Alias for `count: {greaterThanOrEqual: 1}`. Will be ignored if `count` used.
    """
    exists: Boolean

    """
    Alias for `count: {lessThan: 1}`. Will be ignored if `count` used.
    """
    notExists: Boolean! = false

    """
    Additional conditions.
    """
    where: SearchByConditionCitiesQuery
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for `input CompaniesQuery`.

See also:
* https://laravel.com/docs/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationCompaniesQuery {
    """
    Count conditions.
    """
    count: SearchByScalarInt

    """
    Alias for `count: {greaterThanOrEqual: 1}`. Will be ignored if `count` used.
    """
    exists: Boolean

    """
    Alias for `count: {lessThan: 1}`. Will be ignored if `count` used.
    """
    notExists: Boolean! = false

    """
    Additional conditions.
    """
    where: SearchByConditionCompaniesQuery
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for `input CompanyLocationsQuery`.

See also:
* https://laravel.com/docs/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationCompanyLocationsQuery {
    """
    Count conditions.
    """
    count: SearchByScalarInt

    """
    Alias for `count: {greaterThanOrEqual: 1}`. Will be ignored if `count` used.
    """
    exists: Boolean

    """
    Alias for `count: {lessThan: 1}`. Will be ignored if `count` used.
    """
    notExists: Boolean! = false

    """
    Additional conditions.
    """
    where: SearchByConditionCompanyLocationsQuery
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for `input ContactsQuery`.

See also:
* https://laravel.com/docs/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationContactsQuery {
    """
    Count conditions.
    """
    count: SearchByScalarInt

    """
    Alias for `count: {greaterThanOrEqual: 1}`. Will be ignored if `count` used.
    """
    exists: Boolean

    """
    Alias for `count: {lessThan: 1}`. Will be ignored if `count` used.
    """
    notExists: Boolean! = false

    """
    Additional conditions.
    """
    where: SearchByConditionContactsQuery
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for `input CountriesQuery`.

See also:
* https://laravel.com/docs/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationCountriesQuery {
    """
    Count conditions.
    """
    count: SearchByScalarInt

    """
    Alias for `count: {greaterThanOrEqual: 1}`. Will be ignored if `count` used.
    """
    exists: Boolean

    """
    Alias for `count: {lessThan: 1}`. Will be ignored if `count` used.
    """
    notExists: Boolean! = false

    """
    Additional conditions.
    """
    where: SearchByConditionCountriesQuery
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for `input CoveragesQuery`.

See also:
* https://laravel.com/docs/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationCoveragesQuery {
    """
    Count conditions.
    """
    count: SearchByScalarInt

    """
    Alias for `count: {greaterThanOrEqual: 1}`. Will be ignored if `count` used.
    """
    exists: Boolean

    """
    Alias for `count: {lessThan: 1}`. Will be ignored if `count` used.
    """
    notExists: Boolean! = false

    """
    Additional conditions.
    """
    where: SearchByConditionCoveragesQuery
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for `input CurrenciesQuery`.

See also:
* https://laravel.com/docs/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationCurrenciesQuery {
    """
    Count conditions.
    """
    count: SearchByScalarInt

    """
    Alias for `count: {greaterThanOrEqual: 1}`. Will be ignored if `count` used.
    """
    exists: Boolean

    """
    Alias for `count: {lessThan: 1}`. Will be ignored if `count` used.
    """
    notExists: Boolean! = false

    """
    Additional conditions.
    """
    where: SearchByConditionCurrenciesQuery
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for `input DistributorsQuery`.

See also:
* https://laravel.com/docs/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationDistributorsQuery {
    """
    Count conditions.
    """
    count: SearchByScalarInt

    """
    Alias for `count: {greaterThanOrEqual: 1}`. Will be ignored if `count` used.
    """
    exists: Boolean

    """
    Alias for `count: {lessThan: 1}`. Will be ignored if `count` used.
    """
    notExists: Boolean! = false

    """
    Additional conditions.
    """
    where: SearchByConditionDistributorsQuery
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for `input DocumentEntriesQuery`.

See also:
* https://laravel.com/docs/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationDocumentEntriesQuery {
    """
    Count conditions.
    """
    count: SearchByScalarInt

    """
    Alias for `count: {greaterThanOrEqual: 1}`. Will be ignored if `count` used.
    """
    exists: Boolean

    """
    Alias for `count: {lessThan: 1}`. Will be ignored if `count` used.
    """
    notExists: Boolean! = false

    """
    Additional conditions.
    """
    where: SearchByConditionDocumentEntriesQuery
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for `input DocumentsQuery`.

See also:
* https://laravel.com/docs/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationDocumentsQuery {
    """
    Count conditions.
    """
    count: SearchByScalarInt

    """
    Alias for `count: {greaterThanOrEqual: 1}`. Will be ignored if `count` used.
    """
    exists: Boolean

    """
    Alias for `count: {lessThan: 1}`. Will be ignored if `count` used.
    """
    notExists: Boolean! = false

    """
    Additional conditions.
    """
    where: SearchByConditionDocumentsQuery
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for `input LanguagesQuery`.

See also:
* https://laravel.com/docs/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationLanguagesQuery {
    """
    Count conditions.
    """
    count: SearchByScalarInt

    """
    Alias for `count: {greaterThanOrEqual: 1}`. Will be ignored if `count` used.
    """
    exists: Boolean

    """
    Alias for `count: {lessThan: 1}`. Will be ignored if `count` used.
    """
    notExists: Boolean! = false

    """
    Additional conditions.
    """
    where: SearchByConditionLanguagesQuery
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for `input LocationsQuery`.

See also:
* https://laravel.com/docs/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationLocationsQuery {
    """
    Count conditions.
    """
    count: SearchByScalarInt

    """
    Alias for `count: {greaterThanOrEqual: 1}`. Will be ignored if `count` used.
    """
    exists: Boolean

    """
    Alias for `count: {lessThan: 1}`. Will be ignored if `count` used.
    """
    notExists: Boolean! = false

    """
    Additional conditions.
    """
    where: SearchByConditionLocationsQuery
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for `input OemGroupsQuery`.

See also:
* https://laravel.com/docs/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationOemGroupsQuery {
    """
    Count conditions.
    """
    count: SearchByScalarInt

    """
    Alias for `count: {greaterThanOrEqual: 1}`. Will be ignored if `count` used.
    """
    exists: Boolean

    """
    Alias for `count: {lessThan: 1}`. Will be ignored if `count` used.
    """
    notExists: Boolean! = false

    """
    Additional conditions.
    """
    where: SearchByConditionOemGroupsQuery
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for `input OemsQuery`.

See also:
* https://laravel.com/docs/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationOemsQuery {
    """
    Count conditions.
    """
    count: SearchByScalarInt

    """
    Alias for `count: {greaterThanOrEqual: 1}`. Will be ignored if `count` used.
    """
    exists: Boolean

    """
    Alias for `count: {lessThan: 1}`. Will be ignored if `count` used.
    """
    notExists: Boolean! = false

    """
    Additional conditions.
    """
    where: SearchByConditionOemsQuery
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for `input OrganizationsQuery`.

See also:
* https://laravel.com/docs/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationOrganizationsQuery {
    """
    Count conditions.
    """
    count: SearchByScalarInt

    """
    Alias for `count: {greaterThanOrEqual: 1}`. Will be ignored if `count` used.
    """
    exists: Boolean

    """
    Alias for `count: {lessThan: 1}`. Will be ignored if `count` used.
    """
    notExists: Boolean! = false

    """
    Additional conditions.
    """
    where: SearchByConditionOrganizationsQuery
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for `input ProductGroupsQuery`.

See also:
* https://laravel.com/docs/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationProductGroupsQuery {
    """
    Count conditions.
    """
    count: SearchByScalarInt

    """
    Alias for `count: {greaterThanOrEqual: 1}`. Will be ignored if `count` used.
    """
    exists: Boolean

    """
    Alias for `count: {lessThan: 1}`. Will be ignored if `count` used.
    """
    notExists: Boolean! = false

    """
    Additional conditions.
    """
    where: SearchByConditionProductGroupsQuery
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for `input ProductLinesQuery`.

See also:
* https://laravel.com/docs/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationProductLinesQuery {
    """
    Count conditions.
    """
    count: SearchByScalarInt

    """
    Alias for `count: {greaterThanOrEqual: 1}`. Will be ignored if `count` used.
    """
    exists: Boolean

    """
    Alias for `count: {lessThan: 1}`. Will be ignored if `count` used.
    """
    notExists: Boolean! = false

    """
    Additional conditions.
    """
    where: SearchByConditionProductLinesQuery
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for `input ProductsQuery`.

See also:
* https://laravel.com/docs/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationProductsQuery {
    """
    Count conditions.
    """
    count: SearchByScalarInt

    """
    Alias for `count: {greaterThanOrEqual: 1}`. Will be ignored if `count` used.
    """
    exists: Boolean

    """
    Alias for `count: {lessThan: 1}`. Will be ignored if `count` used.
    """
    notExists: Boolean! = false

    """
    Additional conditions.
    """
    where: SearchByConditionProductsQuery
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for `input PspsQuery`.

See also:
* https://laravel.com/docs/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationPspsQuery {
    """
    Count conditions.
    """
    count: SearchByScalarInt

    """
    Alias for `count: {greaterThanOrEqual: 1}`. Will be ignored if `count` used.
    """
    exists: Boolean

    """
    Alias for `count: {lessThan: 1}`. Will be ignored if `count` used.
    """
    notExists: Boolean! = false

    """
    Additional conditions.
    """
    where: SearchByConditionPspsQuery
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for `input ServiceGroupsQuery`.

See also:
* https://laravel.com/docs/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationServiceGroupsQuery {
    """
    Count conditions.
    """
    count: SearchByScalarInt

    """
    Alias for `count: {greaterThanOrEqual: 1}`. Will be ignored if `count` used.
    """
    exists: Boolean

    """
    Alias for `count: {lessThan: 1}`. Will be ignored if `count` used.
    """
    notExists: Boolean! = false

    """
    Additional conditions.
    """
    where: SearchByConditionServiceGroupsQuery
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for `input ServiceLevelsQuery`.

See also:
* https://laravel.com/docs/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationServiceLevelsQuery {
    """
    Count conditions.
    """
    count: SearchByScalarInt

    """
    Alias for `count: {greaterThanOrEqual: 1}`. Will be ignored if `count` used.
    """
    exists: Boolean

    """
    Alias for `count: {lessThan: 1}`. Will be ignored if `count` used.
    """
    notExists: Boolean! = false

    """
    Additional conditions.
    """
    where: SearchByConditionServiceLevelsQuery
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for `input StatusesQuery`.

See also:
* https://laravel.com/docs/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationStatusesQuery {
    """
    Count conditions.
    """
    count: SearchByScalarInt

    """
    Alias for `count: {greaterThanOrEqual: 1}`. Will be ignored if `count` used.
    """
    exists: Boolean

    """
    Alias for `count: {lessThan: 1}`. Will be ignored if `count` used.
    """
    notExists: Boolean! = false

    """
    Additional conditions.
    """
    where: SearchByConditionStatusesQuery
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for `input TagsQuery`.

See also:
* https://laravel.com/docs/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationTagsQuery {
    """
    Count conditions.
    """
    count: SearchByScalarInt

    """
    Alias for `count: {greaterThanOrEqual: 1}`. Will be ignored if `count` used.
    """
    exists: Boolean

    """
    Alias for `count: {lessThan: 1}`. Will be ignored if `count` used.
    """
    notExists: Boolean! = false

    """
    Additional conditions.
    """
    where: SearchByConditionTagsQuery
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for `input TypesQuery`.

See also:
* https://laravel.com/docs/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationTypesQuery {
    """
    Count conditions.
    """
    count: SearchByScalarInt

    """
    Alias for `count: {greaterThanOrEqual: 1}`. Will be ignored if `count` used.
    """
    exists: Boolean

    """
    Alias for `count: {lessThan: 1}`. Will be ignored if `count` used.
    """
    notExists: Boolean! = false

    """
    Additional conditions.
    """
    where: SearchByConditionTypesQuery
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for `input UsersQuery`.

See also:
* https://laravel.com/docs/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationUsersQuery {
    """
    Count conditions.
    """
    count: SearchByScalarInt

    """
    Alias for `count: {greaterThanOrEqual: 1}`. Will be ignored if `count` used.
    """
    exists: Boolean

    """
    Alias for `count: {lessThan: 1}`. Will be ignored if `count` used.
    """
    notExists: Boolean! = false

    """
    Additional conditions.
    """
    where: SearchByConditionUsersQuery
}

"""
Available conditions for `input ApplicationLogsQuery` (only one property allowed at a time).
"""
input SearchByConditionApplicationLogsQuery {
    """
    Property condition.
    """
    action: SearchByScalarString

    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionApplicationLogsQuery!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionApplicationLogsQuery!]

    """
    Property condition.
    """
    category: SearchByScalarString

    """
    Property condition.
    """
    created_at: SearchByScalarDateTime

    """
    Property condition.
    """
    duration: SearchByScalarFloatOrNull

    """
    Property condition.
    """
    finished_at: SearchByScalarDateTimeOrNull

    """
    Property condition.
    """
    id: SearchByScalarID

    """
    Not.
    """
    not: SearchByConditionApplicationLogsQuery

    """
    Property condition.
    """
    object_id: SearchByScalarIDOrNull

    """
    Property condition.
    """
    object_type: SearchByScalarStringOrNull

    """
    Property condition.
    """
    status: SearchByScalarStringOrNull
}

"""
Available conditions for `input AssetCoveragesQuery` (only one property allowed at a time).
"""
input SearchByConditionAssetCoveragesQuery {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionAssetCoveragesQuery!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionAssetCoveragesQuery!]

    """
    Relationship condition.
    """
    assets: SearchByComplexRelationAssetsQuery

    """
    Not.
    """
    not: SearchByConditionAssetCoveragesQuery
}

"""
Available conditions for `input AssetStatusesQuery` (only one property allowed at a time).
"""
input SearchByConditionAssetStatusesQuery {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionAssetStatusesQuery!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionAssetStatusesQuery!]

    """
    Relationship condition.
    """
    assets: SearchByComplexRelationAssetsQuery

    """
    Not.
    """
    not: SearchByConditionAssetStatusesQuery
}

"""
Available conditions for `input AssetTypesQuery` (only one property allowed at a time).
"""
input SearchByConditionAssetTypesQuery {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionAssetTypesQuery!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionAssetTypesQuery!]

    """
    Relationship condition.
    """
    assets: SearchByComplexRelationAssetsQuery

    """
    Not.
    """
    not: SearchByConditionAssetTypesQuery
}

"""
Available conditions for `input AssetWarrantiesQuery` (only one property allowed at a time).
"""
input SearchByConditionAssetWarrantiesQuery {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionAssetWarrantiesQuery!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionAssetWarrantiesQuery!]

    """
    Relationship condition.
    """
    asset: SearchByComplexRelationAssetsQuery

    """
    Relationship condition.
    """
    customer: SearchByComplexRelationCompaniesQuery

    """
    Property condition.
    """
    customer_id: SearchByScalarIDOrNull

    """
    Relationship condition.
    """
    document: SearchByComplexRelationDocumentsQuery

    """
    Property condition.
    """
    document_id: SearchByScalarIDOrNull

    """
    Property condition.
    """
    document_number: SearchByScalarStringOrNull

    """
    Property condition.
    """
    end: SearchByScalarDateOrNull

    """
    Property condition.
    """
    id: SearchByScalarID

    """
    Not.
    """
    not: SearchByConditionAssetWarrantiesQuery

    """
    Relationship condition.
    """
    reseller: SearchByComplexRelationCompaniesQuery

    """
    Property condition.
    """
    reseller_id: SearchByScalarIDOrNull

    """
    Property condition.
    """
    service_group_id: SearchByScalarIDOrNull

    """
    Property condition.
    """
    service_level_id: SearchByScalarIDOrNull

    """
    Property condition.
    """
    start: SearchByScalarDateOrNull
}

"""
Available conditions for `input AssetsQuery` (only one property allowed at a time).
"""
input SearchByConditionAssetsQuery {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionAssetsQuery!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionAssetsQuery!]

    """
    Property condition.
    """
    contacts_active_quantity: SearchByScalarIntOrNull

    """
    Relationship condition.
    """
    contracts: SearchByComplexRelationDocumentsQuery

    """
    Relationship condition.
    """
    coverages: SearchByComplexRelationCoveragesQuery

    """
    Property condition.
    """
    coverages_count: SearchByScalarInt

    """
    Relationship condition.
    """
    customer: SearchByComplexRelationCompaniesQuery

    """
    Property condition.
    """
    customer_id: SearchByScalarIDOrNull

    """
    Property condition.
    """
    eosl: SearchByScalarDateOrNull

    """
    Property condition.
    """
    id: SearchByScalarID

    """
    Relationship condition.
    """
    location: SearchByComplexRelationLocationsQuery

    """
    Property condition.
    """
    location_id: SearchByScalarIDOrNull

    """
    Property condition.
    """
    nickname: SearchByScalarStringOrNull

    """
    Not.
    """
    not: SearchByConditionAssetsQuery

    """
    Relationship condition.
    """
    oem: SearchByComplexRelationOemsQuery

    """
    Property condition.
    """
    oem_id: SearchByScalarIDOrNull

    """
    Relationship condition.
    """
    product: SearchByComplexRelationProductsQuery

    """
    Property condition.
    """
    product_id: SearchByScalarIDOrNull

    """
    Relationship condition.
    """
    quotes: SearchByComplexRelationDocumentsQuery

    """
    Relationship condition.
    """
    reseller: SearchByComplexRelationCompaniesQuery

    """
    Property condition.
    """
    reseller_id: SearchByScalarIDOrNull

    """
    Property condition.
    """
    serial_number: SearchByScalarStringOrNull

    """
    Relationship condition.
    """
    status: SearchByComplexRelationStatusesQuery

    """
    Property condition.
    """
    status_id: SearchByScalarIDOrNull

    """
    Relationship condition.
    """
    tags: SearchByComplexRelationTagsQuery

    """
    Relationship condition.
    """
    type: SearchByComplexRelationTypesQuery

    """
    Property condition.
    """
    type_id: SearchByScalarIDOrNull

    """
    Relationship condition.
    """
    warranties: SearchByComplexRelationAssetWarrantiesQuery

    """
    Relationship condition.
    """
    warrantyServiceGroup: SearchByComplexRelationServiceGroupsQuery

    """
    Relationship condition.
    """
    warrantyServiceLevel: SearchByComplexRelationServiceLevelsQuery

    """
    Property condition.
    """
    warranty_end: SearchByScalarDateOrNull

    """
    Property condition.
    """
    warranty_service_group_id: SearchByScalarIDOrNull

    """
    Property condition.
    """
    warranty_service_level_id: SearchByScalarIDOrNull
}

"""
Available conditions for `input AuditsQuery` (only one property allowed at a time).
"""
input SearchByConditionAuditsQuery {
    """
    Property condition.
    """
    action: SearchByScalarString

    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionAuditsQuery!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionAuditsQuery!]

    """
    Property condition.
    """
    created_at: SearchByScalarDateTime

    """
    Property condition.
    """
    id: SearchByScalarID

    """
    Not.
    """
    not: SearchByConditionAuditsQuery

    """
    Property condition.
    """
    object_id: SearchByScalarString

    """
    Property condition.
    """
    object_type: SearchByScalarString

    """
    Relationship condition.
    """
    organization: SearchByComplexRelationOrganizationsQuery

    """
    Property condition.
    """
    organization_id: SearchByScalarID

    """
    Property condition.
    """
    updated_at: SearchByScalarDateTime

    """
    Relationship condition.
    """
    user: SearchByComplexRelationUsersQuery

    """
    Property condition.
    """
    user_id: SearchByScalarString
}

"""
Available conditions for `input ChangeRequestsQuery` (only one property allowed at a time).
"""
input SearchByConditionChangeRequestsQuery {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionChangeRequestsQuery!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionChangeRequestsQuery!]

    """
    Property condition.
    """
    from: SearchByScalarString

    """
    Property condition.
    """
    id: SearchByScalarID

    """
    Property condition.
    """
    message: SearchByScalarString

    """
    Not.
    """
    not: SearchByConditionChangeRequestsQuery

    """
    Property condition.
    """
    subject: SearchByScalarString

    """
    Relationship condition.
    """
    user: SearchByComplexRelationUsersQuery

    """
    Property condition.
    """
    user_id: SearchByScalarID
}

"""
Available conditions for `input CitiesQuery` (only one property allowed at a time).
"""
input SearchByConditionCitiesQuery {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionCitiesQuery!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionCitiesQuery!]

    """
    Relationship condition.
    """
    assets: SearchByComplexRelationAssetsQuery

    """
    Property condition.
    """
    country_id: SearchByScalarID

    """
    Relationship condition.
    """
    customers: SearchByComplexRelationCompaniesQuery

    """
    Property condition.
    """
    id: SearchByScalarID

    """
    Property condition.
    """
    name: SearchByScalarString

    """
    Not.
    """
    not: SearchByConditionCitiesQuery
}

"""
Available conditions for `input CompaniesQuery` (only one property allowed at a time).
"""
input SearchByConditionCompaniesQuery {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionCompaniesQuery!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionCompaniesQuery!]

    """
    Relationship condition.
    """
    assets: SearchByComplexRelationAssetsQuery

    """
    Property condition.
    """
    assets_count: SearchByScalarInt

    """
    Relationship condition.
    """
    contacts: SearchByComplexRelationContactsQuery

    """
    Property condition.
    """
    contacts_count: SearchByScalarInt

    """
    Relationship condition.
    """
    contracts: SearchByComplexRelationDocumentsQuery

    """
    Relationship condition.
    """
    headquarter: SearchByComplexRelationCompanyLocationsQuery

    """
    Property condition.
    """
    id: SearchByScalarID

    """
    Relationship condition.
    """
    locations: SearchByComplexRelationCompanyLocationsQuery

    """
    Property condition.
    """
    locations_count: SearchByScalarInt

    """
    Property condition.
    """
    name: SearchByScalarString

    """
    Not.
    """
    not: SearchByConditionCompaniesQuery

    """
    Relationship condition.
    """
    quotes: SearchByComplexRelationDocumentsQuery

    """
    Relationship condition.
    """
    statuses: SearchByComplexRelationStatusesQuery

    """
    Property condition.
    """
    statuses_count: SearchByScalarInt
}

"""
Available conditions for `input CompanyLocationsQuery` (only one property allowed at a time).
"""
input SearchByConditionCompanyLocationsQuery {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionCompanyLocationsQuery!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionCompanyLocationsQuery!]

    """
    Property condition.
    """
    id: SearchByScalarID

    """
    Relationship condition.
    """
    location: SearchByComplexRelationLocationsQuery

    """
    Property condition.
    """
    location_id: SearchByScalarID

    """
    Not.
    """
    not: SearchByConditionCompanyLocationsQuery

    """
    Relationship condition.
    """
    types: SearchByComplexRelationTypesQuery
}

"""
Available conditions for `input ContactTypesQuery` (only one property allowed at a time).
"""
input SearchByConditionContactTypesQuery {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionContactTypesQuery!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionContactTypesQuery!]

    """
    Relationship condition.
    """
    contacts: SearchByComplexRelationContactsQuery

    """
    Not.
    """
    not: SearchByConditionContactTypesQuery
}

"""
Available conditions for `input ContactsQuery` (only one property allowed at a time).
"""
input SearchByConditionContactsQuery {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionContactsQuery!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionContactsQuery!]

    """
    Property condition.
    """
    email: SearchByScalarEmailOrNull

    """
    Property condition.
    """
    id: SearchByScalarID

    """
    Property condition.
    """
    name: SearchByScalarStringOrNull

    """
    Not.
    """
    not: SearchByConditionContactsQuery

    """
    Property condition.
    """
    phone_number: SearchByScalarPhoneNumberOrNull

    """
    Property condition.
    """
    phone_valid: SearchByScalarBooleanOrNull

    """
    Relationship condition.
    """
    types: SearchByComplexRelationTypesQuery
}

"""
Available conditions for `input ContractStatusesQuery` (only one property allowed at a time).
"""
input SearchByConditionContractStatusesQuery {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionContractStatusesQuery!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionContractStatusesQuery!]

    """
    Relationship condition.
    """
    contracts: SearchByComplexRelationDocumentsQuery

    """
    Not.
    """
    not: SearchByConditionContractStatusesQuery
}

"""
Available conditions for `input ContractTypesQuery` (only one property allowed at a time).
"""
input SearchByConditionContractTypesQuery {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionContractTypesQuery!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionContractTypesQuery!]

    """
    Relationship condition.
    """
    contracts: SearchByComplexRelationDocumentsQuery

    """
    Not.
    """
    not: SearchByConditionContractTypesQuery
}

"""
Available conditions for `input CountriesQuery` (only one property allowed at a time).
"""
input SearchByConditionCountriesQuery {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionCountriesQuery!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionCountriesQuery!]

    """
    Relationship condition.
    """
    assets: SearchByComplexRelationAssetsQuery

    """
    Relationship condition.
    """
    cities: SearchByComplexRelationCitiesQuery

    """
    Property condition.
    """
    code: SearchByScalarString

    """
    Relationship condition.
    """
    customers: SearchByComplexRelationCompaniesQuery

    """
    Property condition.
    """
    id: SearchByScalarID

    """
    Property condition.
    """
    name: SearchByScalarString

    """
    Not.
    """
    not: SearchByConditionCountriesQuery
}

"""
Available conditions for `input CoveragesQuery` (only one property allowed at a time).
"""
input SearchByConditionCoveragesQuery {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionCoveragesQuery!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionCoveragesQuery!]

    """
    Property condition.
    """
    id: SearchByScalarID

    """
    Not.
    """
    not: SearchByConditionCoveragesQuery
}

"""
Available conditions for `input CurrenciesQuery` (only one property allowed at a time).
"""
input SearchByConditionCurrenciesQuery {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionCurrenciesQuery!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionCurrenciesQuery!]

    """
    Relationship condition.
    """
    documents: SearchByComplexRelationDocumentsQuery

    """
    Not.
    """
    not: SearchByConditionCurrenciesQuery
}

"""
Available conditions for `input CustomerLocationTypesQuery` (only one property allowed at a time).
"""
input SearchByConditionCustomerLocationTypesQuery {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionCustomerLocationTypesQuery!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionCustomerLocationTypesQuery!]

    """
    Relationship condition.
    """
    customerLocations: SearchByComplexRelationCompanyLocationsQuery

    """
    Not.
    """
    not: SearchByConditionCustomerLocationTypesQuery
}

"""
Available conditions for `input CustomerStatusesQuery` (only one property allowed at a time).
"""
input SearchByConditionCustomerStatusesQuery {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionCustomerStatusesQuery!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionCustomerStatusesQuery!]

    """
    Relationship condition.
    """
    customers: SearchByComplexRelationCompaniesQuery

    """
    Not.
    """
    not: SearchByConditionCustomerStatusesQuery
}

"""
Available conditions for `input DistributorsQuery` (only one property allowed at a time).
"""
input SearchByConditionDistributorsQuery {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionDistributorsQuery!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionDistributorsQuery!]

    """
    Property condition.
    """
    id: SearchByScalarID

    """
    Property condition.
    """
    name: SearchByScalarString

    """
    Not.
    """
    not: SearchByConditionDistributorsQuery
}

"""
Available conditions for `input DocumentEntriesQuery` (only one property allowed at a time).
"""
input SearchByConditionDocumentEntriesQuery {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionDocumentEntriesQuery!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionDocumentEntriesQuery!]

    """
    Relationship condition.
    """
    asset: SearchByComplexRelationAssetsQuery

    """
    Relationship condition.
    """
    assetType: SearchByComplexRelationTypesQuery

    """
    Property condition.
    """
    asset_id: SearchByScalarIDOrNull

    """
    Property condition.
    """
    asset_type_id: SearchByScalarIDOrNull

    """
    Relationship condition.
    """
    currency: SearchByComplexRelationCurrenciesQuery

    """
    Property condition.
    """
    currency_id: SearchByScalarIDOrNull

    """
    Property condition.
    """
    document_id: SearchByScalarID

    """
    Property condition.
    """
    end: SearchByScalarDateOrNull

    """
    Property condition.
    """
    environment_id: SearchByScalarStringOrNull

    """
    Property condition.
    """
    equipment_number: SearchByScalarStringOrNull

    """
    Property condition.
    """
    id: SearchByScalarID

    """
    Relationship condition.
    """
    language: SearchByComplexRelationLanguagesQuery

    """
    Property condition.
    """
    language_id: SearchByScalarIDOrNull

    """
    Property condition.
    """
    list_price: SearchByScalarFloatOrNull

    """
    Property condition.
    """
    monthly_list_price: SearchByScalarFloatOrNull

    """
    Property condition.
    """
    monthly_retail_price: SearchByScalarFloatOrNull

    """
    Not.
    """
    not: SearchByConditionDocumentEntriesQuery

    """
    Property condition.
    """
    oem_said: SearchByScalarStringOrNull

    """
    Property condition.
    """
    oem_sar_number: SearchByScalarStringOrNull

    """
    Relationship condition.
    """
    product: SearchByComplexRelationProductsQuery

    """
    Relationship condition.
    """
    productGroup: SearchByComplexRelationProductGroupsQuery

    """
    Relationship condition.
    """
    productLine: SearchByComplexRelationProductLinesQuery

    """
    Property condition.
    """
    product_group_id: SearchByScalarIDOrNull

    """
    Property condition.
    """
    product_id: SearchByScalarIDOrNull

    """
    Property condition.
    """
    product_line_id: SearchByScalarIDOrNull

    """
    Relationship condition.
    """
    psp: SearchByComplexRelationPspsQuery

    """
    Property condition.
    """
    psp_id: SearchByScalarIDOrNull

    """
    Property condition.
    """
    removed_at: SearchByScalarDateTimeOrNull

    """
    Property condition.
    """
    renewal: SearchByScalarFloatOrNull

    """
    Property condition.
    """
    serial_number: SearchByScalarStringOrNull

    """
    Relationship condition.
    """
    serviceGroup: SearchByComplexRelationServiceGroupsQuery

    """
    Relationship condition.
    """
    serviceLevel: SearchByComplexRelationServiceLevelsQuery

    """
    Property condition.
    """
    service_group_id: SearchByScalarIDOrNull

    """
    Property condition.
    """
    service_level_id: SearchByScalarIDOrNull

    """
    Property condition.
    """
    start: SearchByScalarDateOrNull
}

"""
Available conditions for `input DocumentsQuery` (only one property allowed at a time).
"""
input SearchByConditionDocumentsQuery {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionDocumentsQuery!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionDocumentsQuery!]

    """
    Relationship condition.
    """
    assets: SearchByComplexRelationAssetsQuery

    """
    Relationship condition.
    """
    contacts: SearchByComplexRelationContactsQuery

    """
    Property condition.
    """
    contacts_count: SearchByScalarInt

    """
    Relationship condition.
    """
    currency: SearchByComplexRelationCurrenciesQuery

    """
    Property condition.
    """
    currency_id: SearchByScalarIDOrNull

    """
    Relationship condition.
    """
    customer: SearchByComplexRelationCompaniesQuery

    """
    Property condition.
    """
    customer_id: SearchByScalarIDOrNull

    """
    Relationship condition.
    """
    distributor: SearchByComplexRelationDistributorsQuery

    """
    Property condition.
    """
    distributor_id: SearchByScalarIDOrNull

    """
    Property condition.
    """
    end: SearchByScalarDate

    """
    Relationship condition.
    """
    entries: SearchByComplexRelationDocumentEntriesQuery

    """
    Property condition.
    """
    entries_count: SearchByScalarInt

    """
    Property condition.
    """
    id: SearchByScalarID

    """
    Relationship condition.
    """
    language: SearchByComplexRelationLanguagesQuery

    """
    Property condition.
    """
    language_id: SearchByScalarIDOrNull

    """
    Not.
    """
    not: SearchByConditionDocumentsQuery

    """
    Property condition.
    """
    number: SearchByScalarStringOrNull

    """
    Relationship condition.
    """
    oem: SearchByComplexRelationOemsQuery

    """
    Relationship condition.
    """
    oemGroup: SearchByComplexRelationOemGroupsQuery

    """
    Property condition.
    """
    oem_amp_id: SearchByScalarStringOrNull

    """
    Property condition.
    """
    oem_group_id: SearchByScalarIDOrNull

    """
    Property condition.
    """
    oem_id: SearchByScalarIDOrNull

    """
    Property condition.
    """
    oem_said: SearchByScalarStringOrNull

    """
    Property condition.
    """
    oem_sar_number: SearchByScalarStringOrNull

    """
    Relationship condition.
    """
    reseller: SearchByComplexRelationCompaniesQuery

    """
    Property condition.
    """
    reseller_id: SearchByScalarIDOrNull

    """
    Property condition.
    """
    start: SearchByScalarDate

    """
    Relationship condition.
    """
    statuses: SearchByComplexRelationStatusesQuery

    """
    Property condition.
    """
    statuses_count: SearchByScalarInt

    """
    Property condition.
    """
    type_id: SearchByScalarIDOrNull
}

"""
Available conditions for `input LanguagesQuery` (only one property allowed at a time).
"""
input SearchByConditionLanguagesQuery {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionLanguagesQuery!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionLanguagesQuery!]

    """
    Relationship condition.
    """
    documents: SearchByComplexRelationDocumentsQuery

    """
    Not.
    """
    not: SearchByConditionLanguagesQuery
}

"""
Available conditions for `input LocationsQuery` (only one property allowed at a time).
"""
input SearchByConditionLocationsQuery {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionLocationsQuery!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionLocationsQuery!]

    """
    Relationship condition.
    """
    assets: SearchByComplexRelationAssetsQuery

    """
    Relationship condition.
    """
    city: SearchByComplexRelationCitiesQuery

    """
    Property condition.
    """
    city_id: SearchByScalarID

    """
    Relationship condition.
    """
    country: SearchByComplexRelationCountriesQuery

    """
    Property condition.
    """
    country_id: SearchByScalarID

    """
    Relationship condition.
    """
    customers: SearchByComplexRelationCompaniesQuery

    """
    Property condition.
    """
    id: SearchByScalarID

    """
    Property condition.
    """
    latitude: SearchByScalarFloatOrNull

    """
    Property condition.
    """
    line_one: SearchByScalarString

    """
    Property condition.
    """
    line_two: SearchByScalarString

    """
    Property condition.
    """
    longitude: SearchByScalarFloatOrNull

    """
    Not.
    """
    not: SearchByConditionLocationsQuery

    """
    Property condition.
    """
    postcode: SearchByScalarString

    """
    Property condition.
    """
    state: SearchByScalarString
}

"""
Available conditions for `input MapQuery` (only one property allowed at a time).
"""
input SearchByConditionMapQuery {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionMapQuery!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionMapQuery!]

    """
    Relationship condition.
    """
    city: SearchByComplexRelationCitiesQuery

    """
    Property condition.
    """
    city_id: SearchByScalarID

    """
    Relationship condition.
    """
    country: SearchByComplexRelationCountriesQuery

    """
    Property condition.
    """
    country_id: SearchByScalarID

    """
    Not.
    """
    not: SearchByConditionMapQuery

    """
    Property condition.
    """
    postcode: SearchByScalarString

    """
    Property condition.
    """
    state: SearchByScalarString
}

"""
Available conditions for `input MeSearchQuery` (only one property allowed at a time).
"""
input SearchByConditionMeSearchQuery {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionMeSearchQuery!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionMeSearchQuery!]

    """
    Property condition.
    """
    created_at: SearchByScalarDateTime

    """
    Property condition.
    """
    id: SearchByScalarID

    """
    Property condition.
    """
    key: SearchByScalarString

    """
    Property condition.
    """
    name: SearchByScalarString

    """
    Not.
    """
    not: SearchByConditionMeSearchQuery
}

"""
Available conditions for `input NotesQuery` (only one property allowed at a time).
"""
input SearchByConditionNotesQuery {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionNotesQuery!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionNotesQuery!]

    """
    Not.
    """
    not: SearchByConditionNotesQuery

    """
    Property condition.
    """
    note: SearchByScalarHtmlStringOrNull

    """
    Property condition.
    """
    pinned: SearchByScalarBoolean

    """
    Relationship condition.
    """
    user: SearchByComplexRelationUsersQuery

    """
    Property condition.
    """
    user_id: SearchByScalarID
}

"""
Available conditions for `input OemGroupsQuery` (only one property allowed at a time).
"""
input SearchByConditionOemGroupsQuery {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionOemGroupsQuery!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionOemGroupsQuery!]

    """
    Property condition.
    """
    id: SearchByScalarID

    """
    Property condition.
    """
    key: SearchByScalarString

    """
    Property condition.
    """
    name: SearchByScalarString

    """
    Not.
    """
    not: SearchByConditionOemGroupsQuery
}

"""
Available conditions for `input OemsQuery` (only one property allowed at a time).
"""
input SearchByConditionOemsQuery {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionOemsQuery!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionOemsQuery!]

    """
    Relationship condition.
    """
    assets: SearchByComplexRelationAssetsQuery

    """
    Relationship condition.
    """
    documents: SearchByComplexRelationDocumentsQuery

    """
    Not.
    """
    not: SearchByConditionOemsQuery
}

"""
Available conditions for `input OrganizationsQuery` (only one property allowed at a time).
"""
input SearchByConditionOrganizationsQuery {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionOrganizationsQuery!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionOrganizationsQuery!]

    """
    Relationship condition.
    """
    company: SearchByComplexRelationCompaniesQuery

    """
    Property condition.
    """
    email: SearchByScalarEmailOrNull

    """
    Property condition.
    """
    id: SearchByScalarID

    """
    Property condition.
    """
    name: SearchByScalarString

    """
    Not.
    """
    not: SearchByConditionOrganizationsQuery

    """
    Property condition.
    """
    type: SearchByEnumOrganizationType

    """
    Property condition.
    """
    website_url: SearchByScalarUrlOrNull
}

"""
Available conditions for `input ProductGroupsQuery` (only one property allowed at a time).
"""
input SearchByConditionProductGroupsQuery {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionProductGroupsQuery!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionProductGroupsQuery!]

    """
    Property condition.
    """
    id: SearchByScalarID

    """
    Property condition.
    """
    key: SearchByScalarString

    """
    Property condition.
    """
    name: SearchByScalarString

    """
    Not.
    """
    not: SearchByConditionProductGroupsQuery
}

"""
Available conditions for `input ProductLinesQuery` (only one property allowed at a time).
"""
input SearchByConditionProductLinesQuery {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionProductLinesQuery!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionProductLinesQuery!]

    """
    Property condition.
    """
    id: SearchByScalarID

    """
    Property condition.
    """
    key: SearchByScalarString

    """
    Property condition.
    """
    name: SearchByScalarString

    """
    Not.
    """
    not: SearchByConditionProductLinesQuery
}

"""
Available conditions for `input ProductsQuery` (only one property allowed at a time).
"""
input SearchByConditionProductsQuery {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionProductsQuery!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionProductsQuery!]

    """
    Relationship condition.
    """
    assets: SearchByComplexRelationAssetsQuery

    """
    Relationship condition.
    """
    documentEntries: SearchByComplexRelationDocumentEntriesQuery

    """
    Property condition.
    """
    id: SearchByScalarID

    """
    Property condition.
    """
    name: SearchByScalarString

    """
    Not.
    """
    not: SearchByConditionProductsQuery

    """
    Relationship condition.
    """
    oem: SearchByComplexRelationOemsQuery

    """
    Property condition.
    """
    oem_id: SearchByScalarID

    """
    Property condition.
    """
    sku: SearchByScalarString
}

"""
Available conditions for `input PspsQuery` (only one property allowed at a time).
"""
input SearchByConditionPspsQuery {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionPspsQuery!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionPspsQuery!]

    """
    Property condition.
    """
    id: SearchByScalarID

    """
    Property condition.
    """
    key: SearchByScalarString

    """
    Property condition.
    """
    name: SearchByScalarString

    """
    Not.
    """
    not: SearchByConditionPspsQuery
}

"""
Available conditions for `input QuoteStatusesQuery` (only one property allowed at a time).
"""
input SearchByConditionQuoteStatusesQuery {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionQuoteStatusesQuery!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionQuoteStatusesQuery!]

    """
    Not.
    """
    not: SearchByConditionQuoteStatusesQuery

    """
    Relationship condition.
    """
    quotes: SearchByComplexRelationDocumentsQuery
}

"""
Available conditions for `input QuoteTypesQuery` (only one property allowed at a time).
"""
input SearchByConditionQuoteTypesQuery {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionQuoteTypesQuery!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionQuoteTypesQuery!]

    """
    Not.
    """
    not: SearchByConditionQuoteTypesQuery

    """
    Relationship condition.
    """
    quotes: SearchByComplexRelationDocumentsQuery
}

"""
Available conditions for `input ServiceGroupsQuery` (only one property allowed at a time).
"""
input SearchByConditionServiceGroupsQuery {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionServiceGroupsQuery!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionServiceGroupsQuery!]

    """
    Relationship condition.
    """
    documentEntries: SearchByComplexRelationDocumentEntriesQuery

    """
    Property condition.
    """
    id: SearchByScalarID

    """
    Not.
    """
    not: SearchByConditionServiceGroupsQuery

    """
    Relationship condition.
    """
    oem: SearchByComplexRelationOemsQuery

    """
    Property condition.
    """
    oem_id: SearchByScalarID

    """
    Property condition.
    """
    sku: SearchByScalarString
}

"""
Available conditions for `input ServiceLevelsQuery` (only one property allowed at a time).
"""
input SearchByConditionServiceLevelsQuery {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionServiceLevelsQuery!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionServiceLevelsQuery!]

    """
    Relationship condition.
    """
    documentEntries: SearchByComplexRelationDocumentEntriesQuery

    """
    Property condition.
    """
    id: SearchByScalarID

    """
    Not.
    """
    not: SearchByConditionServiceLevelsQuery

    """
    Relationship condition.
    """
    oem: SearchByComplexRelationOemsQuery

    """
    Property condition.
    """
    oem_id: SearchByScalarID

    """
    Relationship condition.
    """
    serviceGroup: SearchByComplexRelationServiceGroupsQuery

    """
    Property condition.
    """
    service_group_id: SearchByScalarID

    """
    Property condition.
    """
    sku: SearchByScalarString
}

"""
Available conditions for `input StatusesQuery` (only one property allowed at a time).
"""
input SearchByConditionStatusesQuery {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionStatusesQuery!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionStatusesQuery!]

    """
    Property condition.
    """
    id: SearchByScalarID

    """
    Not.
    """
    not: SearchByConditionStatusesQuery
}

"""
Available conditions for `input TagsQuery` (only one property allowed at a time).
"""
input SearchByConditionTagsQuery {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionTagsQuery!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionTagsQuery!]

    """
    Relationship condition.
    """
    assets: SearchByComplexRelationAssetsQuery

    """
    Property condition.
    """
    id: SearchByScalarID

    """
    Property condition.
    """
    name: SearchByScalarString

    """
    Not.
    """
    not: SearchByConditionTagsQuery
}

"""
Available conditions for `input TypesQuery` (only one property allowed at a time).
"""
input SearchByConditionTypesQuery {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionTypesQuery!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionTypesQuery!]

    """
    Property condition.
    """
    id: SearchByScalarID

    """
    Not.
    """
    not: SearchByConditionTypesQuery
}

"""
Available conditions for `input UsersQuery` (only one property allowed at a time).
"""
input SearchByConditionUsersQuery {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionUsersQuery!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionUsersQuery!]

    """
    Property condition.
    """
    email: SearchByScalarEmail

    """
    Property condition.
    """
    enabled: SearchByScalarBoolean

    """
    Property condition.
    """
    family_name: SearchByScalarString

    """
    Property condition.
    """
    given_name: SearchByScalarString

    """
    Property condition.
    """
    id: SearchByScalarID

    """
    Not.
    """
    not: SearchByConditionUsersQuery

    """
    Property condition.
    """
    previous_sign_in: SearchByScalarDateTimeOrNull
}

"""
Available operators for `enum OrganizationType` (only one operator allowed at a time).
"""
input SearchByEnumOrganizationType {
    """
    Equal (`=`).
    """
    equal: OrganizationType

    """
    Within a set of values.
    """
    in: [OrganizationType!]

    """
    Not Equal (`!=`).
    """
    notEqual: OrganizationType

    """
    Outside a set of values.
    """
    notIn: [OrganizationType!]
}

"""
Available operators for `scalar Boolean!` (only one operator allowed at a time).
"""
input SearchByScalarBoolean {
    """
    Equal (`=`).
    """
    equal: Boolean
}

"""
Available operators for `scalar Boolean` (only one operator allowed at a time).
"""
input SearchByScalarBooleanOrNull {
    """
    Equal (`=`).
    """
    equal: Boolean

    """
    Is NOT NULL?
    """
    isNotNull: SearchByTypeFlag

    """
    Is NULL?
    """
    isNull: SearchByTypeFlag
}

"""
Available operators for `scalar Date!` (only one operator allowed at a time).
"""
input SearchByScalarDate {
    """
    Within a range.
    """
    between: SearchByTypeRangeDate

    """
    Equal (`=`).
    """
    equal: Date

    """
    Greater than (`>`).
    """
    greaterThan: Date

    """
    Greater than or equal to (`>=`).
    """
    greaterThanOrEqual: Date

    """
    Within a set of values.
    """
    in: [Date!]

    """
    Less than (`<`).
    """
    lessThan: Date

    """
    Less than or equal to (`<=`).
    """
    lessThanOrEqual: Date

    """
    Outside a range.
    """
    notBetween: SearchByTypeRangeDate

    """
    Not Equal (`!=`).
    """
    notEqual: Date

    """
    Outside a set of values.
    """
    notIn: [Date!]
}

"""
Available operators for `scalar Date` (only one operator allowed at a time).
"""
input SearchByScalarDateOrNull {
    """
    Within a range.
    """
    between: SearchByTypeRangeDate

    """
    Equal (`=`).
    """
    equal: Date

    """
    Greater than (`>`).
    """
    greaterThan: Date

    """
    Greater than or equal to (`>=`).
    """
    greaterThanOrEqual: Date

    """
    Within a set of values.
    """
    in: [Date!]

    """
    Is NOT NULL?
    """
    isNotNull: SearchByTypeFlag

    """
    Is NULL?
    """
    isNull: SearchByTypeFlag

    """
    Less than (`<`).
    """
    lessThan: Date

    """
    Less than or equal to (`<=`).
    """
    lessThanOrEqual: Date

    """
    Outside a range.
    """
    notBetween: SearchByTypeRangeDate

    """
    Not Equal (`!=`).
    """
    notEqual: Date

    """
    Outside a set of values.
    """
    notIn: [Date!]
}

"""
Available operators for `scalar DateTime!` (only one operator allowed at a time).
"""
input SearchByScalarDateTime {
    """
    Within a range.
    """
    between: SearchByTypeRangeDateTime

    """
    Equal (`=`).
    """
    equal: DateTime

    """
    Greater than (`>`).
    """
    greaterThan: DateTime

    """
    Greater than or equal to (`>=`).
    """
    greaterThanOrEqual: DateTime

    """
    Within a set of values.
    """
    in: [DateTime!]

    """
    Less than (`<`).
    """
    lessThan: DateTime

    """
    Less than or equal to (`<=`).
    """
    lessThanOrEqual: DateTime

    """
    Outside a range.
    """
    notBetween: SearchByTypeRangeDateTime

    """
    Not Equal (`!=`).
    """
    notEqual: DateTime

    """
    Outside a set of values.
    """
    notIn: [DateTime!]
}

"""
Available operators for `scalar DateTime` (only one operator allowed at a time).
"""
input SearchByScalarDateTimeOrNull {
    """
    Within a range.
    """
    between: SearchByTypeRangeDateTime

    """
    Equal (`=`).
    """
    equal: DateTime

    """
    Greater than (`>`).
    """
    greaterThan: DateTime

    """
    Greater than or equal to (`>=`).
    """
    greaterThanOrEqual: DateTime

    """
    Within a set of values.
    """
    in: [DateTime!]

    """
    Is NOT NULL?
    """
    isNotNull: SearchByTypeFlag

    """
    Is NULL?
    """
    isNull: SearchByTypeFlag

    """
    Less than (`<`).
    """
    lessThan: DateTime

    """
    Less than or equal to (`<=`).
    """
    lessThanOrEqual: DateTime

    """
    Outside a range.
    """
    notBetween: SearchByTypeRangeDateTime

    """
    Not Equal (`!=`).
    """
    notEqual: DateTime

    """
    Outside a set of values.
    """
    notIn: [DateTime!]
}

"""
Available operators for `scalar Email!` (only one operator allowed at a time).
"""
input SearchByScalarEmail {
    """
    Contains.
    """
    contains: Email

    """
    Ends with a string.
    """
    endsWith: Email

    """
    Equal (`=`).
    """
    equal: Email

    """
    Within a set of values.
    """
    in: [Email!]

    """
    Not Equal (`!=`).
    """
    notEqual: Email

    """
    Outside a set of values.
    """
    notIn: [Email!]

    """
    Starts with a string.
    """
    startsWith: Email
}

"""
Available operators for `scalar Email` (only one operator allowed at a time).
"""
input SearchByScalarEmailOrNull {
    """
    Contains.
    """
    contains: Email

    """
    Ends with a string.
    """
    endsWith: Email

    """
    Equal (`=`).
    """
    equal: Email

    """
    Within a set of values.
    """
    in: [Email!]

    """
    Is NOT NULL?
    """
    isNotNull: SearchByTypeFlag

    """
    Is NULL?
    """
    isNull: SearchByTypeFlag

    """
    Not Equal (`!=`).
    """
    notEqual: Email

    """
    Outside a set of values.
    """
    notIn: [Email!]

    """
    Starts with a string.
    """
    startsWith: Email
}

"""
Available operators for `scalar Float` (only one operator allowed at a time).
"""
input SearchByScalarFloatOrNull {
    """
    Within a range.
    """
    between: SearchByTypeRangeFloat

    """
    Equal (`=`).
    """
    equal: Float

    """
    Greater than (`>`).
    """
    greaterThan: Float

    """
    Greater than or equal to (`>=`).
    """
    greaterThanOrEqual: Float

    """
    Within a set of values.
    """
    in: [Float!]

    """
    Is NOT NULL?
    """
    isNotNull: SearchByTypeFlag

    """
    Is NULL?
    """
    isNull: SearchByTypeFlag

    """
    Less than (`<`).
    """
    lessThan: Float

    """
    Less than or equal to (`<=`).
    """
    lessThanOrEqual: Float

    """
    Outside a range.
    """
    notBetween: SearchByTypeRangeFloat

    """
    Not Equal (`!=`).
    """
    notEqual: Float

    """
    Outside a set of values.
    """
    notIn: [Float!]
}

"""
Available operators for `scalar HtmlString` (only one operator allowed at a time).
"""
input SearchByScalarHtmlStringOrNull {
    """
    Contains.
    """
    contains: HtmlString

    """
    Ends with a string.
    """
    endsWith: HtmlString

    """
    Equal (`=`).
    """
    equal: HtmlString

    """
    Within a set of values.
    """
    in: [HtmlString!]

    """
    Is NOT NULL?
    """
    isNotNull: SearchByTypeFlag

    """
    Is NULL?
    """
    isNull: SearchByTypeFlag

    """
    Not Equal (`!=`).
    """
    notEqual: HtmlString

    """
    Outside a set of values.
    """
    notIn: [HtmlString!]

    """
    Starts with a string.
    """
    startsWith: HtmlString
}

"""
Available operators for `scalar ID!` (only one operator allowed at a time).
"""
input SearchByScalarID {
    """
    Equal (`=`).
    """
    equal: ID

    """
    Within a set of values.
    """
    in: [ID!]

    """
    Not Equal (`!=`).
    """
    notEqual: ID

    """
    Outside a set of values.
    """
    notIn: [ID!]
}

"""
Available operators for `scalar ID` (only one operator allowed at a time).
"""
input SearchByScalarIDOrNull {
    """
    Equal (`=`).
    """
    equal: ID

    """
    Within a set of values.
    """
    in: [ID!]

    """
    Is NOT NULL?
    """
    isNotNull: SearchByTypeFlag

    """
    Is NULL?
    """
    isNull: SearchByTypeFlag

    """
    Not Equal (`!=`).
    """
    notEqual: ID

    """
    Outside a set of values.
    """
    notIn: [ID!]
}

"""
Available operators for `scalar Int!` (only one operator allowed at a time).
"""
input SearchByScalarInt {
    """
    Within a range.
    """
    between: SearchByTypeRangeInt

    """
    Bitwise AND (`&`).
    """
    bitwiseAnd: Int

    """
    Bitwise Left shift (`<<`).
    """
    bitwiseLeftShift: Int

    """
    Bitwise OR (`|`).
    """
    bitwiseOr: Int

    """
    Bitwise Right shift (`>>`).
    """
    bitwiseRightShift: Int

    """
    Bitwise XOR (`^`).
    """
    bitwiseXor: Int

    """
    Equal (`=`).
    """
    equal: Int

    """
    Greater than (`>`).
    """
    greaterThan: Int

    """
    Greater than or equal to (`>=`).
    """
    greaterThanOrEqual: Int

    """
    Within a set of values.
    """
    in: [Int!]

    """
    Less than (`<`).
    """
    lessThan: Int

    """
    Less than or equal to (`<=`).
    """
    lessThanOrEqual: Int

    """
    Outside a range.
    """
    notBetween: SearchByTypeRangeInt

    """
    Not Equal (`!=`).
    """
    notEqual: Int

    """
    Outside a set of values.
    """
    notIn: [Int!]
}

"""
Available operators for `scalar Int` (only one operator allowed at a time).
"""
input SearchByScalarIntOrNull {
    """
    Within a range.
    """
    between: SearchByTypeRangeInt

    """
    Bitwise AND (`&`).
    """
    bitwiseAnd: Int

    """
    Bitwise Left shift (`<<`).
    """
    bitwiseLeftShift: Int

    """
    Bitwise OR (`|`).
    """
    bitwiseOr: Int

    """
    Bitwise Right shift (`>>`).
    """
    bitwiseRightShift: Int

    """
    Bitwise XOR (`^`).
    """
    bitwiseXor: Int

    """
    Equal (`=`).
    """
    equal: Int

    """
    Greater than (`>`).
    """
    greaterThan: Int

    """
    Greater than or equal to (`>=`).
    """
    greaterThanOrEqual: Int

    """
    Within a set of values.
    """
    in: [Int!]

    """
    Is NOT NULL?
    """
    isNotNull: SearchByTypeFlag

    """
    Is NULL?
    """
    isNull: SearchByTypeFlag

    """
    Less than (`<`).
    """
    lessThan: Int

    """
    Less than or equal to (`<=`).
    """
    lessThanOrEqual: Int

    """
    Outside a range.
    """
    notBetween: SearchByTypeRangeInt

    """
    Not Equal (`!=`).
    """
    notEqual: Int

    """
    Outside a set of values.
    """
    notIn: [Int!]
}

"""
Available operators for `scalar PhoneNumber` (only one operator allowed at a time).
"""
input SearchByScalarPhoneNumberOrNull {
    """
    Contains.
    """
    contains: PhoneNumber

    """
    Ends with a string.
    """
    endsWith: PhoneNumber

    """
    Equal (`=`).
    """
    equal: PhoneNumber

    """
    Within a set of values.
    """
    in: [PhoneNumber!]

    """
    Is NOT NULL?
    """
    isNotNull: SearchByTypeFlag

    """
    Is NULL?
    """
    isNull: SearchByTypeFlag

    """
    Not Equal (`!=`).
    """
    notEqual: PhoneNumber

    """
    Outside a set of values.
    """
    notIn: [PhoneNumber!]

    """
    Starts with a string.
    """
    startsWith: PhoneNumber
}

"""
Available operators for `scalar String!` (only one operator allowed at a time).
"""
input SearchByScalarString {
    """
    Contains.
    """
    contains: String

    """
    Ends with a string.
    """
    endsWith: String

    """
    Equal (`=`).
    """
    equal: String

    """
    Within a set of values.
    """
    in: [String!]

    """
    Not Equal (`!=`).
    """
    notEqual: String

    """
    Outside a set of values.
    """
    notIn: [String!]

    """
    Starts with a string.
    """
    startsWith: String
}

"""
Available operators for `scalar String` (only one operator allowed at a time).
"""
input SearchByScalarStringOrNull {
    """
    Contains.
    """
    contains: String

    """
    Ends with a string.
    """
    endsWith: String

    """
    Equal (`=`).
    """
    equal: String

    """
    Within a set of values.
    """
    in: [String!]

    """
    Is NOT NULL?
    """
    isNotNull: SearchByTypeFlag

    """
    Is NULL?
    """
    isNull: SearchByTypeFlag

    """
    Not Equal (`!=`).
    """
    notEqual: String

    """
    Outside a set of values.
    """
    notIn: [String!]

    """
    Starts with a string.
    """
    startsWith: String
}

"""
Available operators for `scalar Url` (only one operator allowed at a time).
"""
input SearchByScalarUrlOrNull {
    """
    Contains.
    """
    contains: Url

    """
    Ends with a string.
    """
    endsWith: Url

    """
    Equal (`=`).
    """
    equal: Url

    """
    Within a set of values.
    """
    in: [Url!]

    """
    Is NOT NULL?
    """
    isNotNull: SearchByTypeFlag

    """
    Is NULL?
    """
    isNull: SearchByTypeFlag

    """
    Not Equal (`!=`).
    """
    notEqual: Url

    """
    Outside a set of values.
    """
    notIn: [Url!]

    """
    Starts with a string.
    """
    startsWith: Url
}

input SearchByTypeRangeDate {
    max: Date!
    min: Date!
}

input SearchByTypeRangeDateTime {
    max: DateTime!
    min: DateTime!
}

input SearchByTypeRangeFloat {
    max: Float!
    min: Float!
}

input SearchByTypeRangeInt {
    max: Int!
    min: Int!
}

input SendResetPasswordLinkInput {
    email: Email!
}

input SetApplicationLocaleInput {
    locale: String!
}

"""
Sort clause for input ApplicationLogsSort (only one property allowed at a time).
"""
input SortByClauseApplicationLogsSort {
    """
    Property clause.
    """
    created_at: SortByTypeDirection

    """
    Property clause.
    """
    duration: SortByTypeDirection

    """
    Property clause.
    """
    finished_at: SortByTypeDirection
}

"""
Sort clause for input AssetsSearchCustomerSort (only one property allowed at a time).
"""
input SortByClauseAssetsSearchCustomerSort {
    """
    Property clause.
    """
    name: SortByTypeDirection
}

"""
Sort clause for input AssetsSearchProductSort (only one property allowed at a time).
"""
input SortByClauseAssetsSearchProductSort {
    """
    Property clause.
    """
    name: SortByTypeDirection

    """
    Property clause.
    """
    sku: SortByTypeDirection
}

"""
Sort clause for input AssetsSearchSort (only one property allowed at a time).
"""
input SortByClauseAssetsSearchSort {
    """
    Property clause.
    """
    customer: SortByClauseAssetsSearchCustomerSort

    """
    Property clause.
    """
    nickname: SortByTypeDirection

    """
    Property clause.
    """
    product: SortByClauseAssetsSearchProductSort

    """
    Property clause.
    """
    serial_number: SortByTypeDirection
}

"""
Sort clause for input AssetsSort (only one property allowed at a time).
"""
input SortByClauseAssetsSort {
    """
    Property clause.
    """
    contacts_active_quantity: SortByTypeDirection

    """
    Property clause.
    """
    created_at: SortByTypeDirection

    """
    Property clause.
    """
    customer: SortByClauseCompaniesSort

    """
    Property clause.
    """
    deleted_at: SortByTypeDirection

    """
    Property clause.
    """
    eosl: SortByTypeDirection

    """
    Property clause.
    """
    id: SortByTypeDirection

    """
    Property clause.
    """
    location: SortByClauseLocationsSort

    """
    Property clause.
    """
    nickname: SortByTypeDirection

    """
    Property clause.
    """
    oem: SortByClauseOemsSort

    """
    Property clause.
    """
    product: SortByClauseProductsSort

    """
    Property clause.
    """
    reseller: SortByClauseCompaniesSort

    """
    Property clause.
    """
    serial_number: SortByTypeDirection

    """
    Property clause.
    """
    status: SortByClauseStatusesSort

    """
    Property clause.
    """
    type: SortByClauseTypesSort

    """
    Property clause.
    """
    updated_at: SortByTypeDirection

    """
    Property clause.
    """
    warrantyServiceGroup: SortByClauseServiceGroupsSort

    """
    Property clause.
    """
    warrantyServiceLevel: SortByClauseServiceLevelsSort

    """
    Property clause.
    """
    warranty_end: SortByTypeDirection

    """
    Property clause.
    """
    warranty_service_group_id: SortByTypeDirection

    """
    Property clause.
    """
    warranty_service_level_id: SortByTypeDirection
}

"""
Sort clause for input AuditsSort (only one property allowed at a time).
"""
input SortByClauseAuditsSort {
    """
    Property clause.
    """
    action: SortByTypeDirection

    """
    Property clause.
    """
    created_at: SortByTypeDirection

    """
    Property clause.
    """
    id: SortByTypeDirection

    """
    Property clause.
    """
    object_id: SortByTypeDirection

    """
    Property clause.
    """
    object_type: SortByTypeDirection

    """
    Property clause.
    """
    organization_id: SortByTypeDirection

    """
    Property clause.
    """
    updated_at: SortByTypeDirection

    """
    Property clause.
    """
    user_id: SortByTypeDirection
}

"""
Sort clause for input ChangeRequestsSort (only one property allowed at a time).
"""
input SortByClauseChangeRequestsSort {
    """
    Property clause.
    """
    created_at: SortByTypeDirection

    """
    Property clause.
    """
    deleted_at: SortByTypeDirection

    """
    Property clause.
    """
    from: SortByTypeDirection

    """
    Property clause.
    """
    id: SortByTypeDirection

    """
    Property clause.
    """
    updated_at: SortByTypeDirection

    """
    Property clause.
    """
    user: SortByClauseUsersSort

    """
    Property clause.
    """
    user_id: SortByTypeDirection
}

"""
Sort clause for input CitiesSort (only one property allowed at a time).
"""
input SortByClauseCitiesSort {
    """
    Property clause.
    """
    country: SortByClauseCountriesSort

    """
    Property clause.
    """
    id: SortByTypeDirection

    """
    Property clause.
    """
    name: SortByTypeDirection
}

"""
Sort clause for input CompaniesSort (only one property allowed at a time).
"""
input SortByClauseCompaniesSort {
    """
    Property clause.
    """
    assets_count: SortByTypeDirection

    """
    Property clause.
    """
    contacts_count: SortByTypeDirection

    """
    Property clause.
    """
    contracts_count: SortByTypeDirection

    """
    Property clause.
    """
    created_at: SortByTypeDirection

    """
    Property clause.
    """
    deleted_at: SortByTypeDirection

    """
    Property clause.
    """
    headquarter: SortByClauseCompanyLocationsSort

    """
    Property clause.
    """
    locations_count: SortByTypeDirection

    """
    Property clause.
    """
    name: SortByTypeDirection

    """
    Property clause.
    """
    quotes_count: SortByTypeDirection

    """
    Property clause.
    """
    updated_at: SortByTypeDirection
}

"""
Sort clause for input CompanyLocationsSort (only one property allowed at a time).
"""
input SortByClauseCompanyLocationsSort {
    """
    Property clause.
    """
    location: SortByClauseLocationsSort
}

"""
Sort clause for input ContactsSort (only one property allowed at a time).
"""
input SortByClauseContactsSort {
    """
    Property clause.
    """
    created_at: SortByTypeDirection

    """
    Property clause.
    """
    deleted_at: SortByTypeDirection

    """
    Property clause.
    """
    email: SortByTypeDirection

    """
    Property clause.
    """
    name: SortByTypeDirection

    """
    Property clause.
    """
    phone_number: SortByTypeDirection

    """
    Property clause.
    """
    phone_valid: SortByTypeDirection

    """
    Property clause.
    """
    updated_at: SortByTypeDirection
}

"""
Sort clause for input CountriesSort (only one property allowed at a time).
"""
input SortByClauseCountriesSort {
    """
    Property clause.
    """
    code: SortByTypeDirection

    """
    Property clause.
    """
    id: SortByTypeDirection

    """
    Property clause.
    """
    name: SortByTypeDirection
}

"""
Sort clause for input CurrenciesSort (only one property allowed at a time).
"""
input SortByClauseCurrenciesSort {
    """
    Property clause.
    """
    code: SortByTypeDirection
}

"""
Sort clause for input CustomersSearchHeadquarterCitySort (only one property allowed at a time).
"""
input SortByClauseCustomersSearchHeadquarterCitySort {
    """
    Property clause.
    """
    name: SortByTypeDirection
}

"""
Sort clause for input CustomersSearchHeadquarterSort (only one property allowed at a time).
"""
input SortByClauseCustomersSearchHeadquarterSort {
    """
    Property clause.
    """
    city: SortByClauseCustomersSearchHeadquarterCitySort
}

"""
Sort clause for input CustomersSearchSort (only one property allowed at a time).
"""
input SortByClauseCustomersSearchSort {
    """
    Property clause.
    """
    headquarter: SortByClauseCustomersSearchHeadquarterSort

    """
    Property clause.
    """
    name: SortByTypeDirection
}

"""
Sort clause for input DistributorsSort (only one property allowed at a time).
"""
input SortByClauseDistributorsSort {
    """
    Property clause.
    """
    created_at: SortByTypeDirection

    """
    Property clause.
    """
    deleted_at: SortByTypeDirection

    """
    Property clause.
    """
    id: SortByTypeDirection

    """
    Property clause.
    """
    name: SortByTypeDirection

    """
    Property clause.
    """
    updated_at: SortByTypeDirection
}

"""
Sort clause for input DocumentEntriesSort (only one property allowed at a time).
"""
input SortByClauseDocumentEntriesSort {
    """
    Property clause.
    """
    asset: SortByClauseAssetsSort

    """
    Property clause.
    """
    assetType: SortByClauseTypesSort

    """
    Property clause.
    """
    asset_id: SortByTypeDirection

    """
    Property clause.
    """
    asset_type_id: SortByTypeDirection

    """
    Property clause.
    """
    created_at: SortByTypeDirection

    """
    Property clause.
    """
    currency: SortByClauseCurrenciesSort

    """
    Property clause.
    """
    currency_id: SortByTypeDirection

    """
    Property clause.
    """
    deleted_at: SortByTypeDirection

    """
    Property clause.
    """
    end: SortByTypeDirection

    """
    Property clause.
    """
    environment_id: SortByTypeDirection

    """
    Property clause.
    """
    equipment_number: SortByTypeDirection

    """
    Property clause.
    """
    id: SortByTypeDirection

    """
    Property clause.
    """
    language: SortByClauseLanguagesSort

    """
    Property clause.
    """
    language_id: SortByTypeDirection

    """
    Property clause.
    """
    list_price: SortByTypeDirection

    """
    Property clause.
    """
    monthly_list_price: SortByTypeDirection

    """
    Property clause.
    """
    monthly_retail_price: SortByTypeDirection

    """
    Property clause.
    """
    oem_said: SortByTypeDirection

    """
    Property clause.
    """
    oem_sar_number: SortByTypeDirection

    """
    Property clause.
    """
    product: SortByClauseProductsSort

    """
    Property clause.
    """
    productGroup: SortByClauseProductGroupsSort

    """
    Property clause.
    """
    productLine: SortByClauseProductLinesSort

    """
    Property clause.
    """
    product_group_id: SortByTypeDirection

    """
    Property clause.
    """
    product_id: SortByTypeDirection

    """
    Property clause.
    """
    product_line_id: SortByTypeDirection

    """
    Property clause.
    """
    psp: SortByClausePspsSort

    """
    Property clause.
    """
    psp_id: SortByTypeDirection

    """
    Property clause.
    """
    removed_at: SortByTypeDirection

    """
    Property clause.
    """
    renewal: SortByTypeDirection

    """
    Property clause.
    """
    serial_number: SortByTypeDirection

    """
    Property clause.
    """
    serviceGroup: SortByClauseServiceGroupsSort

    """
    Property clause.
    """
    serviceLevel: SortByClauseServiceLevelsSort

    """
    Property clause.
    """
    service_group_id: SortByTypeDirection

    """
    Property clause.
    """
    service_level_id: SortByTypeDirection

    """
    Property clause.
    """
    start: SortByTypeDirection

    """
    Property clause.
    """
    updated_at: SortByTypeDirection
}

"""
Sort clause for input DocumentsSearchCustomerSort (only one property allowed at a time).
"""
input SortByClauseDocumentsSearchCustomerSort {
    """
    Property clause.
    """
    name: SortByTypeDirection
}

"""
Sort clause for input DocumentsSearchEntriesProductSort (only one property allowed at a time).
"""
input SortByClauseDocumentsSearchEntriesProductSort {
    """
    Property clause.
    """
    name: SortByTypeDirection

    """
    Property clause.
    """
    sku: SortByTypeDirection
}

"""
Sort clause for input DocumentsSearchEntriesSort (only one property allowed at a time).
"""
input SortByClauseDocumentsSearchEntriesSort {
    """
    Property clause.
    """
    product: SortByClauseDocumentsSearchEntriesProductSort

    """
    Property clause.
    """
    serial_number: SortByTypeDirection
}

"""
Sort clause for input DocumentsSearchSort (only one property allowed at a time).
"""
input SortByClauseDocumentsSearchSort {
    """
    Property clause.
    """
    customer: SortByClauseDocumentsSearchCustomerSort

    """
    Property clause.
    """
    end: SortByTypeDirection

    """
    Property clause.
    """
    entries: SortByClauseDocumentsSearchEntriesSort

    """
    Property clause.
    """
    number: SortByTypeDirection

    """
    Property clause.
    """
    start: SortByTypeDirection
}

"""
Sort clause for input DocumentsSort (only one property allowed at a time).
"""
input SortByClauseDocumentsSort {
    """
    Property clause.
    """
    created_at: SortByTypeDirection

    """
    Property clause.
    """
    currency: SortByClauseCurrenciesSort

    """
    Property clause.
    """
    customer: SortByClauseCompaniesSort

    """
    Property clause.
    """
    deleted_at: SortByTypeDirection

    """
    Property clause.
    """
    distributor: SortByClauseDistributorsSort

    """
    Property clause.
    """
    end: SortByTypeDirection

    """
    Property clause.
    """
    id: SortByTypeDirection

    """
    Property clause.
    """
    language: SortByClauseLanguagesSort

    """
    Property clause.
    """
    number: SortByTypeDirection

    """
    Property clause.
    """
    oem: SortByClauseOemsSort

    """
    Property clause.
    """
    oemGroup: SortByClauseOemGroupsSort

    """
    Property clause.
    """
    oem_amp_id: SortByTypeDirection

    """
    Property clause.
    """
    oem_said: SortByTypeDirection

    """
    Property clause.
    """
    oem_sar_number: SortByTypeDirection

    """
    Property clause.
    """
    price: SortByTypeDirection

    """
    Property clause.
    """
    reseller: SortByClauseCompaniesSort

    """
    Property clause.
    """
    start: SortByTypeDirection

    """
    Property clause.
    """
    updated_at: SortByTypeDirection
}

"""
Sort clause for input LanguagesSort (only one property allowed at a time).
"""
input SortByClauseLanguagesSort {
    """
    Property clause.
    """
    code: SortByTypeDirection
}

"""
Sort clause for input LocationsSort (only one property allowed at a time).
"""
input SortByClauseLocationsSort {
    """
    Property clause.
    """
    city: SortByClauseCitiesSort

    """
    Property clause.
    """
    country: SortByClauseCountriesSort

    """
    Property clause.
    """
    created_at: SortByTypeDirection

    """
    Property clause.
    """
    deleted_at: SortByTypeDirection

    """
    Property clause.
    """
    line_one: SortByTypeDirection

    """
    Property clause.
    """
    line_two: SortByTypeDirection

    """
    Property clause.
    """
    postcode: SortByTypeDirection

    """
    Property clause.
    """
    state: SortByTypeDirection

    """
    Property clause.
    """
    updated_at: SortByTypeDirection
}

"""
Sort clause for input MeSearchSort (only one property allowed at a time).
"""
input SortByClauseMeSearchSort {
    """
    Property clause.
    """
    created_at: SortByTypeDirection

    """
    Property clause.
    """
    deleted_at: SortByTypeDirection

    """
    Property clause.
    """
    key: SortByTypeDirection

    """
    Property clause.
    """
    name: SortByTypeDirection

    """
    Property clause.
    """
    updated_at: SortByTypeDirection
}

"""
Sort clause for input NotesSort (only one property allowed at a time).
"""
input SortByClauseNotesSort {
    """
    Property clause.
    """
    created_at: SortByTypeDirection

    """
    Property clause.
    """
    deleted_at: SortByTypeDirection

    """
    Property clause.
    """
    pinned: SortByTypeDirection

    """
    Property clause.
    """
    updated_at: SortByTypeDirection

    """
    Property clause.
    """
    user: SortByClauseUsersSort

    """
    Property clause.
    """
    user_id: SortByTypeDirection
}

"""
Sort clause for input OemGroupsSort (only one property allowed at a time).
"""
input SortByClauseOemGroupsSort {
    """
    Property clause.
    """
    created_at: SortByTypeDirection

    """
    Property clause.
    """
    deleted_at: SortByTypeDirection

    """
    Property clause.
    """
    id: SortByTypeDirection

    """
    Property clause.
    """
    key: SortByTypeDirection

    """
    Property clause.
    """
    name: SortByTypeDirection

    """
    Property clause.
    """
    updated_at: SortByTypeDirection
}

"""
Sort clause for input OemsSort (only one property allowed at a time).
"""
input SortByClauseOemsSort {
    """
    Property clause.
    """
    id: SortByTypeDirection

    """
    Property clause.
    """
    key: SortByTypeDirection

    """
    Property clause.
    """
    name: SortByTypeDirection
}

"""
Sort clause for input OrganizationsSort (only one property allowed at a time).
"""
input SortByClauseOrganizationsSort {
    """
    Property clause.
    """
    created_at: SortByTypeDirection

    """
    Property clause.
    """
    deleted_at: SortByTypeDirection

    """
    Property clause.
    """
    email: SortByTypeDirection

    """
    Property clause.
    """
    name: SortByTypeDirection

    """
    Property clause.
    """
    updated_at: SortByTypeDirection

    """
    Property clause.
    """
    website_url: SortByTypeDirection
}

"""
Sort clause for input ProductGroupsSort (only one property allowed at a time).
"""
input SortByClauseProductGroupsSort {
    """
    Property clause.
    """
    id: SortByTypeDirection

    """
    Property clause.
    """
    key: SortByTypeDirection

    """
    Property clause.
    """
    name: SortByTypeDirection
}

"""
Sort clause for input ProductLinesSort (only one property allowed at a time).
"""
input SortByClauseProductLinesSort {
    """
    Property clause.
    """
    id: SortByTypeDirection

    """
    Property clause.
    """
    key: SortByTypeDirection

    """
    Property clause.
    """
    name: SortByTypeDirection
}

"""
Sort clause for input ProductsSort (only one property allowed at a time).
"""
input SortByClauseProductsSort {
    """
    Property clause.
    """
    eol: SortByTypeDirection

    """
    Property clause.
    """
    eos: SortByTypeDirection

    """
    Property clause.
    """
    id: SortByTypeDirection

    """
    Property clause.
    """
    name: SortByTypeDirection

    """
    Property clause.
    """
    oem: SortByClauseOemsSort

    """
    Property clause.
    """
    sku: SortByTypeDirection
}

"""
Sort clause for input PspsSort (only one property allowed at a time).
"""
input SortByClausePspsSort {
    """
    Property clause.
    """
    id: SortByTypeDirection

    """
    Property clause.
    """
    key: SortByTypeDirection

    """
    Property clause.
    """
    name: SortByTypeDirection
}

"""
Sort clause for input ServiceGroupsSort (only one property allowed at a time).
"""
input SortByClauseServiceGroupsSort {
    """
    Property clause.
    """
    oem: SortByClauseOemsSort

    """
    Property clause.
    """
    sku: SortByTypeDirection
}

"""
Sort clause for input ServiceLevelsSort (only one property allowed at a time).
"""
input SortByClauseServiceLevelsSort {
    """
    Property clause.
    """
    oem: SortByClauseOemsSort

    """
    Property clause.
    """
    serviceGroup: SortByClauseServiceGroupsSort

    """
    Property clause.
    """
    sku: SortByTypeDirection
}

"""
Sort clause for input StatusesSort (only one property allowed at a time).
"""
input SortByClauseStatusesSort {
    """
    Property clause.
    """
    name: SortByTypeDirection
}

"""
Sort clause for type Tag (only one property allowed at a time).
"""
input SortByClauseTag {
    """
    Property clause.
    """
    id: SortByTypeDirection

    """
    Property clause.
    """
    name: SortByTypeDirection
}

"""
Sort clause for input TypesSort (only one property allowed at a time).
"""
input SortByClauseTypesSort {
    """
    Property clause.
    """
    name: SortByTypeDirection
}

"""
Sort clause for input UsersSort (only one property allowed at a time).
"""
input SortByClauseUsersSort {
    """
    Property clause.
    """
    created_at: SortByTypeDirection

    """
    Property clause.
    """
    deleted_at: SortByTypeDirection

    """
    Property clause.
    """
    email: SortByTypeDirection

    """
    Property clause.
    """
    enabled: SortByTypeDirection

    """
    Property clause.
    """
    family_name: SortByTypeDirection

    """
    Property clause.
    """
    given_name: SortByTypeDirection

    """
    Property clause.
    """
    previous_sign_in: SortByTypeDirection

    """
    Property clause.
    """
    updated_at: SortByTypeDirection
}

input StopApplicationServiceInput {
    """
    Name of the service.
    """
    name: String!
}

input TranslatedStringInput {
    locale: String!
    text: String!
}

input UpdateApplicationSettingsInput {
    name: String!
    value: String!
}

input UpdateClientSettingsInput {
    name: String!
    value: String!
}

input UpdateContractNoteFile {
    content: Upload
    id: ID
}

input UpdateContractNoteInput {
    files: [UpdateContractNoteFile!]
    id: ID!
    note: HtmlString
    pinned: Boolean
}

input UpdateMeEmailInput {
    email: Email!
}

input UpdateMePasswordInput {
    current_password: String
    password: String!
}

input UpdateQuoteNoteFile {
    content: Upload
    id: ID
}

input UpdateQuoteNoteInput {
    files: [UpdateQuoteNoteFile!]
    id: ID!
    note: HtmlString
    pinned: Boolean
}

input UserOrganizationUpdateInput {
    enabled: Boolean
    role_id: ID
    team_id: ID
}

input UserUpdateInput {
    academic_title: String
    contact_email: Email
    enabled: Boolean
    family_name: String
    given_name: String
    homepage: String
    job_title: String
    locale: String
    mobile_phone: PhoneNumber
    office_phone: PhoneNumber
    photo: Upload
    timezone: String
    title: String
}

interface Company {
    changed_at: DateTime
    created_at: DateTime!
    deleted_at: DateTime
    id: ID!
    kpi: Kpi
    name: String!
    statuses: [Status!]!
    synced_at: DateTime!
    updated_at: DateTime!
}

interface Payload {
    result: Boolean!
}

"""
The RGB Color (eg `#FF0000`).
"""
scalar Color

"""
ISO 8601 Date string with format Y-m-d (`2011-05-23`).
"""
scalar Date

"""
ISO 8601 Date Time string with format `Y-m-dTH:i:sP` (`2018-05-23T13:43:32+00:00`).
"""
scalar DateTime

"""
The Email.
"""
scalar Email

"""
Geohash (https://en.wikipedia.org/wiki/Geohash)
"""
scalar Geohash

"""
HTML (https://en.wikipedia.org/wiki/HTML).
"""
scalar HtmlString

"""
Phone number in E.164 format (https://en.wikipedia.org/wiki/E.164).
"""
scalar PhoneNumber

"""
The `SearchString` scalar type represents textual data, represented as UTF-8
character sequences. It is designed specially to search and supports
the simple syntax:

- `*`: return all objects;
- `abc`: return objects that contains `abc`;
- `abc cde`: return objects that contains `abc` and `cde` (in this order);
- `"abc cde"`: return objects that contains exact phrase `abc cde`;
"""
scalar SearchString

"""
Can be used as an argument to upload files using https://github.com/jaydenseric/graphql-multipart-request-spec
"""
scalar Upload

"""
The URL.
"""
scalar Url

type AggregatedGroupByTypeGroup {
    count: Int!
    key: String
}

"""
Aggregated data for `type AggregatedGroupByTypeGroup`.
"""
type AggregatedGroupByTypeGroupsAggregated {
    count: Int!
}

type Application {
    """
    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authRoot> Authenticated user must be a root.
    """
    jobs: [ApplicationJob!]!

    locale: String!

    """
    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authRoot> Authenticated user must be a root.
    """
    logs(
        limit: Int! = 25
        offset: Int! = 0
        order: [SortByClauseApplicationLogsSort!]
        where: SearchByConditionApplicationLogsQuery
    ): [ApplicationLog!]!

    """
    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authRoot> Authenticated user must be a root.
    """
    logsAggregated(
        where: SearchByConditionApplicationLogsQuery
    ): ApplicationLogsAggregated

    maintenance: ApplicationMaintenance
    name: String!

    """
    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authRoot> Authenticated user must be a root.
    """
    services: [ApplicationService!]!

    """
    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authRoot> Authenticated user must be a root.
    """
    settingGroups: [ApplicationSettingGroup!]!

    """
    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authRoot> Authenticated user must be a root.
    """
    settings: [ApplicationSetting!]!

    version: String!
}

type ApplicationJob {
    description: String
    name: String!

    """
    Queue name
    """
    queue: String!

    """
    Settings related to this job.
    """
    settings: [String!]!
}

type ApplicationJobProgress {
    created: Int
    current: Boolean
    deleted: Int
    failed: Int
    name: String
    operations: [ApplicationJobProgress!]
    processed: Int
    success: Int
    total: Int
    updated: Int
}

type ApplicationJobState {
    id: ID!
    pending_at: DateTime
    running: Boolean!
    running_at: DateTime
    stopped: Boolean!
}

type ApplicationLog {
    action: String!
    category: String!

    """
    JSON
    """
    context: String

    created_at: DateTime!

    """
    Seconds
    """
    duration: Float

    finished_at: DateTime
    id: ID!
    object_id: ID
    object_type: String

    """
    JSON
    """
    statistics: String

    """
    Possible values:
    * active
    * success
    * failed
    * unknown
    * killed
    * stopped
    """
    status: String
}

"""
Aggregated data for `type ApplicationLog`.
"""
type ApplicationLogsAggregated {
    count: Int!

    groups(
        groupBy: AggregatedGroupByClauseApplicationLogsQuery!
        limit: Int! = 25
        offset: Int! = 0
    ): [AggregatedGroupByTypeGroup!]!

    groupsAggregated(
        groupBy: AggregatedGroupByClauseApplicationLogsQuery!
    ): AggregatedGroupByTypeGroupsAggregated
}

type ApplicationMaintenance {
    enabled: Boolean!
    end: DateTime
    message: String
    start: DateTime
}

type ApplicationMaintenanceMutation {
    """
    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authRoot> Authenticated user must be a root.
    """
    schedule(
        input: ApplicationMaintenanceScheduleInput!
    ): ApplicationMaintenanceSchedulePayload

    """
    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authRoot> Authenticated user must be a root.
    """
    stop: ApplicationMaintenanceStopPayload
}

type ApplicationMaintenanceSchedulePayload {
    result: Boolean!
}

type ApplicationMaintenanceStopPayload {
    result: Boolean!
}

type ApplicationMutation {
    maintenance: ApplicationMaintenanceMutation
}

type ApplicationService {
    """
    Cron expression that determines when service should run if enabled.
    """
    cron: String

    description: String
    enabled: Boolean!
    name: String!
    progress: ApplicationJobProgress

    """
    Indicates that Service have a progress.
    """
    progressable: Boolean!

    """
    Queue name
    """
    queue: String!

    """
    Settings related to this service.
    """
    settings: [String!]!

    state: ApplicationJobState

    """
    Indicates that Service can be stopped.
    """
    stoppable: Boolean!
}

type ApplicationSetting {
    """
    Indicated that the setting is array.
    """
    array: Boolean!

    """
    Default value.
    """
    default: String!

    description: String

    """
    Indicates that this setting related to job.
    """
    job: Boolean!

    name: String!

    """
    Indicates that the setting is read-only due to configs priority and cannot
    be changed.
    """
    readonly: Boolean!

    """
    Indicates that the setting contains sensitive data (eg password), in this case,
    the real value will not be returned.
    """
    secret: Boolean!

    """
    Indicates that this setting related to service.
    """
    service: Boolean!

    """
    Type. Can be standard GraphQL type like Int, Boolean, etc, or a special
    application type.
    """
    type: String!

    """
    Value of the setting. For array it will contain comma-separated values, for
    Boolean: "true" or "false", also can be "null" that means null.
    """
    value: String!

    """
    Allowed values.
    """
    values: [ApplicationSettingValues!]
}

type ApplicationSettingGroup {
    """
    Group name.
    """
    name: String!

    """
    Settings related to this group.
    """
    settings: [String!]!
}

type Asset {
    changeRequest: ChangeRequest

    changeRequests(
        limit: Int! = 25
        offset: Int! = 0
        order: [SortByClauseChangeRequestsSort!]
        trashed: Trashed
        where: SearchByConditionChangeRequestsQuery
    ): [ChangeRequest!]!

    changeRequestsAggregated(
        trashed: Trashed
        where: SearchByConditionChangeRequestsQuery
    ): ChangeRequestsAggregated

    changed_at: DateTime

    contacts(
        limit: Int! = 25
        offset: Int! = 0
        order: [SortByClauseContactsSort!]
        trashed: Trashed
        where: SearchByConditionContactsQuery
    ): [Contact!]!

    contactsAggregated(
        trashed: Trashed
        where: SearchByConditionContactsQuery
    ): ContactsAggregated

    contacts_active_quantity: Int
    contacts_count: Int!
    coverages: [Coverage!]
    coverages_count: Int!
    created_at: DateTime!
    customer: Customer
    customer_id: ID
    data_quality: String
    deleted_at: DateTime
    eosl: Date
    id: ID!
    location: Location
    location_id: ID
    nickname: String
    oem: Oem
    oem_id: ID
    product: Product
    product_id: ID
    quoteRequest: QuoteRequest
    reseller: Reseller
    reseller_id: ID
    serial_number: String
    status: Status
    status_id: ID
    synced_at: DateTime!
    tags: [Tag!]!
    type: Type
    type_id: ID
    updated_at: DateTime!
    warranties: [AssetWarranty!]!
    warrantyServiceGroup: ServiceGroup
    warrantyServiceLevel: ServiceLevel
    warranty_changed_at: DateTime
    warranty_end: Date
    warranty_service_group_id: ID
    warranty_service_level_id: ID
}

type AssetChangeRequestCreatePayload
implements
    & Payload
{
    changeRequest: ChangeRequest!
    result: Boolean!
}

type AssetChangeRequestMutation {
    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["requests-asset-change"])> User must be authenticated and have any of these permissions.
    """
    create(
        input: MessageInput!
    ): AssetChangeRequestCreatePayload!
}

type AssetMutation {
    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe> User must be authenticated.
    """
    changeRequest: AssetChangeRequestMutation

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["assets-view"])> User must be authenticated and have any of these permissions.

    @require <authMe(["assets-edit-nickname"])> User must be authenticated and have any of these permissions.
    """
    setNickname(
        input: AssetSetNicknameInput!
    ): AssetSetNicknamePayload

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["assets-sync"])> User must be authenticated and have any of these permissions.
    """
    sync: AssetSyncPayload
}

type AssetSetNicknamePayload
implements
    & Payload
{
    asset: Asset
    result: Boolean!
}

type AssetSyncPayload
implements
    & Payload
{
    result: Boolean!
    warranty: Boolean!
}

type AssetWarranty {
    customer: Customer
    customer_id: ID
    description: String
    document: Document
    document_id: ID
    document_number: String
    end: Date
    id: ID!
    reseller: Reseller
    reseller_id: ID
    serviceGroup: ServiceGroup
    serviceLevel: ServiceLevel
    service_group_id: ID
    service_level_id: ID
    start: Date
    status: Status
    status_id: String
    type: Type
    type_id: String
}

"""
Aggregated data for `type Asset`.
"""
type AssetsAggregated {
    count: Int!
    coverages: [AssetsAggregatedCoverage!]!

    groups(
        groupBy: AggregatedGroupByClauseAssetsQuery!
        limit: Int! = 25
        offset: Int! = 0
    ): [AggregatedGroupByTypeGroup!]!

    groupsAggregated(
        groupBy: AggregatedGroupByClauseAssetsQuery!
    ): AggregatedGroupByTypeGroupsAggregated

    types: [AssetsAggregatedType!]!
}

type AssetsAggregatedCoverage {
    count: Int!
    coverage: Type!
    coverage_id: ID!
}

type AssetsAggregatedType {
    count: Int!
    type: Type
    type_id: ID
}

"""
Aggregated data for `type Asset`.
"""
type AssetsSearchAggregated {
    count: Int!
}

type Audit {
    action: String!
    context: String
    created_at: DateTime!
    id: ID!
    object_id: String
    object_type: String
    organization: Organization
    organization_id: ID
    user: User
    user_id: ID
}

"""
Aggregated data for `type Audit`.
"""
type AuditsAggregated {
    count: Int!

    groups(
        groupBy: AggregatedGroupByClauseAuditsQuery!
        limit: Int! = 25
        offset: Int! = 0
    ): [AggregatedGroupByTypeGroup!]!

    groupsAggregated(
        groupBy: AggregatedGroupByClauseAuditsQuery!
    ): AggregatedGroupByTypeGroupsAggregated
}

type Auth {
    """
    @require <authGuest> Current visitor must be a guest.
    """
    invitation(
        token: String!
    ): AuthInvitation
}

type AuthInvitation {
    """
    Indicates that the Invitation is expired and cannot be used.
    """
    expired: Boolean!

    """
    Organization who sent the Invitation.
    """
    org: Org

    """
    Indicates that the new Invitation was sent so this one cannot be used anymore.
    """
    outdated: Boolean!

    """
    Indicates that the Invitation already used.
    """
    used: Boolean!
}

type AuthMutation {
    """
    Organization Sign In.

    Application use standard OAuth 2.0 Authorization Code Grant.

    1. Call `signIn` mutation
        ```graphql
        mutation {
            auth {
                organization(id) {
                    signIn {
                        url
                    }
                }
            }
        }
        ```
    2. Redirect the User to `url`
    3. After successful Sign In the User will come back and Client should call
    `authorize` mutation with `code` and `state` to finish the authorization:
        ```graphql
        mutation {
            auth {
                organization(id) {
                    authorize(input: {code: "...", state: "..."}) {
                        result
                        me {
                            enabled
                        }
                    }
                }
            }
        }
        ```
    4. Check result:
    - `result = false` -> something wrong, please try to repeat step (1)
    - `me.enabled = false` -> user disabled or doesn't have access to the
    Organization. In this case, the Client should allow the User to
    Sign Out (so the User may repeat auth process if it want).

    @require <authGuest> Current visitor must be a guest.
    """
    organization(
        id: ID
    ): AuthOrganizationMutation

    """
    @require <authGuest> Current visitor must be a guest.
    """
    signIn(
        input: AuthSignInInput
    ): AuthSignInPayload

    signOut: AuthSignOutPayload

    """
    Completes Sign Up.

    1. Call `auth { signUpByInvite(token: "...") { result, url } }` and redirect
    User to the `url` if `true`.
    2. If `false` you should provide addition details (`input`) to complete Sign Up
    process.

    See also:
    * `mutation { organization(id) { user { invite } }`
    * `mutation { org { user { invite } }`
    * `query { auth { invitation } }`

    @require <authGuest> Current visitor must be a guest.
    """
    signUpByInvite(
        input: AuthSignUpByInviteInput
        token: String!
    ): AuthSignUpByInvitePayload
}

type AuthOrganizationAuthorizePayload
implements
    & Payload
{
    me: Me
    result: Boolean!
}

type AuthOrganizationMutation {
    """
    @require <authGuest> Current visitor must be a guest.
    """
    authorize(
        input: AuthOrganizationAuthorizeInput!
    ): AuthOrganizationAuthorizePayload

    """
    @require <authGuest> Current visitor must be a guest.
    """
    signIn: AuthOrganizationSignInPayload
}

type AuthOrganizationSignInPayload
implements
    & Payload
{
    result: Boolean!

    """
    The link where the User should be redirected to Sign In.
    """
    url: Url!
}

type AuthSignInPayload
implements
    & Payload
{
    me: Me
    org: Org
    result: Boolean!
}

type AuthSignOutPayload
implements
    & Payload
{
    result: Boolean!

    """
    The link where the User should be redirected to complete Sign Out.
    """
    url: Url
}

type AuthSignUpByInvitePayload
implements
    & Payload
{
    """
    Organization who send the Invite.
    """
    org: Org

    result: Boolean!

    """
    The link where the User should be redirected to Sign In.
    """
    url: Url
}

type ChangeRequest {
    bcc: [String!]
    cc: [String!]
    created_at: DateTime!
    deleted_at: DateTime
    files: [File!]!
    from: String!
    id: ID!
    message: String!
    subject: String!
    to: [String!]!
    updated_at: DateTime!
    user: User
    user_id: ID!
}

"""
Aggregated data for `type ChangeRequest`.
"""
type ChangeRequestsAggregated {
    count: Int!

    groups(
        groupBy: AggregatedGroupByClauseChangeRequestsQuery!
        limit: Int! = 25
        offset: Int! = 0
    ): [AggregatedGroupByTypeGroup!]!

    groupsAggregated(
        groupBy: AggregatedGroupByClauseChangeRequestsQuery!
    ): AggregatedGroupByTypeGroupsAggregated
}

type City {
    country: Country!
    country_id: ID!
    id: ID!
    name: String!
}

type Client {
    settings: [ClientSetting!]!

    translations(
        locale: String!
    ): [ClientTranslation!]!
}

type ClientSetting {
    name: String!

    """
    Value of the setting. For array it will contain comma-separated values, for
    Boolean: "true" or "false", also can be "null" that means null.
    """
    value: String!
}

type ClientTranslation {
    key: String!
    value: String!
}

type CompanyLocation {
    id: ID!
    location: Location
    location_id: ID!
    types: [Type!]!
}

"""
Aggregated data for `type CompanyLocation`.
"""
type CompanyLocationsAggregated {
    count: Int!

    groups(
        groupBy: AggregatedGroupByClauseCompanyLocationsQuery!
        limit: Int! = 25
        offset: Int! = 0
    ): [AggregatedGroupByTypeGroup!]!

    groupsAggregated(
        groupBy: AggregatedGroupByClauseCompanyLocationsQuery!
    ): AggregatedGroupByTypeGroupsAggregated
}

type Contact {
    created_at: DateTime!
    deleted_at: DateTime
    email: Email
    id: ID!
    name: String
    phone_number: PhoneNumber

    """
    Indicates that phone_number in E.164 format
    """
    phone_valid: Boolean

    types: [Type]!
    updated_at: DateTime!
}

"""
Aggregated data for `type Contact`.
"""
type ContactsAggregated {
    count: Int!

    groups(
        groupBy: AggregatedGroupByClauseContactsQuery!
        limit: Int! = 25
        offset: Int! = 0
    ): [AggregatedGroupByTypeGroup!]!

    groupsAggregated(
        groupBy: AggregatedGroupByClauseContactsQuery!
    ): AggregatedGroupByTypeGroupsAggregated
}

type ContractChangeRequestCreatePayload
implements
    & Payload
{
    changeRequest: ChangeRequest!
    result: Boolean!
}

type ContractChangeRequestMutation {
    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["requests-contract-change"])> User must be authenticated and have any of these permissions.
    """
    create(
        input: MessageInput!
    ): ContractChangeRequestCreatePayload!
}

type ContractMutation {
    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe> User must be authenticated.
    """
    changeRequest: ContractChangeRequestMutation

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["contracts-sync"])> User must be authenticated and have any of these permissions.
    """
    sync: ContractSyncPayload
}

type ContractSyncPayload
implements
    & Payload
{
    assets: Boolean!
    result: Boolean!
}

type Country {
    code: String!
    id: ID!
    name: String!
}

type Coverage {
    id: ID!
    key: String!
    name: String!
}

type CreateContractNotePayload {
    created: Note!
}

type CreateMeSearchPayload {
    created: MeSearch!
}

type CreateQuoteNotePayload {
    created: Note!
}

type Currency {
    code: String!
    id: ID!
    name: String!
}

type Customer
implements
    & Company
{
    """
    @require <authMe(["assets-view"])> User must be authenticated and have any of these permissions.
    """
    assets(
        limit: Int! = 25
        offset: Int! = 0
        order: [SortByClauseAssetsSort!]
        trashed: Trashed
        where: SearchByConditionAssetsQuery
    ): [Asset!]!

    """
    @require <authMe(["assets-view"])> User must be authenticated and have any of these permissions.
    """
    assetsAggregated(
        trashed: Trashed
        where: SearchByConditionAssetsQuery
    ): AssetsAggregated

    assets_count: Int!

    changeRequests(
        limit: Int! = 25
        offset: Int! = 0
        order: [SortByClauseChangeRequestsSort!]
        trashed: Trashed
        where: SearchByConditionChangeRequestsQuery
    ): [ChangeRequest!]!

    changeRequestsAggregated(
        trashed: Trashed
        where: SearchByConditionChangeRequestsQuery
    ): ChangeRequestsAggregated

    changed_at: DateTime

    contacts(
        limit: Int! = 25
        offset: Int! = 0
        order: [SortByClauseContactsSort!]
        trashed: Trashed
        where: SearchByConditionContactsQuery
    ): [Contact!]!

    contactsAggregated(
        trashed: Trashed
        where: SearchByConditionContactsQuery
    ): ContactsAggregated

    contacts_count: Int!

    """
    @require <authMe(["contracts-view"])> User must be authenticated and have any of these permissions.
    """
    contracts(
        limit: Int! = 25
        offset: Int! = 0
        order: [SortByClauseDocumentsSort!]
        trashed: Trashed
        where: SearchByConditionDocumentsQuery
    ): [Document!]!

    """
    @require <authMe(["contracts-view"])> User must be authenticated and have any of these permissions.
    """
    contractsAggregated(
        trashed: Trashed
        where: SearchByConditionDocumentsQuery
    ): DocumentsAggregated

    contracts_count: Int!
    created_at: DateTime!
    deleted_at: DateTime
    headquarter: CompanyLocation
    id: ID!
    kpi: Kpi

    locations(
        limit: Int! = 25
        offset: Int! = 0
        order: [SortByClauseCompanyLocationsSort!]
        where: SearchByConditionCompanyLocationsQuery
    ): [CompanyLocation!]!

    locationsAggregated(
        where: SearchByConditionCompanyLocationsQuery
    ): CompanyLocationsAggregated

    locations_count: Int!
    name: String!

    """
    @require <authMe(["quotes-view"])> User must be authenticated and have any of these permissions.
    """
    quotes(
        limit: Int! = 25
        offset: Int! = 0
        order: [SortByClauseDocumentsSort!]
        trashed: Trashed
        where: SearchByConditionDocumentsQuery
    ): [Document!]!

    """
    @require <authMe(["quotes-view"])> User must be authenticated and have any of these permissions.
    """
    quotesAggregated(
        trashed: Trashed
        where: SearchByConditionDocumentsQuery
    ): DocumentsAggregated

    quotes_count: Int!
    statuses: [Status!]!
    synced_at: DateTime!
    updated_at: DateTime!
}

type CustomerChangeRequestCreatePayload
implements
    & Payload
{
    changeRequest: ChangeRequest!
    result: Boolean!
}

type CustomerChangeRequestMutation {
    """
    @require <authOrgReseller> Authenticated user must be a member of the current organization, and
    the organization must be a Reseller (or a root organization).

    @require <authMe(["requests-customer-change"])> User must be authenticated and have any of these permissions.
    """
    create(
        input: MessageInput!
    ): CustomerChangeRequestCreatePayload!
}

type CustomerMutation {
    """
    @require <authOrgReseller> Authenticated user must be a member of the current organization, and
    the organization must be a Reseller (or a root organization).

    @require <authMe> User must be authenticated.
    """
    changeRequest: CustomerChangeRequestMutation

    """
    @require <authOrgReseller> Authenticated user must be a member of the current organization, and
    the organization must be a Reseller (or a root organization).

    @require <authMe(["customers-sync"])> User must be authenticated and have any of these permissions.
    """
    sync: CustomerSyncPayload
}

type CustomerSyncPayload
implements
    & Payload
{
    result: Boolean!
    warranty: Boolean!
}

"""
Aggregated data for `type Customer`.
"""
type CustomersAggregated {
    assets: Int!
    count: Int!

    groups(
        groupBy: AggregatedGroupByClauseCompaniesQuery!
        limit: Int! = 25
        offset: Int! = 0
    ): [AggregatedGroupByTypeGroup!]!

    groupsAggregated(
        groupBy: AggregatedGroupByClauseCompaniesQuery!
    ): AggregatedGroupByTypeGroupsAggregated
}

"""
Aggregated data for `type Customer`.
"""
type CustomersSearchAggregated {
    count: Int!
}

type DeleteClientSettingsPayload {
    deleted: [String!]!
}

type DeleteContractNotePayload {
    deleted: Boolean!
}

type DeleteMeSearchPayload {
    deleted: Boolean!
}

type DeleteQuoteNotePayload {
    deleted: Boolean!
}

type DispatchApplicationServicePayload {
    result: Boolean!
}

type Distributor {
    created_at: DateTime!
    deleted_at: DateTime
    id: ID!
    name: String!
    updated_at: DateTime!
}

"""
Aggregated data for `type Distributor`.
"""
type DistributorsAggregated {
    count: Int!

    groups(
        groupBy: AggregatedGroupByClauseDistributorsQuery!
        limit: Int! = 25
        offset: Int! = 0
    ): [AggregatedGroupByTypeGroup!]!

    groupsAggregated(
        groupBy: AggregatedGroupByClauseDistributorsQuery!
    ): AggregatedGroupByTypeGroupsAggregated
}

type Document {
    assets_count: Int

    changeRequests(
        limit: Int! = 25
        offset: Int! = 0
        order: [SortByClauseChangeRequestsSort!]
        trashed: Trashed
        where: SearchByConditionChangeRequestsQuery
    ): [ChangeRequest!]!

    changeRequestsAggregated(
        trashed: Trashed
        where: SearchByConditionChangeRequestsQuery
    ): ChangeRequestsAggregated

    changed_at: DateTime

    contacts(
        limit: Int! = 25
        offset: Int! = 0
        order: [SortByClauseContactsSort!]
        trashed: Trashed
        where: SearchByConditionContactsQuery
    ): [Contact!]!

    contactsAggregated(
        trashed: Trashed
        where: SearchByConditionContactsQuery
    ): ContactsAggregated

    contacts_count: Int!
    created_at: DateTime!
    currency: Currency
    currency_id: ID
    customer: Customer
    customer_id: ID
    deleted_at: DateTime
    distributor: Distributor
    distributor_id: ID
    end: Date

    entries(
        limit: Int! = 25
        offset: Int! = 0
        order: [SortByClauseDocumentEntriesSort!]
        trashed: Trashed
        where: SearchByConditionDocumentEntriesQuery
    ): [DocumentEntry!]!

    entriesAggregated(
        trashed: Trashed
        where: SearchByConditionDocumentEntriesQuery
    ): DocumentEntriesAggregated

    entries_count: Int!
    id: ID!
    is_contract: Boolean!
    is_quote: Boolean!
    language: Language
    language_id: ID

    notes(
        limit: Int! = 25
        offset: Int! = 0
        order: [SortByClauseNotesSort!]
        trashed: Trashed
        where: SearchByConditionNotesQuery
    ): [Note!]!

    notesAggregated(
        trashed: Trashed
        where: SearchByConditionNotesQuery
    ): NotesAggregated

    number: String
    oem: Oem
    oemGroup: OemGroup
    oem_amp_id: String
    oem_group_id: ID
    oem_id: ID
    oem_said: String
    oem_sar_number: String
    price: Float
    reseller: Reseller
    reseller_id: ID
    start: Date
    statuses: [Status!]!
    statuses_count: Int!
    synced_at: DateTime!
    type: Type
    type_id: ID
    updated_at: DateTime!
}

"""
Aggregated data for `type DocumentEntry`.
"""
type DocumentEntriesAggregated {
    count: Int!

    groups(
        groupBy: AggregatedGroupByClauseDocumentEntriesQuery!
        limit: Int! = 25
        offset: Int! = 0
    ): [AggregatedGroupByTypeGroup!]!

    groupsAggregated(
        groupBy: AggregatedGroupByClauseDocumentEntriesQuery!
    ): AggregatedGroupByTypeGroupsAggregated
}

type DocumentEntry {
    asset: Asset
    assetType: Type
    asset_id: ID
    asset_type_id: ID
    created_at: DateTime!
    currency: Currency
    currency_id: ID
    deleted_at: DateTime
    document_id: ID!
    end: Date
    environment_id: String
    equipment_number: String
    id: ID!
    language: Language
    language_id: ID
    list_price: Float
    monthly_list_price: Float
    monthly_retail_price: Float
    oem_said: String
    oem_sar_number: String
    product: Product
    productGroup: ProductGroup
    productLine: ProductLine
    product_group_id: ID
    product_id: ID
    product_line_id: ID
    psp: Psp
    psp_id: ID
    removed_at: DateTime
    renewal: Float
    serial_number: String
    serviceGroup: ServiceGroup
    serviceLevel: ServiceLevel
    service_group_id: ID
    service_level_id: ID
    start: Date
    updated_at: DateTime!
}

"""
Aggregated data for `type Document`.
"""
type DocumentsAggregated {
    count: Int!

    groups(
        groupBy: AggregatedGroupByClauseDocumentsQuery!
        limit: Int! = 25
        offset: Int! = 0
    ): [AggregatedGroupByTypeGroup!]!

    groupsAggregated(
        groupBy: AggregatedGroupByClauseDocumentsQuery!
    ): AggregatedGroupByTypeGroupsAggregated

    prices: [DocumentsAggregatedPrice!]!
}

type DocumentsAggregatedPrice {
    amount: Float!
    count: Int!
    currency: Currency
    currency_id: ID
}

"""
Aggregated data for `type Document`.
"""
type DocumentsSearchAggregated {
    count: Int!
}

type File {
    id: ID!
    name: String!
    size: Int!
    url: Url!
}

type Invitation {
    email: Email!
    expired_at: DateTime!
    id: ID!
    organization_id: ID!
    role: Role
    role_id: ID!
    team: Team
    team_id: ID
    used_at: DateTime
}

type Kpi {
    assets_active: Int!
    assets_active_exposed: Int!
    assets_active_on_contract: Int!
    assets_active_on_warranty: Int!
    assets_active_percent: Float!
    assets_total: Int!
    contracts_active: Int!
    contracts_active_amount: Float!
    contracts_active_new: Int!
    contracts_expired: Int!
    contracts_expiring: Int!
    customers_active: Int!
    customers_active_new: Int!
    quotes_accepted: Int!
    quotes_active: Int!
    quotes_active_amount: Float!
    quotes_active_new: Int!
    quotes_awaiting: Int!
    quotes_expired: Int!
    quotes_expiring: Int!
    quotes_ordered: Int!
    quotes_received: Int!
    quotes_rejected: Int!
    quotes_requested: Int!
    service_revenue_total_amount: Float!
    service_revenue_total_amount_change: Float!
}

type Language {
    code: String!
    id: ID!
    name: String!
}

type Locale {
    name: String!
    translations: [LocaleTranslation!]!
}

type LocaleImportPayload
implements
    & Payload
{
    result: Boolean!
}

type LocaleMutation {
    """
    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authRoot> Authenticated user must be a root.
    """
    import(
        input: LocaleImportInput!
    ): LocaleImportPayload

    """
    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authRoot> Authenticated user must be a root.
    """
    reset: LocaleResetPayload

    """
    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authRoot> Authenticated user must be a root.
    """
    update(
        input: LocaleUpdateInput!
    ): LocaleUpdatePayload
}

type LocaleResetPayload
implements
    & Payload
{
    result: Boolean!
}

type LocaleTranslation {
    default: String
    key: String!
    value: String!
}

type LocaleUpdatePayload
implements
    & Payload
{
    result: Boolean!
}

type Location {
    city: City!
    city_id: ID!
    country: Country!
    country_id: ID!
    created_at: DateTime!
    deleted_at: DateTime
    id: ID!
    latitude: Float
    line_one: String!
    line_two: String!
    longitude: Float
    postcode: String!
    state: String!
    updated_at: DateTime!
}

"""
Aggregated data for `type Location`.
"""
type LocationsAggregated {
    count: Int!

    groups(
        groupBy: AggregatedGroupByClauseLocationsQuery!
        limit: Int! = 25
        offset: Int! = 0
    ): [AggregatedGroupByTypeGroup!]!

    groupsAggregated(
        groupBy: AggregatedGroupByClauseLocationsQuery!
    ): AggregatedGroupByTypeGroupsAggregated
}

type Map {
    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["assets-view"])> User must be authenticated and have any of these permissions.
    """
    assets: [MapPoint!]!

    """
    @require <authOrgReseller> Authenticated user must be a member of the current organization, and
    the organization must be a Reseller (or a root organization).

    @require <authMe(["customers-view"])> User must be authenticated and have any of these permissions.
    """
    customers: [MapPoint!]!
}

type MapBoundingBox {
    eastLongitude: Float!
    northLatitude: Float!
    southLatitude: Float!
    westLongitude: Float!
}

type MapPoint {
    boundingBox: MapBoundingBox!
    latitude: Float!
    locations_count: Int!
    locations_ids: [ID!]!
    longitude: Float!
    objects_count: Int!
    objects_ids: [ID!]!
}

type Me {
    academic_title: String
    company: String
    contact_email: Email
    email: Email!
    enabled: Boolean!
    family_name: String!
    given_name: String!
    homepage: String
    id: ID!
    job_title: String
    locale: String
    mobile_phone: PhoneNumber
    office_phone: PhoneNumber
    orgs: [Org!]!
    permissions: [String!]
    phone: PhoneNumber
    photo: Url
    previous_sign_in: DateTime
    root: Boolean!

    searches(
        limit: Int! = 25
        offset: Int! = 0
        order: [SortByClauseMeSearchSort!]
        where: SearchByConditionMeSearchQuery
    ): [MeSearch!]!

    searchesAggregated(
        where: SearchByConditionMeSearchQuery
    ): MeSearchesAggregated

    team: Team
    timezone: String
    title: String
}

type MeMutation {
    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe> User must be authenticated.
    """
    update(
        input: MeUpdateInput!
    ): MeUpdatePayload
}

type MeSearch {
    conditions: String!
    created_at: DateTime!
    deleted_at: DateTime
    id: ID!
    key: String!
    name: String!
    updated_at: DateTime!
}

"""
Aggregated data for `type MeSearch`.
"""
type MeSearchesAggregated {
    count: Int!

    groups(
        groupBy: AggregatedGroupByClauseMeSearchQuery!
        limit: Int! = 25
        offset: Int! = 0
    ): [AggregatedGroupByTypeGroup!]!

    groupsAggregated(
        groupBy: AggregatedGroupByClauseMeSearchQuery!
    ): AggregatedGroupByTypeGroupsAggregated
}

type MeUpdatePayload
implements
    & Payload
{
    me: Me!
    result: Boolean!
}

type MessageCreatePayload
implements
    & Payload
{
    result: Boolean!
}

type MessageMutation {
    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe> User must be authenticated.
    """
    create(
        input: MessageInput!
    ): MessageCreatePayload!
}

type Mutation {
    application: ApplicationMutation

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe> User must be authenticated.
    """
    asset(
        id: ID
    ): AssetMutation

    auth: AuthMutation

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe> User must be authenticated.
    """
    contract(
        id: ID
    ): ContractMutation

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["contracts-view"])> User must be authenticated and have any of these permissions.
    """
    createContractNote(
        input: CreateContractNoteInput!
    ): CreateContractNotePayload

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe> User must be authenticated.
    """
    createMeSearch(
        input: CreateMeSearchInput!
    ): CreateMeSearchPayload

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["quotes-view"])> User must be authenticated and have any of these permissions.
    """
    createQuoteNote(
        input: CreateQuoteNoteInput!
    ): CreateQuoteNotePayload

    """
    @require <authOrgReseller> Authenticated user must be a member of the current organization, and
    the organization must be a Reseller (or a root organization).

    @require <authMe> User must be authenticated.
    """
    customer(
        id: ID
    ): CustomerMutation

    """
    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authRoot> Authenticated user must be a root.
    """
    deleteClientSettings(
        input: DeleteClientSettingsInput!
    ): DeleteClientSettingsPayload

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["contracts-view","org-administer"])> User must be authenticated and have any of these permissions.
    """
    deleteContractNote(
        input: DeleteContractNoteInput!
    ): DeleteContractNotePayload

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe> User must be authenticated.
    """
    deleteMeSearch(
        input: DeleteMeSearchInput!
    ): DeleteMeSearchPayload

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["org-administer","quotes-view"])> User must be authenticated and have any of these permissions.
    """
    deleteQuoteNote(
        input: DeleteQuoteNoteInput!
    ): DeleteQuoteNotePayload

    """
    Dispatch/Run application service.

    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authRoot> Authenticated user must be a root.
    """
    dispatchApplicationService(
        input: DispatchApplicationServiceInput!
    ): DispatchApplicationServicePayload

    """
    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authRoot> Authenticated user must be a root.
    """
    locale(
        name: String!
    ): LocaleMutation

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe> User must be authenticated.
    """
    me: MeMutation

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe> User must be authenticated.
    """
    message: MessageMutation

    """
    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authMe(["administer"])> User must be authenticated and have any of these permissions.
    """
    oem: OemMutation

    """
    @require <authMe> User must be authenticated.
    """
    org: OrgMutation

    """
    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authMe(["administer"])> User must be authenticated and have any of these permissions.
    """
    organization(
        id: ID
    ): OrganizationMutation

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe> User must be authenticated.
    """
    quote(
        id: ID
    ): QuoteMutation

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe> User must be authenticated.
    """
    quoteRequest: QuoteRequestMutation

    """
    Force delete all custom settings, may be useful to restore the corrupted file.

    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authRoot> Authenticated user must be a root.
    """
    recoverApplicationSettings: recoverApplicationSettingsPayload

    """
    Force delete all custom settings, may be useful to restore the corrupted file.

    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authRoot> Authenticated user must be a root.
    """
    recoverClientSettings: RecoverClientSettingsPayload

    """
    Reset application service progress.

    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authRoot> Authenticated user must be a root.
    """
    resetApplicationService(
        input: ResetApplicationServiceInput!
    ): ResetApplicationServicePayload

    """
    Send reset password link to the user.

    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["org-administer"])> User must be authenticated and have any of these permissions.
    """
    resetOrgUserPassword(
        input: ResetOrgUserPasswordInput!
    ): ResetOrgUserPasswordPayload

    """
    Reset password.

    @require <authGuest> Current visitor must be a guest.
    """
    resetPassword(
        input: ResetPasswordInput
    ): ResetPasswordPayload

    """
    Send reset password link if local user with given email exists.

    @require <authGuest> Current visitor must be a guest.
    """
    sendResetPasswordLink(
        input: SendResetPasswordLinkInput
    ): SendResetPasswordLinkPayload

    setApplicationLocale(
        input: SetApplicationLocaleInput!
    ): SetApplicationLocalePayload

    """
    Stop application service.

    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authRoot> Authenticated user must be a root.
    """
    stopApplicationService(
        input: StopApplicationServiceInput!
    ): StopApplicationServicePayload

    """
    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authRoot> Authenticated user must be a root.
    """
    updateApplicationSettings(
        input: [UpdateApplicationSettingsInput!]!
    ): UpdateApplicationSettingsPayload

    """
    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authRoot> Authenticated user must be a root.
    """
    updateClientSettings(
        input: [UpdateClientSettingsInput!]!
    ): UpdateClientSettingsPayload

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["contracts-view"])> User must be authenticated and have any of these permissions.
    """
    updateContractNote(
        input: UpdateContractNoteInput!
    ): UpdateContractNotePayload

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe> User must be authenticated.
    """
    updateMeEmail(
        input: UpdateMeEmailInput!
    ): UpdateMeEmailPayload

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe> User must be authenticated.
    """
    updateMePassword(
        input: UpdateMePasswordInput!
    ): UpdateMePasswordPayload

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["quotes-view"])> User must be authenticated and have any of these permissions.
    """
    updateQuoteNote(
        input: UpdateQuoteNoteInput!
    ): UpdateQuoteNotePayload

    """
    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authMe(["administer"])> User must be authenticated and have any of these permissions.
    """
    user(
        id: ID
    ): UserMutation
}

type Note {
    changeRequest: ChangeRequest
    change_request_id: ID
    created_at: DateTime!
    deleted_at: DateTime
    files: [File!]!
    id: ID!

    """
    If `null` that this is a system note and it cannot be updated/deleted.
    """
    note: HtmlString

    pinned: Boolean!
    quoteRequest: QuoteRequest
    quote_request_id: ID
    updated_at: DateTime!
    user: User
    user_id: ID!
}

"""
Aggregated data for `type Note`.
"""
type NotesAggregated {
    count: Int!

    groups(
        groupBy: AggregatedGroupByClauseNotesQuery!
        limit: Int! = 25
        offset: Int! = 0
    ): [AggregatedGroupByTypeGroup!]!

    groupsAggregated(
        groupBy: AggregatedGroupByClauseNotesQuery!
    ): AggregatedGroupByTypeGroupsAggregated
}

type Oem {
    id: ID!
    key: String!
    name: String!
}

type OemGroup {
    created_at: DateTime!
    deleted_at: DateTime
    id: ID!
    key: String!
    name: String!
    updated_at: DateTime!
}

"""
Aggregated data for `type OemGroup`.
"""
type OemGroupsAggregated {
    count: Int!

    groups(
        groupBy: AggregatedGroupByClauseOemGroupsQuery!
        limit: Int! = 25
        offset: Int! = 0
    ): [AggregatedGroupByTypeGroup!]!

    groupsAggregated(
        groupBy: AggregatedGroupByClauseOemGroupsQuery!
    ): AggregatedGroupByTypeGroupsAggregated
}

type OemHpeImportPayload
implements
    & Payload
{
    result: Boolean!
}

type OemHpeMutation {
    """
    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authMe(["administer"])> User must be authenticated and have any of these permissions.
    """
    import(
        input: OemHpeImportInput!
    ): OemHpeImportPayload
}

type OemMutation {
    """
    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authMe(["administer"])> User must be authenticated and have any of these permissions.
    """
    hpe: OemHpeMutation
}

type Org {
    analytics_code: String
    branding: OrganizationBranding!
    currency: Currency
    currency_id: ID
    email: Email
    headquarter: CompanyLocation
    id: ID!
    kpi: Kpi
    locale: String
    name: String!

    """
    @require <authMe(["org-administer"])> User must be authenticated and have any of these permissions.
    """
    organization: Organization!

    timezone: String
    type: OrganizationType!
    website_url: Url
}

type OrgChangeRequestCreatePayload
implements
    & Payload
{
    changeRequest: ChangeRequest!
    result: Boolean!
}

type OrgChangeRequestMutation {
    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["org-administer"])> User must be authenticated and have any of these permissions.
    """
    create(
        input: MessageInput!
    ): OrgChangeRequestCreatePayload!
}

type OrgMutation {
    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe> User must be authenticated.
    """
    changeRequest: OrgChangeRequestMutation

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["org-administer"])> User must be authenticated and have any of these permissions.
    """
    role(
        id: ID
    ): OrgRoleMutation

    """
    @require <authMe> User must be authenticated.
    """
    set(
        input: OrgSetInput!
    ): OrgSetPayload

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["org-administer"])> User must be authenticated and have any of these permissions.
    """
    update(
        input: OrgUpdateInput!
    ): OrgUpdatePayload

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["org-administer"])> User must be authenticated and have any of these permissions.
    """
    user(
        id: ID
    ): OrgUserMutation
}

type OrgRoleCreatePayload
implements
    & Payload
{
    result: Boolean!
    role: Role!
}

type OrgRoleDeletePayload
implements
    & Payload
{
    result: Boolean!
}

type OrgRoleMutation {
    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["org-administer"])> User must be authenticated and have any of these permissions.
    """
    create(
        input: OrgRoleCreateInput!
    ): OrgRoleCreatePayload

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["org-administer"])> User must be authenticated and have any of these permissions.
    """
    delete: OrgRoleDeletePayload

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["org-administer"])> User must be authenticated and have any of these permissions.
    """
    update(
        input: OrgRoleUpdateInput!
    ): OrgRoleUpdatePayload
}

type OrgRoleUpdatePayload
implements
    & Payload
{
    result: Boolean!
    role: Role!
}

type OrgSetPayload
implements
    & Payload
{
    me: Me
    org: Org
    result: Boolean!
}

type OrgUpdatePayload
implements
    & Payload
{
    org: Org!
    result: Boolean!
}

type OrgUserInvitePayload
implements
    & Payload
{
    result: Boolean!
}

type OrgUserMutation {
    """
    Adds user into Organization and send invite to join.

    To complete Sign Up the `mutation { auth { signUpByInvite } }` should be used.

    Please note that mutation will return `false` when:
    - User is already a member of the organization
    - User is disabled/banned
    - User is Root

    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["org-administer"])> User must be authenticated and have any of these permissions.
    """
    invite(
        input: OrgUserInviteInput!
    ): OrgUserInvitePayload

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["org-administer"])> User must be authenticated and have any of these permissions.
    """
    update(
        input: OrgUserUpdateInput!
    ): OrgUserUpdatePayload
}

type OrgUserUpdatePayload
implements
    & Payload
{
    result: Boolean!
    user: User!
}

type Organization {
    analytics_code: String

    """
    @require <authMe(["administer","org-administer"])> User must be authenticated and have any of these permissions.
    """
    audits(
        limit: Int! = 25
        offset: Int! = 0
        order: [SortByClauseAuditsSort!]
        where: SearchByConditionAuditsQuery
    ): [Audit!]!

    """
    @require <authMe(["administer","org-administer"])> User must be authenticated and have any of these permissions.
    """
    auditsAggregated(
        where: SearchByConditionAuditsQuery
    ): AuditsAggregated

    branding: OrganizationBranding!

    """
    @require <authMe(["administer","org-administer"])> User must be authenticated and have any of these permissions.
    """
    changeRequests(
        limit: Int! = 25
        offset: Int! = 0
        order: [SortByClauseChangeRequestsSort!]
        trashed: Trashed
        where: SearchByConditionChangeRequestsQuery
    ): [ChangeRequest!]!

    """
    @require <authMe(["administer","org-administer"])> User must be authenticated and have any of these permissions.
    """
    changeRequestsAggregated(
        trashed: Trashed
        where: SearchByConditionChangeRequestsQuery
    ): ChangeRequestsAggregated

    """
    @require <authMe(["administer"])> User must be authenticated and have any of these permissions.
    """
    company: Company

    created_at: DateTime!
    currency: Currency
    currency_id: ID
    deleted_at: DateTime
    email: Email
    id: ID!

    """
    @require <authMe(["administer"])> User must be authenticated and have any of these permissions.
    """
    keycloak_name: String

    """
    @require <authMe(["administer"])> User must be authenticated and have any of these permissions.
    """
    keycloak_scope: String

    locale: String
    name: String!

    """
    @require <authMe(["administer","org-administer"])> User must be authenticated and have any of these permissions.
    """
    roles: [Role!]!

    root: Boolean!
    timezone: String
    type: OrganizationType!
    updated_at: DateTime!

    """
    @require <authMe(["administer","org-administer"])> User must be authenticated and have any of these permissions.
    """
    users(
        limit: Int! = 25
        offset: Int! = 0
        order: [SortByClauseUsersSort!]
        trashed: Trashed
        where: SearchByConditionUsersQuery
    ): [User!]!

    """
    @require <authMe(["administer","org-administer"])> User must be authenticated and have any of these permissions.
    """
    usersAggregated(
        trashed: Trashed
        where: SearchByConditionUsersQuery
    ): UsersAggregated

    website_url: Url
}

type OrganizationBranding {
    dark_theme: Boolean
    dashboard_image_url: Url
    default_favicon_url: Url
    default_logo_url: Url
    default_main_color: Color
    default_secondary_color: Color
    favicon_url: Url
    logo_url: Url
    main_color: Color
    secondary_color: Color
    welcome_heading: [TranslatedString!]
    welcome_image_url: Url
    welcome_underline: [TranslatedString!]
}

type OrganizationChangeRequestCreatePayload
implements
    & Payload
{
    changeRequest: ChangeRequest!
    result: Boolean!
}

type OrganizationChangeRequestMutation {
    """
    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authMe(["administer"])> User must be authenticated and have any of these permissions.
    """
    create(
        input: MessageInput!
    ): OrganizationChangeRequestCreatePayload!
}

type OrganizationMutation {
    """
    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authMe(["administer"])> User must be authenticated and have any of these permissions.
    """
    changeRequest: OrganizationChangeRequestMutation

    """
    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authMe(["administer"])> User must be authenticated and have any of these permissions.
    """
    user(
        id: ID
    ): OrganizationUserMutation
}

type OrganizationUserInvitePayload
implements
    & Payload
{
    result: Boolean!
}

type OrganizationUserMutation {
    """
    Adds user into Organization and send invite to join.

    To complete Sign Up the `mutation { auth { signUpByInvite } }` should be used.

    Please note that mutation will return `false` when:
    - User is already a member of the organization
    - User is disabled/banned
    - User is Root

    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authMe(["administer"])> User must be authenticated and have any of these permissions.
    """
    invite(
        input: OrganizationUserInviteInput!
    ): OrganizationUserInvitePayload
}

"""
Aggregated data for `type Organization`.
"""
type OrganizationsAggregated {
    count: Int!

    groups(
        groupBy: AggregatedGroupByClauseOrganizationsQuery!
        limit: Int! = 25
        offset: Int! = 0
    ): [AggregatedGroupByTypeGroup!]!

    groupsAggregated(
        groupBy: AggregatedGroupByClauseOrganizationsQuery!
    ): AggregatedGroupByTypeGroupsAggregated
}

type Permission {
    description: String!
    id: ID!
    key: String!
    name: String!
}

type Product {
    eol: Date
    eos: Date
    id: ID!
    name: String!
    oem: Oem!
    oem_id: ID!
    sku: String!
}

type ProductGroup {
    id: ID!
    key: String!
    name: String!
}

type ProductLine {
    id: ID!
    key: String!
    name: String!
}

"""
Aggregated data for `type Product`.
"""
type ProductsAggregated {
    count: Int!

    groups(
        groupBy: AggregatedGroupByClauseProductsQuery!
        limit: Int! = 25
        offset: Int! = 0
    ): [AggregatedGroupByTypeGroup!]!

    groupsAggregated(
        groupBy: AggregatedGroupByClauseProductsQuery!
    ): AggregatedGroupByTypeGroupsAggregated
}

type Psp {
    id: ID!
    key: String!
    name: String!
}

type Query {
    """
    Application information.
    """
    application: Application!

    """
    Asset.

    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["assets-view"])> User must be authenticated and have any of these permissions.
    """
    asset(
        id: ID!
    ): Asset

    """
    List of all possible asset coverages.

    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["assets-view"])> User must be authenticated and have any of these permissions.
    """
    assetCoverages(
        where: SearchByConditionAssetCoveragesQuery
    ): [Coverage!]!

    """
    List of all possible asset statuses.

    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["assets-view"])> User must be authenticated and have any of these permissions.
    """
    assetStatuses(
        where: SearchByConditionAssetStatusesQuery
    ): [Status!]!

    """
    List of all possible asset types.

    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["assets-view"])> User must be authenticated and have any of these permissions.
    """
    assetTypes(
        where: SearchByConditionAssetTypesQuery
    ): [Type!]!

    """
    List of all assets

    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["assets-view"])> User must be authenticated and have any of these permissions.
    """
    assets(
        limit: Int! = 25
        offset: Int! = 0
        order: [SortByClauseAssetsSort!]
        trashed: Trashed
        where: SearchByConditionAssetsQuery
    ): [Asset!]!

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["assets-view"])> User must be authenticated and have any of these permissions.
    """
    assetsAggregated(
        trashed: Trashed
        where: SearchByConditionAssetsQuery
    ): AssetsAggregated

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["assets-view"])> User must be authenticated and have any of these permissions.
    """
    assetsSearch(
        limit: Int! = 25
        offset: Int! = 0
        order: [SortByClauseAssetsSearchSort!]
        search: SearchString!
    ): [Asset!]!

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["assets-view"])> User must be authenticated and have any of these permissions.
    """
    assetsSearchAggregated(
        search: SearchString!
    ): AssetsSearchAggregated

    """
    List of all organizations audits.

    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authMe(["administer"])> User must be authenticated and have any of these permissions.
    """
    audits(
        limit: Int! = 25
        offset: Int! = 0
        order: [SortByClauseAuditsSort!]
        where: SearchByConditionAuditsQuery
    ): [Audit!]!

    """
    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authMe(["administer"])> User must be authenticated and have any of these permissions.
    """
    auditsAggregated(
        where: SearchByConditionAuditsQuery
    ): AuditsAggregated

    """
    Auth data (invitations, etc).
    """
    auth: Auth

    """
    List of all cities.

    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe> User must be authenticated.
    """
    cities(
        where: SearchByConditionCitiesQuery
    ): [City!]!

    """
    Client data (settings, translations, etc).
    """
    client: Client

    """
    List of all possible contact types.

    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe> User must be authenticated.
    """
    contactTypes(
        where: SearchByConditionContactTypesQuery
    ): [Type!]!

    """
    Contract.

    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["contracts-view"])> User must be authenticated and have any of these permissions.
    """
    contract(
        id: ID!
    ): Document

    """
    List of all possible contract statuses.

    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["contracts-view"])> User must be authenticated and have any of these permissions.
    """
    contractStatuses(
        where: SearchByConditionContractStatusesQuery
    ): [Status!]!

    """
    List of all possible contract types.

    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["contracts-view"])> User must be authenticated and have any of these permissions.
    """
    contractTypes(
        where: SearchByConditionContractTypesQuery
    ): [Type!]!

    """
    List of all contracts.

    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["contracts-view"])> User must be authenticated and have any of these permissions.
    """
    contracts(
        limit: Int! = 25
        offset: Int! = 0
        order: [SortByClauseDocumentsSort!]
        trashed: Trashed
        where: SearchByConditionDocumentsQuery
    ): [Document!]!

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["contracts-view"])> User must be authenticated and have any of these permissions.
    """
    contractsAggregated(
        trashed: Trashed
        where: SearchByConditionDocumentsQuery
    ): DocumentsAggregated

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["contracts-view"])> User must be authenticated and have any of these permissions.
    """
    contractsSearch(
        limit: Int! = 25
        offset: Int! = 0
        order: [SortByClauseDocumentsSearchSort!]
        search: SearchString!
    ): [Document!]!

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["contracts-view"])> User must be authenticated and have any of these permissions.
    """
    contractsSearchAggregated(
        search: SearchString!
    ): DocumentsSearchAggregated

    """
    List of all countries.

    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe> User must be authenticated.
    """
    countries(
        where: SearchByConditionCountriesQuery
    ): [Country!]!

    """
    List of all currencies.

    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe> User must be authenticated.
    """
    currencies(
        where: SearchByConditionCurrenciesQuery
    ): [Currency!]!

    """
    Customer.

    @require <authOrgReseller> Authenticated user must be a member of the current organization, and
    the organization must be a Reseller (or a root organization).

    @require <authMe(["customers-view"])> User must be authenticated and have any of these permissions.
    """
    customer(
        id: ID!
    ): Customer

    """
    List of all possible customer location types.

    @require <authOrgReseller> Authenticated user must be a member of the current organization, and
    the organization must be a Reseller (or a root organization).

    @require <authMe(["customers-view"])> User must be authenticated and have any of these permissions.
    """
    customerLocationTypes(
        where: SearchByConditionCustomerLocationTypesQuery
    ): [Type!]!

    """
    List of all possible customer statuses.

    @require <authOrgReseller> Authenticated user must be a member of the current organization, and
    the organization must be a Reseller (or a root organization).

    @require <authMe(["customers-view"])> User must be authenticated and have any of these permissions.
    """
    customerStatuses(
        where: SearchByConditionCustomerStatusesQuery
    ): [Status!]!

    """
    List of Customers.

    @require <authOrgReseller> Authenticated user must be a member of the current organization, and
    the organization must be a Reseller (or a root organization).

    @require <authMe(["customers-view"])> User must be authenticated and have any of these permissions.
    """
    customers(
        limit: Int! = 25
        offset: Int! = 0
        order: [SortByClauseCompaniesSort!]
        trashed: Trashed
        where: SearchByConditionCompaniesQuery
    ): [Customer!]!

    """
    @require <authOrgReseller> Authenticated user must be a member of the current organization, and
    the organization must be a Reseller (or a root organization).

    @require <authMe(["customers-view"])> User must be authenticated and have any of these permissions.
    """
    customersAggregated(
        trashed: Trashed
        where: SearchByConditionCompaniesQuery
    ): CustomersAggregated

    """
    @require <authOrgReseller> Authenticated user must be a member of the current organization, and
    the organization must be a Reseller (or a root organization).

    @require <authMe(["customers-view"])> User must be authenticated and have any of these permissions.
    """
    customersSearch(
        limit: Int! = 25
        offset: Int! = 0
        order: [SortByClauseCustomersSearchSort!]
        search: SearchString!
    ): [Customer!]!

    """
    @require <authOrgReseller> Authenticated user must be a member of the current organization, and
    the organization must be a Reseller (or a root organization).

    @require <authMe(["customers-view"])> User must be authenticated and have any of these permissions.
    """
    customersSearchAggregated(
        search: SearchString!
    ): CustomersSearchAggregated

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["assets-view","contracts-view","quotes-view"])> User must be authenticated and have any of these permissions.
    """
    distributors(
        limit: Int! = 25
        offset: Int! = 0
        order: [SortByClauseDistributorsSort!]
        trashed: Trashed
        where: SearchByConditionDistributorsQuery
    ): [Distributor!]!

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["assets-view","contracts-view","quotes-view"])> User must be authenticated and have any of these permissions.
    """
    distributorsAggregated(
        trashed: Trashed
        where: SearchByConditionDistributorsQuery
    ): DistributorsAggregated

    """
    List of all languages.

    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe> User must be authenticated.
    """
    languages(
        where: SearchByConditionLanguagesQuery
    ): [Language!]!

    """
    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authRoot> Authenticated user must be a root.
    """
    locale(
        name: String!
    ): Locale!

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe> User must be authenticated.
    """
    locations(
        limit: Int! = 25
        offset: Int! = 0
        order: [SortByClauseLocationsSort!]
        trashed: Trashed
        where: SearchByConditionLocationsQuery
    ): [Location!]!

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe> User must be authenticated.
    """
    locationsAggregated(
        trashed: Trashed
        where: SearchByConditionLocationsQuery
    ): LocationsAggregated

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe> User must be authenticated.
    """
    map(
        """
        Assets filters.
        """
        assets: SearchByConditionAssetsQuery

        """
        Only points inside these boundaries will be returned.
        """
        boundaries: [Geohash!]

        """
        Zoom level (1-12).
        """
        level: Int!

        """
        Additional filters for the points.
        """
        locations: SearchByConditionMapQuery
    ): Map!

    """
    Authenticated user or `null` otherwise.
    """
    me: Me

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe> User must be authenticated.
    """
    oemGroups(
        limit: Int! = 25
        offset: Int! = 0
        order: [SortByClauseOemGroupsSort!]
        trashed: Trashed
        where: SearchByConditionOemGroupsQuery
    ): [OemGroup!]!

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe> User must be authenticated.
    """
    oemGroupsAggregated(
        trashed: Trashed
        where: SearchByConditionOemGroupsQuery
    ): OemGroupsAggregated

    """
    List of all OEMs

    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe> User must be authenticated.
    """
    oems(
        where: SearchByConditionOemsQuery
    ): [Oem!]!

    """
    Current organization.
    """
    org: Org

    """
    Organization.

    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authMe(["administer"])> User must be authenticated and have any of these permissions.
    """
    organization(
        id: ID!
    ): Organization

    """
    List of all organizations.

    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authMe(["administer"])> User must be authenticated and have any of these permissions.
    """
    organizations(
        limit: Int! = 25
        offset: Int! = 0
        order: [SortByClauseOrganizationsSort!]
        trashed: Trashed
        where: SearchByConditionOrganizationsQuery
    ): [Organization!]!

    """
    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authMe(["administer"])> User must be authenticated and have any of these permissions.
    """
    organizationsAggregated(
        trashed: Trashed
        where: SearchByConditionOrganizationsQuery
    ): OrganizationsAggregated

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["administer","org-administer"])> User must be authenticated and have any of these permissions.
    """
    permissions: [Permission!]!

    """
    List of all products.

    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe> User must be authenticated.
    """
    products(
        limit: Int! = 25
        offset: Int! = 0
        order: [SortByClauseProductsSort!]
        trashed: Trashed
        where: SearchByConditionProductsQuery
    ): [Product!]!

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe> User must be authenticated.
    """
    productsAggregated(
        trashed: Trashed
        where: SearchByConditionProductsQuery
    ): ProductsAggregated

    """
    Quote.

    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["quotes-view"])> User must be authenticated and have any of these permissions.
    """
    quote(
        id: ID!
    ): Document

    """
    List of all possible quote request durations.

    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe> User must be authenticated.
    """
    quoteRequestDurations: [QuoteRequestDuration!]!

    """
    List of all possible quote statuses.

    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["quotes-view"])> User must be authenticated and have any of these permissions.
    """
    quoteStatuses(
        where: SearchByConditionQuoteStatusesQuery
    ): [Status!]!

    """
    List of all possible quote types.

    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["quotes-view"])> User must be authenticated and have any of these permissions.
    """
    quoteTypes(
        where: SearchByConditionQuoteTypesQuery
    ): [Type!]!

    """
    List of all quotes.

    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["quotes-view"])> User must be authenticated and have any of these permissions.
    """
    quotes(
        limit: Int! = 25
        offset: Int! = 0
        order: [SortByClauseDocumentsSort!]
        trashed: Trashed
        where: SearchByConditionDocumentsQuery
    ): [Document!]!

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["quotes-view"])> User must be authenticated and have any of these permissions.
    """
    quotesAggregated(
        trashed: Trashed
        where: SearchByConditionDocumentsQuery
    ): DocumentsAggregated

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["quotes-view"])> User must be authenticated and have any of these permissions.
    """
    quotesSearch(
        limit: Int! = 25
        offset: Int! = 0
        order: [SortByClauseDocumentsSearchSort!]
        search: SearchString!
    ): [Document!]!

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["quotes-view"])> User must be authenticated and have any of these permissions.
    """
    quotesSearchAggregated(
        search: SearchString!
    ): DocumentsSearchAggregated

    """
    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authMe> User must be authenticated.
    """
    resellers(
        limit: Int! = 25
        offset: Int! = 0
        order: [SortByClauseCompaniesSort!]
        trashed: Trashed
        where: SearchByConditionCompaniesQuery
    ): [Reseller!]!

    """
    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authMe> User must be authenticated.
    """
    resellersAggregated(
        trashed: Trashed
        where: SearchByConditionCompaniesQuery
    ): ResellersAggregated

    """
    List of all shared roles.

    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authMe(["administer"])> User must be authenticated and have any of these permissions.
    """
    roles: [Role!]!

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["assets-view","contracts-view","customers-view","quotes-view"])> User must be authenticated and have any of these permissions.
    """
    search(
        limit: Int! = 25
        offset: Int! = 0
        search: SearchString!
    ): [SearchResult!]!

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["assets-view","contracts-view","customers-view","quotes-view"])> User must be authenticated and have any of these permissions.
    """
    searchAggregated(
        search: SearchString!
    ): SearchResultsSearchAggregated

    """
    List of all Service Groups.

    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe> User must be authenticated.
    """
    serviceGroups(
        where: SearchByConditionServiceGroupsQuery
    ): [ServiceGroup!]!

    """
    List of all Service Levels.

    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe> User must be authenticated.
    """
    serviceLevels(
        where: SearchByConditionServiceLevelsQuery
    ): [ServiceLevel!]!

    """
    List of all possible tags.

    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe> User must be authenticated.
    """
    tags(
        order: [SortByClauseTag!]
        where: SearchByConditionTagsQuery
    ): [Tag!]!

    """
    List of all possible teams.

    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["administer","org-administer"])> User must be authenticated and have any of these permissions.
    """
    teams: [Team!]!

    """
    List of all Timezones

    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe> User must be authenticated.
    """
    timezones: [String!]!

    """
    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authMe(["administer"])> User must be authenticated and have any of these permissions.
    """
    user(
        id: ID!
    ): User

    """
    List of all users.

    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authMe(["administer"])> User must be authenticated and have any of these permissions.
    """
    users(
        limit: Int! = 25
        offset: Int! = 0
        order: [SortByClauseUsersSort!]
        trashed: Trashed
        where: SearchByConditionUsersQuery
    ): [User!]!

    """
    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authMe(["administer"])> User must be authenticated and have any of these permissions.
    """
    usersAggregated(
        trashed: Trashed
        where: SearchByConditionUsersQuery
    ): UsersAggregated
}

type QuoteChangeRequestCreatePayload
implements
    & Payload
{
    changeRequest: ChangeRequest!
    result: Boolean!
}

type QuoteChangeRequestMutation {
    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["requests-quote-change"])> User must be authenticated and have any of these permissions.
    """
    create(
        input: MessageInput!
    ): QuoteChangeRequestCreatePayload!
}

type QuoteMutation {
    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe> User must be authenticated.
    """
    changeRequest: QuoteChangeRequestMutation

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["quotes-sync"])> User must be authenticated and have any of these permissions.
    """
    sync: QuoteSyncPayload
}

type QuoteRequest {
    assets: [QuoteRequestAsset!]!
    contact: Contact!
    customer: Customer
    customer_custom: String
    customer_id: ID
    documents: [QuoteRequestDocument!]!
    files: [File!]!
    id: ID!
    message: String
    oem: Oem
    oem_custom: String
    oem_id: ID
    type: Type
    type_custom: String
    type_id: ID
    user: User
    user_id: ID!
}

type QuoteRequestAsset {
    asset: Asset
    asset_id: ID!
    duration: QuoteRequestDuration!
    duration_id: ID!
    id: ID!
    serviceLevel: ServiceLevel
    service_level_custom: String
    service_level_id: ID
}

type QuoteRequestCreatePayload
implements
    & Payload
{
    quoteRequest: QuoteRequest
    result: Boolean!
}

type QuoteRequestDocument {
    document: Document
    document_id: ID!
    duration: QuoteRequestDuration!
    duration_id: ID!
    id: ID!
}

type QuoteRequestDuration {
    id: ID!
    key: String!
    name: String!
}

type QuoteRequestMutation {
    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["requests-quote-add"])> User must be authenticated and have any of these permissions.
    """
    create(
        input: QuoteRequestCreateInput!
    ): QuoteRequestCreatePayload!
}

type QuoteSyncPayload {
    assets: Boolean!
    result: Boolean!
}

type RecoverClientSettingsPayload {
    result: Boolean!
}

type Reseller
implements
    & Company
{
    """
    @require <authMe(["assets-view"])> User must be authenticated and have any of these permissions.
    """
    assets(
        limit: Int! = 25
        offset: Int! = 0
        order: [SortByClauseAssetsSort!]
        trashed: Trashed
        where: SearchByConditionAssetsQuery
    ): [Asset!]!

    """
    @require <authMe(["assets-view"])> User must be authenticated and have any of these permissions.
    """
    assetsAggregated(
        trashed: Trashed
        where: SearchByConditionAssetsQuery
    ): AssetsAggregated

    assets_count: Int!
    changed_at: DateTime

    contacts(
        limit: Int! = 25
        offset: Int! = 0
        order: [SortByClauseContactsSort!]
        trashed: Trashed
        where: SearchByConditionContactsQuery
    ): [Contact!]!

    contactsAggregated(
        trashed: Trashed
        where: SearchByConditionContactsQuery
    ): ContactsAggregated

    contacts_count: Int!

    """
    @require <authMe(["contracts-view"])> User must be authenticated and have any of these permissions.
    """
    contracts(
        limit: Int! = 25
        offset: Int! = 0
        order: [SortByClauseDocumentsSort!]
        trashed: Trashed
        where: SearchByConditionDocumentsQuery
    ): [Document!]!

    """
    @require <authMe(["contracts-view"])> User must be authenticated and have any of these permissions.
    """
    contractsAggregated(
        trashed: Trashed
        where: SearchByConditionDocumentsQuery
    ): DocumentsAggregated

    created_at: DateTime!
    customers_count: Int!
    deleted_at: DateTime
    headquarter: CompanyLocation
    id: ID!
    kpi: Kpi

    locations(
        limit: Int! = 25
        offset: Int! = 0
        order: [SortByClauseCompanyLocationsSort!]
        where: SearchByConditionCompanyLocationsQuery
    ): [CompanyLocation!]!

    locationsAggregated(
        where: SearchByConditionCompanyLocationsQuery
    ): CompanyLocationsAggregated

    locations_count: Int!
    name: String!

    """
    @require <authMe(["quotes-view"])> User must be authenticated and have any of these permissions.
    """
    quotes(
        limit: Int! = 25
        offset: Int! = 0
        order: [SortByClauseDocumentsSort!]
        trashed: Trashed
        where: SearchByConditionDocumentsQuery
    ): [Document!]!

    """
    @require <authMe(["quotes-view"])> User must be authenticated and have any of these permissions.
    """
    quotesAggregated(
        trashed: Trashed
        where: SearchByConditionDocumentsQuery
    ): DocumentsAggregated

    statuses: [Status!]!
    synced_at: DateTime!
    updated_at: DateTime!
}

"""
Aggregated data for `type Reseller`.
"""
type ResellersAggregated {
    count: Int!

    groups(
        groupBy: AggregatedGroupByClauseCompaniesQuery!
        limit: Int! = 25
        offset: Int! = 0
    ): [AggregatedGroupByTypeGroup!]!

    groupsAggregated(
        groupBy: AggregatedGroupByClauseCompaniesQuery!
    ): AggregatedGroupByTypeGroupsAggregated
}

type ResetApplicationServicePayload {
    result: Boolean!
}

type ResetOrgUserPasswordPayload {
    result: Boolean!
}

type ResetPasswordPayload {
    result: Boolean!
}

type Role {
    id: ID!
    name: String!
    permissions: [Permission!]!
}

"""
Aggregated data for `union SearchResult`.
"""
type SearchResultsSearchAggregated {
    count: Int!
}

type SendResetPasswordLinkPayload {
    result: Boolean!
}

type ServiceGroup {
    id: ID!
    name: String!
    oem: Oem!
    oem_id: ID!
    sku: String!
}

type ServiceLevel {
    description: String!
    id: ID!
    name: String!
    oem: Oem!
    oem_id: ID!
    serviceGroup: ServiceGroup!
    service_group_id: ID!
    sku: String!
}

type SetApplicationLocalePayload {
    result: Boolean!
}

type Status {
    id: ID!
    key: String!
    name: String!
}

type StopApplicationServicePayload {
    result: Boolean!
}

type StringValue {
    value: String!
}

type Tag {
    id: ID!
    name: String!
}

type Team {
    id: ID!
    name: String!
}

type TranslatedString {
    locale: String!
    text: String!
}

type Type {
    id: ID!
    key: String!
    name: String!
}

type UpdateApplicationSettingsPayload {
    updated: [ApplicationSetting!]!
}

type UpdateClientSettingsPayload {
    updated: [ClientSetting!]!
}

type UpdateContractNotePayload {
    updated: Note!
}

type UpdateMeEmailPayload {
    result: Boolean!
}

type UpdateMePasswordPayload {
    result: Boolean!
}

type UpdateQuoteNotePayload {
    updated: Note!
}

type User {
    academic_title: String
    company: String
    contact_email: Email
    created_at: DateTime!
    deleted_at: DateTime
    email: Email!
    email_verified: Boolean!
    enabled: Boolean!
    family_name: String
    given_name: String
    id: ID!

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["administer","org-administer"])> User must be authenticated and have any of these permissions.
    """
    invitations: [Invitation!]!

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["administer","org-administer"])> User must be authenticated and have any of these permissions.
    """
    invitations_count: Int!

    job_title: String
    locale: String
    mobile_phone: PhoneNumber
    office_phone: PhoneNumber

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["administer","org-administer"])> User must be authenticated and have any of these permissions.
    """
    organizations: [UserOrganization!]!

    """
    @require <authOrg> Authenticated user must be a member of the current organization.

    @require <authMe(["administer","org-administer"])> User must be authenticated and have any of these permissions.
    """
    organizations_count: Int!

    phone: PhoneNumber
    photo: Url
    previous_sign_in: DateTime
    timezone: String
    title: String
    updated_at: DateTime!
}

type UserMutation {
    """
    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authMe(["administer"])> User must be authenticated and have any of these permissions.
    """
    organization(
        id: ID
    ): UserOrganizationMutation

    """
    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authMe(["administer"])> User must be authenticated and have any of these permissions.
    """
    update(
        input: UserUpdateInput!
    ): UserUpdatePayload
}

type UserOrganization {
    enabled: Boolean!
    organization: Organization!
    organization_id: ID!
    role: Role
    status: Status!
    team: Team
}

type UserOrganizationMutation {
    """
    @require <authOrgRoot> Authenticated user must be a member of the current organization, and
    the organization must be a root organization.

    @require <authMe(["administer"])> User must be authenticated and have any of these permissions.
    """
    update(
        input: UserOrganizationUpdateInput!
    ): UserOrganizationUpdatePayload
}

type UserOrganizationUpdatePayload
implements
    & Payload
{
    organization: UserOrganization!
    result: Boolean!
}

type UserUpdatePayload
implements
    & Payload
{
    result: Boolean!
    user: User!
}

"""
Aggregated data for `type User`.
"""
type UsersAggregated {
    count: Int!

    groups(
        groupBy: AggregatedGroupByClauseUsersQuery!
        limit: Int! = 25
        offset: Int! = 0
    ): [AggregatedGroupByTypeGroup!]!

    groupsAggregated(
        groupBy: AggregatedGroupByClauseUsersQuery!
    ): AggregatedGroupByTypeGroupsAggregated
}

type recoverApplicationSettingsPayload {
    result: Boolean!
}

union ApplicationSettingValues =
    | Status
    | StringValue
    | Type

union SearchResult =
    | Asset
    | Customer
    | Document
