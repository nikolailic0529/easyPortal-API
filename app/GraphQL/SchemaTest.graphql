type Application {
  name: String!
  version: String!
  locale: String!

  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <root> Authenticated user must be a root.
  """
  settings: [ApplicationSetting!]!

  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <root> Authenticated user must be a root.
  """
  settingGroups: [ApplicationSettingGroup!]!

  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <root> Authenticated user must be a root.
  """
  services: [ApplicationService!]!

  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <root> Authenticated user must be a root.
  """
  jobs: [ApplicationJob!]!

  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <root> Authenticated user must be a root.
  """
  translations(locale: String!): [Translation!]!

  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <root> Authenticated user must be a root.
  """
  logs(
    where: SearchByConditionApplicationLogsQuery
    order: [SortByClauseApplicationLogsSort!]

    """Limits number of fetched elements. Maximum allowed value: 100."""
    first: Int = 25

    """The offset from which elements are returned."""
    page: Int
  ): ApplicationLogPaginator
}

type ApplicationJob {
  name: String!

  """Settings related to this job."""
  settings: [String!]!

  """Queue name"""
  queue: String!
  description: String
}

type ApplicationJobProgress {
  total: Int
  value: Int!
}

type ApplicationJobState {
  id: ID!
  running: Boolean!
  pending_at: DateTime!
  running_at: DateTime
}

type ApplicationLog {
  id: ID!
  category: String!
  action: String!
  status: String
  object_type: String
  object_id: ID

  """Seconds"""
  duration: Float
  created_at: DateTime!
  finished_at: DateTime

  """JSON"""
  statistics: String

  """JSON"""
  context: String
}

"""A paginated list of ApplicationLog items."""
type ApplicationLogPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of ApplicationLog items."""
  data: [ApplicationLog!]!
}

input ApplicationLogsQuery {
  id: ID!
  category: String!
  action: String!
  status: String
  object_type: String
  object_id: ID
  duration: Float
  created_at: DateTime!
  finished_at: DateTime
}

input ApplicationLogsSort {
  duration: Float
  created_at: DateTime!
  finished_at: DateTime
}

type ApplicationService {
  name: String!
  enabled: Boolean!

  """Cron expression that determines when service should run if enabled."""
  cron: String!

  """Queue name"""
  queue: String!

  """Settings related to this service."""
  settings: [String!]!
  description: String
  state: ApplicationJobState
  progress: ApplicationJobProgress
}

type ApplicationSetting {
  name: String!

  """
  Type. Can be standard GraphQL type like Int, Boolean, etc, or a special
  application type.
  """
  type: String!

  """Indicated that the setting is array."""
  array: Boolean!

  """
  Value of the setting. For array it will contain comma-separated values, for
  Boolean: "true" or "false", also can be "null" that means null.
  """
  value: String!

  """Allowed values."""
  values: [ApplicationSettingValues!]

  """
  Indicates that the setting contains sensitive data (eg password), in this case,
  the real value will not be returned.
  """
  secret: Boolean!

  """Default value."""
  default: String!

  """
  Indicates that the setting is read-only due to configs priority and cannot
  be changed.
  """
  readonly: Boolean!

  """Indicates that this setting related to job."""
  job: Boolean!

  """Indicates that this setting related to service."""
  service: Boolean!
  description: String
}

type ApplicationSettingGroup {
  """Group name."""
  name: String!

  """Settings related to this group."""
  settings: [String!]!
}

union ApplicationSettingValues = Type

type Asset {
  id: ID!
  oem_id: ID!
  product_id: ID!
  type_id: ID
  customer_id: ID
  location_id: ID
  reseller_id: ID!
  serial_number: String
  customer: Customer
  location: Location
  oem: Oem!
  product: Product!
  type: Type
  warranties: [AssetWarranty!]!
  reseller: Reseller!
  status: Status
  contacts: [Contact!]!
  contacts_count: Int!
  coverage_id: ID
  coverage: AssetCoverage
  tags: [Tag!]!
  data_quality: String
}

type AssetCoverage {
  id: ID!
  key: String!
  name: String!
}

input AssetCoveragesQuery {
  assets: AssetsQuery
}

input AssetCoveragesSort {
  name: String!
}

"""A paginated list of Asset items."""
type AssetPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of Asset items."""
  data: [Asset!]!
}

input AssetStatusesQuery {
  assets: AssetsQuery
}

input AssetTypesQuery {
  assets: AssetsQuery
}

input AssetWarrantiesQuery {
  id: ID!
  start: Date
  end: Date
  note: String
  asset: AssetsQuery
  customer_id: ID
  customer: CustomersQuery
  document_id: ID
  document: DocumentsQuery
  reseller_id: ID
  reseller: ResellersQuery
  services: ProductsQuery
  support: ProductsQuery
}

type AssetWarranty {
  id: ID!
  start: Date
  end: Date
  note: String
  customer_id: ID
  customer: Customer
  document_id: ID
  document: Document
  reseller_id: ID
  reseller: Reseller
  services: [Product!]!
  support: Product
}

input AssetsQuery {
  id: ID!
  oem_id: ID!
  type_id: ID
  product_id: ID!
  reseller_id: ID!
  customer_id: ID!
  location_id: ID!
  coverage_id: ID
  status_id: ID
  serial_number: String!
  location: LocationsQuery
  customer: CustomersQuery
  product: ProductsQuery
  warranties: AssetWarrantiesQuery
  tags: TagsQuery
}

input AssetsSort {
  id: ID!
  product: ProductsSort!
  serial_number: String!
  location: LocationsSort!
  customer: CustomersSort!
  status: StatusSort!
  coverage: AssetCoveragesSort!
}

input AuthorizeOrganizationInput {
  code: String!
  state: String!
}

type AuthorizeOrganizationPayload {
  me: Me
}

input ChangePasswordInput {
  current_password: String
  password: String!
}

type ChangePasswordPayload {
  result: Boolean!
}

input CitiesQuery {
  id: ID!
  name: String!
  country_id: ID!
  assets: AssetsQuery
  customers: CustomersQuery
}

input CitiesSort {
  id: ID!
  name: String!
  country: CountriesSort
}

type City {
  id: ID!
  name: String!
  country_id: ID!
  country: Country!
}

type Client {
  translations(locale: String!): [Translation!]!
  settings: [ClientSetting!]!
}

type ClientSetting {
  name: String!

  """
  Value of the setting. For array it will contain comma-separated values, for
  Boolean: "true" or "false", also can be "null" that means null.
  """
  value: String!
}

type Contact {
  id: ID!
  name: String
  email: String
  phone_number: String

  """Indicates that phone_number in E.164 format"""
  phone_valid: Boolean
  types: [Type]!
}

input ContactTypesQuery {
  contacts: ContactsQuery
}

input ContactsQuery {
  id: ID!
  name: String
  email: String
  phone_number: String
  phone_valid: Boolean
  types: TypesQuery
  assets: CustomersQuery
  customers: CustomersQuery
}

input ContractTypesQuery {
  contracts: DocumentsQuery
}

input CountriesQuery {
  id: ID!
  code: String!
  name: String!
  cities: CitiesQuery
  assets: AssetsQuery
  customers: CustomersQuery
}

input CountriesSort {
  id: ID!
  code: String!
  name: String!
}

type Country {
  id: ID!
  name: String!
  code: String!
}

input CreateMeSearchInput {
  name: String!
  key: String!
  conditions: String!
}

type CreateMeSearchPayload {
  created: MeSearch!
}

input CreateOrgRoleInput {
  name: String!
  permissions: [ID!]
}

type CreateOrgRolePayload {
  created: Role!
}

input CurrenciesQuery {
  documents: DocumentsQuery
}

type Currency {
  id: ID!
  code: String!
  name: String!
}

type Customer {
  id: ID!
  name: String!
  type: Type!
  type_id: ID!
  status: Status!
  status_id: ID!
  assets_count: Int!
  locations_count: Int!
  locations: [Location!]!
  contacts_count: Int!
  contacts: [Contact!]!
  headquarter: Location

  """
  @require <me(["contracts-view","customers-view"])> User must be authenticated and have any of these permissions.
  """
  contracts(
    where: SearchByConditionDocumentsQuery
    order: [SortByClauseDocumentsSort!]

    """Limits number of fetched elements. Maximum allowed value: 100."""
    first: Int = 25

    """The offset from which elements are returned."""
    page: Int
  ): DocumentPaginator

  """
  @require <me(["customers-view","quotes-view"])> User must be authenticated and have any of these permissions.
  """
  quotes(
    where: SearchByConditionDocumentsQuery
    order: [SortByClauseDocumentsSort!]

    """Limits number of fetched elements. Maximum allowed value: 100."""
    first: Int = 25

    """The offset from which elements are returned."""
    page: Int
  ): DocumentPaginator

  """
  @require <me(["assets-view","customers-view"])> User must be authenticated and have any of these permissions.
  """
  assets(
    where: SearchByConditionAssetsQuery
    order: [SortByClauseAssetsSort!]

    """Limits number of fetched elements. Maximum allowed value: 100."""
    first: Int = 25

    """The offset from which elements are returned."""
    page: Int
  ): AssetPaginator
}

"""A paginated list of Customer items."""
type CustomerPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of Customer items."""
  data: [Customer!]!
}

input CustomerStatusesQuery {
  customers: CustomersQuery
}

input CustomerTypesQuery {
  customers: CustomersQuery
}

type CustomersAggregate {
  count: Int!
  assets: Int!
}

input CustomersQuery {
  id: ID!
  name: String!
  type_id: ID!
  status_id: ID!
  assets_count: Int!
  locations_count: Int!
  locations: LocationsQuery
  contacts_count: Int!
  contacts: ContactsQuery
  assets: AssetsQuery
  contracts: DocumentsQuery
  quotes: DocumentsQuery
}

input CustomersSort {
  name: String!
  locations_count: Int!
  contacts_count: Int!
  assets_count: Int!
  status: StatusSort!
  type: TypesSort!
  headquarter: LocationsSort!
}

"""ISO 8601 Date string with format Y-m-d (`2011-05-23`)."""
scalar Date

"""
ISO 8601 Date Time string with format `Y-m-dTH:i:sP` (`2018-05-23T13:43:32+00:00`).
"""
scalar DateTime

input DeleteApplicationTranslationsInput {
  locale: String!
  keys: [String!]!
}

type DeleteApplicationTranslationsPayload {
  deleted: [String!]!
}

input DeleteClientSettingsInput {
  names: [String!]!
}

type DeleteClientSettingsPayload {
  deleted: [String!]!
}

input DeleteClientTranslationsInput {
  locale: String!
  keys: [String!]!
}

type DeleteClientTranslationsPayload {
  deleted: [String!]!
}

input DeleteMeSearchInput {
  id: ID!
}

type DeleteMeSearchPayload {
  deleted: Boolean!
}

input DeleteOrgRoleInput {
  id: ID!
}

type DeleteOrgRolePayload {
  deleted: Boolean!
}

input DispatchApplicationServiceInput {
  """Name of the service."""
  name: String!

  """If true the service will be executed right now."""
  immediately: Boolean! = false
}

type DispatchApplicationServicePayload {
  result: Boolean!
}

type Distributor {
  id: ID!
  name: String!
}

type Document {
  id: ID!
  oem_id: ID!
  type_id: ID!
  customer_id: ID!
  number: String!
  start: Date
  end: Date
  price: Float
  currency_id: ID
  currency: Currency
  customer: Customer!
  oem: Oem!
  support_id: ID
  support: Product
  reseller_id: ID
  reseller: Reseller
  type: Type!
  entries(where: SearchByConditionDocumentEntriesQuery): [DocumentEntry!]!
  language_id: ID
  language: Language
  contacts: [Contact!]!
  distributor_id: ID
  distributor: Distributor
}

input DocumentEntriesQuery {
  id: ID!
  document_id: ID!
  net_price: Float
  list_price: Float
  discount: Float
  renewal: Float
  serial_number: String
  product_id: ID!
  product: ProductsQuery
  service_id: ID
  service: ProductsQuery
  currency_id: ID
}

type DocumentEntry {
  id: ID!
  document_id: ID!
  net_price: Float
  list_price: Float
  discount: Float
  renewal: Float
  serial_number: String
  product_id: ID!
  product: Product!
  service_id: ID
  service: Product
  currency_id: ID
  currency: Currency
}

"""A paginated list of Document items."""
type DocumentPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of Document items."""
  data: [Document!]!
}

type DocumentsAggregate {
  count: Int!
  prices: [DocumentsAggregatePrice!]!
}

type DocumentsAggregatePrice {
  count: Int!
  amount: Float!
  currency_id: ID
  currency: Currency
}

input DocumentsQuery {
  id: ID!
  oem_id: ID!
  type_id: ID!
  number: String!
  start: Date!
  end: Date!
  price: Float
  serial_number: String
  product_id: ID!
  product: ProductsQuery!
  currency_id: ID
  customer_id: ID!
  customer: CustomersQuery
  service_id: ID
  service: ProductsQuery
  reseller_id: ID
  reseller: ResellersQuery
}

input DocumentsSort {
  start: Date!
  end: Date!
  price: Float
}

input InviteOrgUserInput {
  email: String!
  role_id: ID!
}

type InviteOrgUserPayload {
  result: Boolean!
}

type Language {
  id: ID!
  code: String!
  name: String!
}

input LanguagesQuery {
  documents: DocumentsQuery
}

type Location {
  id: ID!
  postcode: String!
  state: String!
  line_one: String!
  line_two: String!
  latitude: Float
  longitude: Float
  city: City!
  city_id: ID!
  country: Country!
  country_id: ID!
  types: [Type]!
}

input LocationTypesQuery {
  locations: LocationsQuery
}

input LocationsQuery {
  id: ID!
  postcode: String!
  state: String!
  line_one: String!
  line_two: String!
  latitude: Float
  longitude: Float
  city: CitiesQuery
  city_id: ID!
  country: CountriesQuery
  country_id: ID!
  types: TypesQuery
  assets: CustomersQuery
  customers: CustomersQuery
}

input LocationsSort {
  postcode: String!
  state: String!
  line_one: String!
  line_two: String!
  country: CountriesSort!
  city: CitiesSort!
}

type Map {
  latitude: Float!
  longitude: Float!
  customers: Int!
  assets: Int!
}

input MapQuery {
  latitude: Float!
  longitude: Float!
}

type Me {
  id: ID!
  given_name: String!
  family_name: String!
  email: String!
  locale: String
  permissions: [String!]
  root: Boolean!
  searches(where: SearchByConditionMeSearchQuery, order: [SortByClauseMeSearchSort!]): [MeSearch!]!
  profile: Profile
}

type MeSearch {
  id: ID!
  key: String!
  name: String!
  conditions: String!
  created_at: DateTime!
}

input MeSearchQuery {
  id: ID!
  key: String!
  name: String!
  created_at: DateTime!
}

input MeSearchSort {
  key: String!
  name: String!
  created_at: DateTime!
}

type Mutation {
  """@require <me> User must be authenticated."""
  createMeSearch(input: CreateMeSearchInput!): CreateMeSearchPayload

  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <root> Authenticated user must be a root.
  """
  deleteApplicationTranslations(input: DeleteApplicationTranslationsInput!): DeleteApplicationTranslationsPayload

  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <root> Authenticated user must be a root.
  """
  deleteClientSettings(input: DeleteClientSettingsInput!): DeleteClientSettingsPayload

  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <root> Authenticated user must be a root.
  """
  deleteClientTranslations(input: DeleteClientTranslationsInput!): DeleteClientTranslationsPayload

  """@require <me> User must be authenticated."""
  deleteMeSearch(input: DeleteMeSearchInput!): DeleteMeSearchPayload

  """
  Dispatch/Run application service.
  
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <root> Authenticated user must be a root.
  """
  dispatchApplicationService(input: DispatchApplicationServiceInput!): DispatchApplicationServicePayload

  """
  Force delete all custom settings, may be useful to restore the corrupted file.
  
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <root> Authenticated user must be a root.
  """
  recoverApplicationSettings: recoverApplicationSettingsPayload

  """
  Force delete all translations for a given locale, may be useful to restore the
  corrupted file.
  
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <root> Authenticated user must be a root.
  """
  recoverApplicationTranslations(input: RecoverApplicationTranslationsInput!): RecoverApplicationTranslationsPayload

  """
  Force delete all custom settings, may be useful to restore the corrupted file.
  
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <root> Authenticated user must be a root.
  """
  recoverClientSettings: RecoverClientSettingsPayload

  """
  Force delete all client translations for a given locale, may be useful to
  restore the corrupted file.
  
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <root> Authenticated user must be a root.
  """
  recoverClientTranslations(input: RecoverClientTranslationsInput!): RecoverClientTranslationsPayload
  setApplicationLocale(input: SetApplicationLocaleInput!): SetApplicationLocalePayload

  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <root> Authenticated user must be a root.
  """
  updateApplicationSettings(input: [UpdateApplicationSettingsInput!]!): UpdateApplicationSettingsPayload

  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <root> Authenticated user must be a root.
  """
  updateApplicationTranslations(input: UpdateApplicationTranslationsInput!): UpdateApplicationTranslationsPayload

  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <root> Authenticated user must be a root.
  """
  updateClientSettings(input: [UpdateClientSettingsInput!]!): UpdateClientSettingsPayload

  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <root> Authenticated user must be a root.
  """
  updateClientTranslations(input: UpdateClientTranslationsInput!): UpdateClientTranslationsPayload

  """
  @require <me> User must be authenticated.
  
  @require <organization> Authenticated user must be a member of the current organization.
  """
  updateMeProfile(input: UpdateMeProfileInput!): UpdateMeProfilePayload

  """
  Finish the Sign In for Organization.
  
  @require <guest> Current visitor must be a guest.
  """
  authorizeOrganization(input: AuthorizeOrganizationInput): AuthorizeOrganizationPayload

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me> User must be authenticated.
  """
  changePassword(input: ChangePasswordInput!): ChangePasswordPayload

  """
  Reset password.
  
  @require <guest> Current visitor must be a guest.
  """
  resetPassword(input: ResetPasswordInput): ResetPasswordPayload

  """
  Send reset password link if local user with given email exists.
  
  @require <guest> Current visitor must be a guest.
  """
  sendResetPasswordLink(input: SendResetPasswordLinkInput): SendResetPasswordLinkPayload

  """
  Sign In for local users.
  
  @require <guest> Current visitor must be a guest.
  """
  signIn(input: SignInInput): SignInPayload

  """
  Begins the Sign In for Organization.
  
  @require <guest> Current visitor must be a guest.
  """
  signInOrganization(input: SignInOrganizationInput): SignInOrganizationPayload

  """
  Sign Out.
  
  @require <me> User must be authenticated.
  """
  signOut: SignOutPayload

  """@require <guest> Current visitor must be a guest."""
  signUpByInvite(input: SignUpByInviteInput!): SignUpByInvitePayload

  """
  Create Organization Role.
  
  @require <me(["org-administer"])> User must be authenticated and have any of these permissions.
  """
  createOrgRole(input: CreateOrgRoleInput): CreateOrgRolePayload

  """
  DELETE Organization Role.
  
  @require <me(["org-administer"])> User must be authenticated and have any of these permissions.
  """
  deleteOrgRole(input: DeleteOrgRoleInput): DeleteOrgRolePayload

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["org-administer"])> User must be authenticated and have any of these permissions.
  """
  inviteOrgUser(input: InviteOrgUserInput!): InviteOrgUserPayload

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["org-administer"])> User must be authenticated and have any of these permissions.
  """
  updateOrg(input: UpdateOrgInput!): UpdateOrgPayload

  """
  Update Organization Role.
  
  @require <me(["org-administer"])> User must be authenticated and have any of these permissions.
  """
  updateOrgRole(input: UpdateOrgRoleInput): UpdateOrgRolePayload

  """
  Update Organization Roles.
  
  @require <me(["org-administer"])> User must be authenticated and have any of these permissions.
  """
  updateOrgRoles(input: [UpdateOrgRolesInput!]!): UpdateOrgRolesPayload
}

type Oem {
  id: ID!
  abbr: String!
  name: String!
}

input OemsQuery {
  assets: AssetsQuery
  documents: DocumentsQuery
}

type Organization {
  id: ID!
  name: String!
  root: Boolean!
  locale: String
  website_url: String
  email: String
  currency_id: ID
  currency: Currency
  analytics_code: String
  timezone: String
  branding: OrganizationBranding
  status: Status
  locations: [Location!]!
  contacts: [Contact!]!
  headquarter: Location

  """
  @require <me(["administer"])> User must be authenticated and have any of these permissions.
  """
  users: [OrganizationUser!]!

  """
  @require <me(["administer"])> User must be authenticated and have any of these permissions.
  """
  keycloak_scope: String

  """
  @require <me(["org-administer"])> User must be authenticated and have any of these permissions.
  """
  roles: [Role!]!
}

type OrganizationBranding {
  dark_theme: Boolean
  main_color: String
  secondary_color: String
  logo_url: String
  favicon_url: String
  default_main_color: String
  default_secondary_color: String
  default_logo_url: String
  default_favicon_url: String
  welcome_image_url: String
  welcome_heading: String
  welcome_underline: String
}

"""A paginated list of Organization items."""
type OrganizationPaginator {
  """Pagination information about the list of items."""
  paginatorInfo: PaginatorInfo!

  """A list of Organization items."""
  data: [Organization!]!
}

type OrganizationUser {
  id: ID!
  username: String!
  enabled: Boolean!
  emailVerified: Boolean!
  firstName: String
  lastName: String
  email: String
  groups: [String!]!
}

input OrganizationsQuery {
  id: ID!
  name: String!
  website_url: String
  email: String
  status_id: ID
  contacts: ContactsQuery
  locations: LocationsQuery
  headquarter: LocationsQuery
}

input OrganizationsSort {
  name: String!
  website_url: String
  email: String
  status: StatusSort!
}

"""Pagination information about the corresponding list of items."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """Total number of node in connection."""
  total: Int

  """Count of nodes in current request."""
  count: Int

  """Current page of request."""
  currentPage: Int

  """Last page in connection."""
  lastPage: Int
}

"""Pagination information about the corresponding list of items."""
type PaginatorInfo {
  """Count of available items in the page."""
  count: Int!

  """Current pagination page."""
  currentPage: Int!

  """Index of first item in the current page."""
  firstItem: Int

  """If collection has more pages."""
  hasMorePages: Boolean!

  """Index of last item in the current page."""
  lastItem: Int

  """Last page number of the collection."""
  lastPage: Int!

  """Number of items per page in the collection."""
  perPage: Int!

  """Total items available in the collection."""
  total: Int!
}

type Permission {
  id: ID!
  key: String!
  name: String!
  description: String!
}

type Product {
  id: ID!
  oem_id: ID!
  sku: String!
  name: String!
  eol: Date
  eos: Date
  oem: Oem!
}

input ProductsQuery {
  id: ID!
  oem_id: ID!
  sku: String!
  name: String!
}

input ProductsSort {
  id: ID!
  sku: String!
  name: String!
  eol: Date
  eos: Date
}

type Profile {
  first_name: String
  last_name: String
  title: String
  academic_title: String
  office_phone: String
  mobile_phone: String
  contact_email: String
  department: String
  job_title: String
  company: String
  phone: String
  photo: String
}

type Query {
  """Authenticated user or `null` otherwise."""
  me: Me

  """Current organization."""
  org: Organization

  """Application information."""
  application: Application!

  """Client data (settings, translations, etc)."""
  client: Client

  """
  List of all OEMs
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me> User must be authenticated.
  """
  oems(where: SearchByConditionOemsQuery): [Oem!]!

  """
  List of all currencies.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me> User must be authenticated.
  """
  currencies(where: SearchByConditionCurrenciesQuery): [Currency!]!

  """
  List of all languages.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me> User must be authenticated.
  """
  languages(where: SearchByConditionLanguagesQuery): [Language!]!

  """
  List of all countries.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me> User must be authenticated.
  """
  countries(where: SearchByConditionCountriesQuery): [Country!]!

  """
  List of all cities.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me> User must be authenticated.
  """
  cities(where: SearchByConditionCitiesQuery): [City!]!

  """
  List of all possible customer statuses.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me> User must be authenticated.
  """
  customerStatuses(where: SearchByConditionCustomerStatusesQuery): [Status!]!

  """
  List of all possible customer types.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me> User must be authenticated.
  """
  customerTypes(where: SearchByConditionCustomerTypesQuery): [Type!]!

  """
  List of all possible location types.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me> User must be authenticated.
  """
  locationTypes(where: SearchByConditionLocationTypesQuery): [Type!]!

  """
  List of all possible contact types.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me> User must be authenticated.
  """
  contactTypes(where: SearchByConditionContactTypesQuery): [Type!]!

  """
  List of all possible asset types.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me> User must be authenticated.
  """
  assetTypes(where: SearchByConditionAssetTypesQuery): [Type!]!

  """
  List of all possible contract types.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me> User must be authenticated.
  """
  contractTypes(where: SearchByConditionContractTypesQuery): [Type!]!

  """
  List of all possible quote types.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me> User must be authenticated.
  """
  quoteTypes(where: SearchByConditionQuoteTypesQuery): [Type!]!

  """
  List of all possible asset statuses.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me> User must be authenticated.
  """
  assetStatuses(where: SearchByConditionAssetStatusesQuery): [Status!]!

  """
  List of all possible asset coverages.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me> User must be authenticated.
  """
  assetCoverages(where: SearchByConditionAssetCoveragesQuery): [AssetCoverage!]!

  """
  List of all possible tags.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me> User must be authenticated.
  """
  tags(where: SearchByConditionTagsQuery, order: [SortByClauseTagsSort!]): [Tag!]!

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["customers-view"])> User must be authenticated and have any of these permissions.
  """
  customersAggregate(where: SearchByConditionCustomersQuery): CustomersAggregate!

  """
  Customer.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["customers-view"])> User must be authenticated and have any of these permissions.
  """
  customer(id: ID!): Customer

  """
  Asset.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["assets-view","customers-view"])> User must be authenticated and have any of these permissions.
  """
  asset(id: ID!): Asset

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["contracts-view","customers-view"])> User must be authenticated and have any of these permissions.
  """
  contractsAggregate(where: SearchByConditionDocumentsQuery): DocumentsAggregate!

  """
  Contract.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["contracts-view","customers-view"])> User must be authenticated and have any of these permissions.
  """
  contract(id: ID!): Document

  """
  Quote.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["customers-view","quotes-view"])> User must be authenticated and have any of these permissions.
  """
  quote(id: ID!): Document

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["customers-view"])> User must be authenticated and have any of these permissions.
  """
  map(where: SearchByConditionMapQuery, diff: Float!): [Map!]!

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["org-administer"])> User must be authenticated and have any of these permissions.
  """
  permissions: [Permission!]!

  """
  Organization.
  
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <me(["administer"])> User must be authenticated and have any of these permissions.
  """
  organization(id: ID!): Organization

  """
  List of Customers.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["customers-view"])> User must be authenticated and have any of these permissions.
  """
  customers(
    where: SearchByConditionCustomersQuery
    order: [SortByClauseCustomersSort!]

    """Limits number of fetched elements. Maximum allowed value: 100."""
    first: Int = 25

    """The offset from which elements are returned."""
    page: Int
  ): CustomerPaginator

  """
  List of all assets
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["assets-view","customers-view"])> User must be authenticated and have any of these permissions.
  """
  assets(
    where: SearchByConditionAssetsQuery
    order: [SortByClauseAssetsSort!]

    """Limits number of fetched elements. Maximum allowed value: 100."""
    first: Int = 25

    """The offset from which elements are returned."""
    page: Int
  ): AssetPaginator

  """
  List of all contracts.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["contracts-view","customers-view"])> User must be authenticated and have any of these permissions.
  """
  contracts(
    where: SearchByConditionDocumentsQuery
    order: [SortByClauseDocumentsSort!]

    """Limits number of fetched elements. Maximum allowed value: 100."""
    first: Int = 25

    """The offset from which elements are returned."""
    page: Int
  ): DocumentPaginator

  """
  List of all quotes.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["customers-view","quotes-view"])> User must be authenticated and have any of these permissions.
  """
  quotes(
    where: SearchByConditionDocumentsQuery
    order: [SortByClauseDocumentsSort!]

    """Limits number of fetched elements. Maximum allowed value: 100."""
    first: Int = 25

    """The offset from which elements are returned."""
    page: Int
  ): DocumentPaginator

  """
  List of all organizations.
  
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <me(["administer"])> User must be authenticated and have any of these permissions.
  """
  organizations(
    where: SearchByConditionOrganizationsQuery
    order: [SortByClauseOrganizationsSort!]

    """Limits number of fetched elements. Maximum allowed value: 100."""
    first: Int = 25

    """The offset from which elements are returned."""
    page: Int
  ): OrganizationPaginator
}

input QuoteTypesQuery {
  quotes: DocumentsQuery
}

input RecoverApplicationTranslationsInput {
  locale: String!
}

type RecoverApplicationTranslationsPayload {
  result: Boolean!
}

type RecoverClientSettingsPayload {
  result: Boolean!
}

input RecoverClientTranslationsInput {
  locale: String!
}

type RecoverClientTranslationsPayload {
  result: Boolean!
}

type Reseller {
  id: ID!
  name: String!
  assets_count: Int!
  customers_count: Int!
  locations_count: Int!
  locations: [Location!]!
}

input ResellersQuery {
  id: ID!
  name: String!
}

input ResetPasswordInput {
  email: String!
  token: String!
  password: String!
}

type ResetPasswordPayload {
  result: Boolean!
}

type Role {
  id: ID!
  name: String!
  permissions: [ID!]!
}

"""
Available conditions for input ApplicationLogsQuery (only one property allowed at a time).
"""
input SearchByConditionApplicationLogsQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionApplicationLogsQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionApplicationLogsQuery!]

  """Not."""
  not: SearchByFlag

  """Property condition."""
  id: SearchByScalarID

  """Property condition."""
  category: SearchByScalarString

  """Property condition."""
  action: SearchByScalarString

  """Property condition."""
  status: SearchByScalarStringOrNull

  """Property condition."""
  object_type: SearchByScalarStringOrNull

  """Property condition."""
  object_id: SearchByScalarIDOrNull

  """Property condition."""
  duration: SearchByScalarFloatOrNull

  """Property condition."""
  created_at: SearchByScalarDateTime

  """Property condition."""
  finished_at: SearchByScalarDateTimeOrNull
}

"""
Available conditions for input AssetCoveragesQuery (only one property allowed at a time).
"""
input SearchByConditionAssetCoveragesQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionAssetCoveragesQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionAssetCoveragesQuery!]

  """Not."""
  not: SearchByFlag

  """Property condition."""
  assets: SearchByRelationAssetsQuery
}

"""
Available conditions for input AssetStatusesQuery (only one property allowed at a time).
"""
input SearchByConditionAssetStatusesQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionAssetStatusesQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionAssetStatusesQuery!]

  """Not."""
  not: SearchByFlag

  """Property condition."""
  assets: SearchByRelationAssetsQuery
}

"""
Available conditions for input AssetTypesQuery (only one property allowed at a time).
"""
input SearchByConditionAssetTypesQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionAssetTypesQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionAssetTypesQuery!]

  """Not."""
  not: SearchByFlag

  """Property condition."""
  assets: SearchByRelationAssetsQuery
}

"""
Available conditions for input AssetWarrantiesQuery (only one property allowed at a time).
"""
input SearchByConditionAssetWarrantiesQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionAssetWarrantiesQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionAssetWarrantiesQuery!]

  """Not."""
  not: SearchByFlag

  """Property condition."""
  id: SearchByScalarID

  """Property condition."""
  start: SearchByScalarDateOrNull

  """Property condition."""
  end: SearchByScalarDateOrNull

  """Property condition."""
  note: SearchByScalarStringOrNull

  """Property condition."""
  asset: SearchByRelationAssetsQuery

  """Property condition."""
  customer_id: SearchByScalarIDOrNull

  """Property condition."""
  customer: SearchByRelationCustomersQuery

  """Property condition."""
  document_id: SearchByScalarIDOrNull

  """Property condition."""
  document: SearchByRelationDocumentsQuery

  """Property condition."""
  reseller_id: SearchByScalarIDOrNull

  """Property condition."""
  reseller: SearchByRelationResellersQuery

  """Property condition."""
  services: SearchByRelationProductsQuery

  """Property condition."""
  support: SearchByRelationProductsQuery
}

"""
Available conditions for input AssetsQuery (only one property allowed at a time).
"""
input SearchByConditionAssetsQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionAssetsQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionAssetsQuery!]

  """Not."""
  not: SearchByFlag

  """Property condition."""
  id: SearchByScalarID

  """Property condition."""
  oem_id: SearchByScalarID

  """Property condition."""
  type_id: SearchByScalarIDOrNull

  """Property condition."""
  product_id: SearchByScalarID

  """Property condition."""
  reseller_id: SearchByScalarID

  """Property condition."""
  customer_id: SearchByScalarID

  """Property condition."""
  location_id: SearchByScalarID

  """Property condition."""
  coverage_id: SearchByScalarIDOrNull

  """Property condition."""
  status_id: SearchByScalarIDOrNull

  """Property condition."""
  serial_number: SearchByScalarString

  """Property condition."""
  location: SearchByRelationLocationsQuery

  """Property condition."""
  customer: SearchByRelationCustomersQuery

  """Property condition."""
  product: SearchByRelationProductsQuery

  """Property condition."""
  warranties: SearchByRelationAssetWarrantiesQuery

  """Property condition."""
  tags: SearchByRelationTagsQuery
}

"""
Available conditions for input CitiesQuery (only one property allowed at a time).
"""
input SearchByConditionCitiesQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionCitiesQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionCitiesQuery!]

  """Not."""
  not: SearchByFlag

  """Property condition."""
  id: SearchByScalarID

  """Property condition."""
  name: SearchByScalarString

  """Property condition."""
  country_id: SearchByScalarID

  """Property condition."""
  assets: SearchByRelationAssetsQuery

  """Property condition."""
  customers: SearchByRelationCustomersQuery
}

"""
Available conditions for input ContactTypesQuery (only one property allowed at a time).
"""
input SearchByConditionContactTypesQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionContactTypesQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionContactTypesQuery!]

  """Not."""
  not: SearchByFlag

  """Property condition."""
  contacts: SearchByRelationContactsQuery
}

"""
Available conditions for input ContactsQuery (only one property allowed at a time).
"""
input SearchByConditionContactsQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionContactsQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionContactsQuery!]

  """Not."""
  not: SearchByFlag

  """Property condition."""
  id: SearchByScalarID

  """Property condition."""
  name: SearchByScalarStringOrNull

  """Property condition."""
  email: SearchByScalarStringOrNull

  """Property condition."""
  phone_number: SearchByScalarStringOrNull

  """Property condition."""
  phone_valid: SearchByScalarBooleanOrNull

  """Property condition."""
  types: SearchByRelationTypesQuery

  """Property condition."""
  assets: SearchByRelationCustomersQuery

  """Property condition."""
  customers: SearchByRelationCustomersQuery
}

"""
Available conditions for input ContractTypesQuery (only one property allowed at a time).
"""
input SearchByConditionContractTypesQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionContractTypesQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionContractTypesQuery!]

  """Not."""
  not: SearchByFlag

  """Property condition."""
  contracts: SearchByRelationDocumentsQuery
}

"""
Available conditions for input CountriesQuery (only one property allowed at a time).
"""
input SearchByConditionCountriesQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionCountriesQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionCountriesQuery!]

  """Not."""
  not: SearchByFlag

  """Property condition."""
  id: SearchByScalarID

  """Property condition."""
  code: SearchByScalarString

  """Property condition."""
  name: SearchByScalarString

  """Property condition."""
  cities: SearchByRelationCitiesQuery

  """Property condition."""
  assets: SearchByRelationAssetsQuery

  """Property condition."""
  customers: SearchByRelationCustomersQuery
}

"""
Available conditions for input CurrenciesQuery (only one property allowed at a time).
"""
input SearchByConditionCurrenciesQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionCurrenciesQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionCurrenciesQuery!]

  """Not."""
  not: SearchByFlag

  """Property condition."""
  documents: SearchByRelationDocumentsQuery
}

"""
Available conditions for input CustomerStatusesQuery (only one property allowed at a time).
"""
input SearchByConditionCustomerStatusesQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionCustomerStatusesQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionCustomerStatusesQuery!]

  """Not."""
  not: SearchByFlag

  """Property condition."""
  customers: SearchByRelationCustomersQuery
}

"""
Available conditions for input CustomerTypesQuery (only one property allowed at a time).
"""
input SearchByConditionCustomerTypesQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionCustomerTypesQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionCustomerTypesQuery!]

  """Not."""
  not: SearchByFlag

  """Property condition."""
  customers: SearchByRelationCustomersQuery
}

"""
Available conditions for input CustomersQuery (only one property allowed at a time).
"""
input SearchByConditionCustomersQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionCustomersQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionCustomersQuery!]

  """Not."""
  not: SearchByFlag

  """Property condition."""
  id: SearchByScalarID

  """Property condition."""
  name: SearchByScalarString

  """Property condition."""
  type_id: SearchByScalarID

  """Property condition."""
  status_id: SearchByScalarID

  """Property condition."""
  assets_count: SearchByScalarInt

  """Property condition."""
  locations_count: SearchByScalarInt

  """Property condition."""
  locations: SearchByRelationLocationsQuery

  """Property condition."""
  contacts_count: SearchByScalarInt

  """Property condition."""
  contacts: SearchByRelationContactsQuery

  """Property condition."""
  assets: SearchByRelationAssetsQuery

  """Property condition."""
  contracts: SearchByRelationDocumentsQuery

  """Property condition."""
  quotes: SearchByRelationDocumentsQuery
}

"""
Available conditions for input DocumentEntriesQuery (only one property allowed at a time).
"""
input SearchByConditionDocumentEntriesQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionDocumentEntriesQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionDocumentEntriesQuery!]

  """Not."""
  not: SearchByFlag

  """Property condition."""
  id: SearchByScalarID

  """Property condition."""
  document_id: SearchByScalarID

  """Property condition."""
  net_price: SearchByScalarFloatOrNull

  """Property condition."""
  list_price: SearchByScalarFloatOrNull

  """Property condition."""
  discount: SearchByScalarFloatOrNull

  """Property condition."""
  renewal: SearchByScalarFloatOrNull

  """Property condition."""
  serial_number: SearchByScalarStringOrNull

  """Property condition."""
  product_id: SearchByScalarID

  """Property condition."""
  product: SearchByRelationProductsQuery

  """Property condition."""
  service_id: SearchByScalarIDOrNull

  """Property condition."""
  service: SearchByRelationProductsQuery

  """Property condition."""
  currency_id: SearchByScalarIDOrNull
}

"""
Available conditions for input DocumentsQuery (only one property allowed at a time).
"""
input SearchByConditionDocumentsQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionDocumentsQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionDocumentsQuery!]

  """Not."""
  not: SearchByFlag

  """Property condition."""
  id: SearchByScalarID

  """Property condition."""
  oem_id: SearchByScalarID

  """Property condition."""
  type_id: SearchByScalarID

  """Property condition."""
  number: SearchByScalarString

  """Property condition."""
  start: SearchByScalarDate

  """Property condition."""
  end: SearchByScalarDate

  """Property condition."""
  price: SearchByScalarFloatOrNull

  """Property condition."""
  serial_number: SearchByScalarStringOrNull

  """Property condition."""
  product_id: SearchByScalarID

  """Property condition."""
  product: SearchByRelationProductsQuery

  """Property condition."""
  currency_id: SearchByScalarIDOrNull

  """Property condition."""
  customer_id: SearchByScalarID

  """Property condition."""
  customer: SearchByRelationCustomersQuery

  """Property condition."""
  service_id: SearchByScalarIDOrNull

  """Property condition."""
  service: SearchByRelationProductsQuery

  """Property condition."""
  reseller_id: SearchByScalarIDOrNull

  """Property condition."""
  reseller: SearchByRelationResellersQuery
}

"""
Available conditions for input LanguagesQuery (only one property allowed at a time).
"""
input SearchByConditionLanguagesQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionLanguagesQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionLanguagesQuery!]

  """Not."""
  not: SearchByFlag

  """Property condition."""
  documents: SearchByRelationDocumentsQuery
}

"""
Available conditions for input LocationTypesQuery (only one property allowed at a time).
"""
input SearchByConditionLocationTypesQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionLocationTypesQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionLocationTypesQuery!]

  """Not."""
  not: SearchByFlag

  """Property condition."""
  locations: SearchByRelationLocationsQuery
}

"""
Available conditions for input LocationsQuery (only one property allowed at a time).
"""
input SearchByConditionLocationsQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionLocationsQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionLocationsQuery!]

  """Not."""
  not: SearchByFlag

  """Property condition."""
  id: SearchByScalarID

  """Property condition."""
  postcode: SearchByScalarString

  """Property condition."""
  state: SearchByScalarString

  """Property condition."""
  line_one: SearchByScalarString

  """Property condition."""
  line_two: SearchByScalarString

  """Property condition."""
  latitude: SearchByScalarFloatOrNull

  """Property condition."""
  longitude: SearchByScalarFloatOrNull

  """Property condition."""
  city: SearchByRelationCitiesQuery

  """Property condition."""
  city_id: SearchByScalarID

  """Property condition."""
  country: SearchByRelationCountriesQuery

  """Property condition."""
  country_id: SearchByScalarID

  """Property condition."""
  types: SearchByRelationTypesQuery

  """Property condition."""
  assets: SearchByRelationCustomersQuery

  """Property condition."""
  customers: SearchByRelationCustomersQuery
}

"""
Available conditions for input MapQuery (only one property allowed at a time).
"""
input SearchByConditionMapQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionMapQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionMapQuery!]

  """Not."""
  not: SearchByFlag

  """Property condition."""
  latitude: SearchByScalarFloat

  """Property condition."""
  longitude: SearchByScalarFloat
}

"""
Available conditions for input MeSearchQuery (only one property allowed at a time).
"""
input SearchByConditionMeSearchQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionMeSearchQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionMeSearchQuery!]

  """Not."""
  not: SearchByFlag

  """Property condition."""
  id: SearchByScalarID

  """Property condition."""
  key: SearchByScalarString

  """Property condition."""
  name: SearchByScalarString

  """Property condition."""
  created_at: SearchByScalarDateTime
}

"""
Available conditions for input OemsQuery (only one property allowed at a time).
"""
input SearchByConditionOemsQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionOemsQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionOemsQuery!]

  """Not."""
  not: SearchByFlag

  """Property condition."""
  assets: SearchByRelationAssetsQuery

  """Property condition."""
  documents: SearchByRelationDocumentsQuery
}

"""
Available conditions for input OrganizationsQuery (only one property allowed at a time).
"""
input SearchByConditionOrganizationsQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionOrganizationsQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionOrganizationsQuery!]

  """Not."""
  not: SearchByFlag

  """Property condition."""
  id: SearchByScalarID

  """Property condition."""
  name: SearchByScalarString

  """Property condition."""
  website_url: SearchByScalarStringOrNull

  """Property condition."""
  email: SearchByScalarStringOrNull

  """Property condition."""
  status_id: SearchByScalarIDOrNull

  """Property condition."""
  contacts: SearchByRelationContactsQuery

  """Property condition."""
  locations: SearchByRelationLocationsQuery

  """Property condition."""
  headquarter: SearchByRelationLocationsQuery
}

"""
Available conditions for input ProductsQuery (only one property allowed at a time).
"""
input SearchByConditionProductsQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionProductsQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionProductsQuery!]

  """Not."""
  not: SearchByFlag

  """Property condition."""
  id: SearchByScalarID

  """Property condition."""
  oem_id: SearchByScalarID

  """Property condition."""
  sku: SearchByScalarString

  """Property condition."""
  name: SearchByScalarString
}

"""
Available conditions for input QuoteTypesQuery (only one property allowed at a time).
"""
input SearchByConditionQuoteTypesQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionQuoteTypesQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionQuoteTypesQuery!]

  """Not."""
  not: SearchByFlag

  """Property condition."""
  quotes: SearchByRelationDocumentsQuery
}

"""
Available conditions for input ResellersQuery (only one property allowed at a time).
"""
input SearchByConditionResellersQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionResellersQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionResellersQuery!]

  """Not."""
  not: SearchByFlag

  """Property condition."""
  id: SearchByScalarID

  """Property condition."""
  name: SearchByScalarString
}

"""
Available conditions for input TagsQuery (only one property allowed at a time).
"""
input SearchByConditionTagsQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionTagsQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionTagsQuery!]

  """Not."""
  not: SearchByFlag

  """Property condition."""
  id: SearchByScalarID

  """Property condition."""
  name: SearchByScalarString

  """Property condition."""
  assets: SearchByRelationAssetsQuery
}

"""
Available conditions for input TypesQuery (only one property allowed at a time).
"""
input SearchByConditionTypesQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionTypesQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionTypesQuery!]

  """Not."""
  not: SearchByFlag

  """Property condition."""
  id: SearchByScalarID
}

"""Flag."""
enum SearchByFlag {
  yes
}

"""Relation condition for input AssetWarrantiesQuery."""
input SearchByRelationAssetWarrantiesQuery {
  """Conditions for the related objects."""
  where: SearchByConditionAssetWarrantiesQuery!

  """Equal (`=`)."""
  eq: Int

  """Less than (`<`)."""
  lt: Int

  """Less than or equal to (`<=`)."""
  lte: Int

  """Greater than (`>`)."""
  gt: Int

  """Greater than or equal to (`>=`)."""
  gte: Int

  """Not."""
  not: SearchByFlag
}

"""Relation condition for input AssetsQuery."""
input SearchByRelationAssetsQuery {
  """Conditions for the related objects."""
  where: SearchByConditionAssetsQuery!

  """Equal (`=`)."""
  eq: Int

  """Less than (`<`)."""
  lt: Int

  """Less than or equal to (`<=`)."""
  lte: Int

  """Greater than (`>`)."""
  gt: Int

  """Greater than or equal to (`>=`)."""
  gte: Int

  """Not."""
  not: SearchByFlag
}

"""Relation condition for input CitiesQuery."""
input SearchByRelationCitiesQuery {
  """Conditions for the related objects."""
  where: SearchByConditionCitiesQuery!

  """Equal (`=`)."""
  eq: Int

  """Less than (`<`)."""
  lt: Int

  """Less than or equal to (`<=`)."""
  lte: Int

  """Greater than (`>`)."""
  gt: Int

  """Greater than or equal to (`>=`)."""
  gte: Int

  """Not."""
  not: SearchByFlag
}

"""Relation condition for input ContactsQuery."""
input SearchByRelationContactsQuery {
  """Conditions for the related objects."""
  where: SearchByConditionContactsQuery!

  """Equal (`=`)."""
  eq: Int

  """Less than (`<`)."""
  lt: Int

  """Less than or equal to (`<=`)."""
  lte: Int

  """Greater than (`>`)."""
  gt: Int

  """Greater than or equal to (`>=`)."""
  gte: Int

  """Not."""
  not: SearchByFlag
}

"""Relation condition for input CountriesQuery."""
input SearchByRelationCountriesQuery {
  """Conditions for the related objects."""
  where: SearchByConditionCountriesQuery!

  """Equal (`=`)."""
  eq: Int

  """Less than (`<`)."""
  lt: Int

  """Less than or equal to (`<=`)."""
  lte: Int

  """Greater than (`>`)."""
  gt: Int

  """Greater than or equal to (`>=`)."""
  gte: Int

  """Not."""
  not: SearchByFlag
}

"""Relation condition for input CustomersQuery."""
input SearchByRelationCustomersQuery {
  """Conditions for the related objects."""
  where: SearchByConditionCustomersQuery!

  """Equal (`=`)."""
  eq: Int

  """Less than (`<`)."""
  lt: Int

  """Less than or equal to (`<=`)."""
  lte: Int

  """Greater than (`>`)."""
  gt: Int

  """Greater than or equal to (`>=`)."""
  gte: Int

  """Not."""
  not: SearchByFlag
}

"""Relation condition for input DocumentsQuery."""
input SearchByRelationDocumentsQuery {
  """Conditions for the related objects."""
  where: SearchByConditionDocumentsQuery!

  """Equal (`=`)."""
  eq: Int

  """Less than (`<`)."""
  lt: Int

  """Less than or equal to (`<=`)."""
  lte: Int

  """Greater than (`>`)."""
  gt: Int

  """Greater than or equal to (`>=`)."""
  gte: Int

  """Not."""
  not: SearchByFlag
}

"""Relation condition for input LocationsQuery."""
input SearchByRelationLocationsQuery {
  """Conditions for the related objects."""
  where: SearchByConditionLocationsQuery!

  """Equal (`=`)."""
  eq: Int

  """Less than (`<`)."""
  lt: Int

  """Less than or equal to (`<=`)."""
  lte: Int

  """Greater than (`>`)."""
  gt: Int

  """Greater than or equal to (`>=`)."""
  gte: Int

  """Not."""
  not: SearchByFlag
}

"""Relation condition for input ProductsQuery."""
input SearchByRelationProductsQuery {
  """Conditions for the related objects."""
  where: SearchByConditionProductsQuery!

  """Equal (`=`)."""
  eq: Int

  """Less than (`<`)."""
  lt: Int

  """Less than or equal to (`<=`)."""
  lte: Int

  """Greater than (`>`)."""
  gt: Int

  """Greater than or equal to (`>=`)."""
  gte: Int

  """Not."""
  not: SearchByFlag
}

"""Relation condition for input ResellersQuery."""
input SearchByRelationResellersQuery {
  """Conditions for the related objects."""
  where: SearchByConditionResellersQuery!

  """Equal (`=`)."""
  eq: Int

  """Less than (`<`)."""
  lt: Int

  """Less than or equal to (`<=`)."""
  lte: Int

  """Greater than (`>`)."""
  gt: Int

  """Greater than or equal to (`>=`)."""
  gte: Int

  """Not."""
  not: SearchByFlag
}

"""Relation condition for input TagsQuery."""
input SearchByRelationTagsQuery {
  """Conditions for the related objects."""
  where: SearchByConditionTagsQuery!

  """Equal (`=`)."""
  eq: Int

  """Less than (`<`)."""
  lt: Int

  """Less than or equal to (`<=`)."""
  lte: Int

  """Greater than (`>`)."""
  gt: Int

  """Greater than or equal to (`>=`)."""
  gte: Int

  """Not."""
  not: SearchByFlag
}

"""Relation condition for input TypesQuery."""
input SearchByRelationTypesQuery {
  """Conditions for the related objects."""
  where: SearchByConditionTypesQuery!

  """Equal (`=`)."""
  eq: Int

  """Less than (`<`)."""
  lt: Int

  """Less than or equal to (`<=`)."""
  lte: Int

  """Greater than (`>`)."""
  gt: Int

  """Greater than or equal to (`>=`)."""
  gte: Int

  """Not."""
  not: SearchByFlag
}

"""
Available operators for scalar Boolean (only one operator allowed at a time).
"""
input SearchByScalarBooleanOrNull {
  """Equal (`=`)."""
  eq: Boolean

  """Is NULL?"""
  isNull: SearchByFlag

  """Not."""
  not: SearchByFlag
}

"""
Available operators for scalar Date! (only one operator allowed at a time).
"""
input SearchByScalarDate {
  """Equal (`=`)."""
  eq: Date

  """Less than (`<`)."""
  lt: Date

  """Less than or equal to (`<=`)."""
  lte: Date

  """Greater than (`>`)."""
  gt: Date

  """Greater than or equal to (`>=`)."""
  gte: Date

  """Within a set of values."""
  in: [Date!]

  """Within a range."""
  between: SearchByScalarDateOperatorBetween

  """Not."""
  not: SearchByFlag
}

input SearchByScalarDateOperatorBetween {
  min: Date!
  max: Date!
}

"""
Available operators for scalar Date (only one operator allowed at a time).
"""
input SearchByScalarDateOrNull {
  """Equal (`=`)."""
  eq: Date

  """Less than (`<`)."""
  lt: Date

  """Less than or equal to (`<=`)."""
  lte: Date

  """Greater than (`>`)."""
  gt: Date

  """Greater than or equal to (`>=`)."""
  gte: Date

  """Within a set of values."""
  in: [Date!]

  """Within a range."""
  between: SearchByScalarDateOperatorBetween

  """Is NULL?"""
  isNull: SearchByFlag

  """Not."""
  not: SearchByFlag
}

"""
Available operators for scalar DateTime! (only one operator allowed at a time).
"""
input SearchByScalarDateTime {
  """Equal (`=`)."""
  eq: DateTime

  """Less than (`<`)."""
  lt: DateTime

  """Less than or equal to (`<=`)."""
  lte: DateTime

  """Greater than (`>`)."""
  gt: DateTime

  """Greater than or equal to (`>=`)."""
  gte: DateTime

  """Within a set of values."""
  in: [DateTime!]

  """Within a range."""
  between: SearchByScalarDateTimeOperatorBetween

  """Not."""
  not: SearchByFlag
}

input SearchByScalarDateTimeOperatorBetween {
  min: DateTime!
  max: DateTime!
}

"""
Available operators for scalar DateTime (only one operator allowed at a time).
"""
input SearchByScalarDateTimeOrNull {
  """Equal (`=`)."""
  eq: DateTime

  """Less than (`<`)."""
  lt: DateTime

  """Less than or equal to (`<=`)."""
  lte: DateTime

  """Greater than (`>`)."""
  gt: DateTime

  """Greater than or equal to (`>=`)."""
  gte: DateTime

  """Within a set of values."""
  in: [DateTime!]

  """Within a range."""
  between: SearchByScalarDateTimeOperatorBetween

  """Is NULL?"""
  isNull: SearchByFlag

  """Not."""
  not: SearchByFlag
}

"""
Available operators for scalar Float! (only one operator allowed at a time).
"""
input SearchByScalarFloat {
  """Equal (`=`)."""
  eq: Float

  """Less than (`<`)."""
  lt: Float

  """Less than or equal to (`<=`)."""
  lte: Float

  """Greater than (`>`)."""
  gt: Float

  """Greater than or equal to (`>=`)."""
  gte: Float

  """Within a set of values."""
  in: [Float!]

  """Within a range."""
  between: SearchByScalarFloatOperatorBetween

  """Not."""
  not: SearchByFlag
}

input SearchByScalarFloatOperatorBetween {
  min: Float!
  max: Float!
}

"""
Available operators for scalar Float (only one operator allowed at a time).
"""
input SearchByScalarFloatOrNull {
  """Equal (`=`)."""
  eq: Float

  """Less than (`<`)."""
  lt: Float

  """Less than or equal to (`<=`)."""
  lte: Float

  """Greater than (`>`)."""
  gt: Float

  """Greater than or equal to (`>=`)."""
  gte: Float

  """Within a set of values."""
  in: [Float!]

  """Within a range."""
  between: SearchByScalarFloatOperatorBetween

  """Is NULL?"""
  isNull: SearchByFlag

  """Not."""
  not: SearchByFlag
}

"""
Available operators for scalar ID! (only one operator allowed at a time).
"""
input SearchByScalarID {
  """Equal (`=`)."""
  eq: ID

  """Within a set of values."""
  in: [ID!]

  """Not."""
  not: SearchByFlag
}

"""
Available operators for scalar ID (only one operator allowed at a time).
"""
input SearchByScalarIDOrNull {
  """Equal (`=`)."""
  eq: ID

  """Within a set of values."""
  in: [ID!]

  """Is NULL?"""
  isNull: SearchByFlag

  """Not."""
  not: SearchByFlag
}

"""
Available operators for scalar Int! (only one operator allowed at a time).
"""
input SearchByScalarInt {
  """Equal (`=`)."""
  eq: Int

  """Less than (`<`)."""
  lt: Int

  """Less than or equal to (`<=`)."""
  lte: Int

  """Greater than (`>`)."""
  gt: Int

  """Greater than or equal to (`>=`)."""
  gte: Int

  """Within a set of values."""
  in: [Int!]

  """Within a range."""
  between: SearchByScalarIntOperatorBetween

  """Not."""
  not: SearchByFlag
}

input SearchByScalarIntOperatorBetween {
  min: Int!
  max: Int!
}

"""
Available operators for scalar String! (only one operator allowed at a time).
"""
input SearchByScalarString {
  """Equal (`=`)."""
  eq: String

  """Like."""
  like: String

  """Within a set of values."""
  in: [String!]

  """Not."""
  not: SearchByFlag
}

"""
Available operators for scalar String (only one operator allowed at a time).
"""
input SearchByScalarStringOrNull {
  """Equal (`=`)."""
  eq: String

  """Like."""
  like: String

  """Within a set of values."""
  in: [String!]

  """Is NULL?"""
  isNull: SearchByFlag

  """Not."""
  not: SearchByFlag
}

input SendResetPasswordLinkInput {
  email: String!
}

type SendResetPasswordLinkPayload {
  result: Boolean!
}

input SetApplicationLocaleInput {
  locale: String!
}

type SetApplicationLocalePayload {
  result: Boolean!
}

input SignInInput {
  email: String!
  password: String!
}

input SignInOrganizationInput {
  organization_id: ID!
}

type SignInOrganizationPayload {
  """The link where the User should be redirected to Sign In."""
  url: String!
}

type SignInPayload {
  me: Me
}

type SignOutPayload {
  """The link where the User should be redirected to complete Sign Out."""
  url: String
}

input SignUpByInviteInput {
  token: String!
  first_name: String!
  last_name: String!
  password: String!
}

type SignUpByInvitePayload {
  """The link where the User should be redirected to Sign In."""
  url: String!
}

"""Pagination information about the corresponding list of items."""
type SimplePaginatorInfo {
  """Count of available items in the page."""
  count: Int!

  """Current pagination page."""
  currentPage: Int!

  """Index of first item in the current page."""
  firstItem: Int

  """Index of last item in the current page."""
  lastItem: Int

  """Number of items per page in the collection."""
  perPage: Int!
}

"""
Sort clause for input ApplicationLogsSort (only one property allowed at a time).
"""
input SortByClauseApplicationLogsSort {
  """Property clause."""
  duration: SortByDirection

  """Property clause."""
  created_at: SortByDirection

  """Property clause."""
  finished_at: SortByDirection
}

"""
Sort clause for input AssetCoveragesSort (only one property allowed at a time).
"""
input SortByClauseAssetCoveragesSort {
  """Property clause."""
  name: SortByDirection
}

"""
Sort clause for input AssetsSort (only one property allowed at a time).
"""
input SortByClauseAssetsSort {
  """Property clause."""
  id: SortByDirection

  """Property clause."""
  product: SortByClauseProductsSort

  """Property clause."""
  serial_number: SortByDirection

  """Property clause."""
  location: SortByClauseLocationsSort

  """Property clause."""
  customer: SortByClauseCustomersSort

  """Property clause."""
  status: SortByClauseStatusSort

  """Property clause."""
  coverage: SortByClauseAssetCoveragesSort
}

"""
Sort clause for input CitiesSort (only one property allowed at a time).
"""
input SortByClauseCitiesSort {
  """Property clause."""
  id: SortByDirection

  """Property clause."""
  name: SortByDirection

  """Property clause."""
  country: SortByClauseCountriesSort
}

"""
Sort clause for input CountriesSort (only one property allowed at a time).
"""
input SortByClauseCountriesSort {
  """Property clause."""
  id: SortByDirection

  """Property clause."""
  code: SortByDirection

  """Property clause."""
  name: SortByDirection
}

"""
Sort clause for input CustomersSort (only one property allowed at a time).
"""
input SortByClauseCustomersSort {
  """Property clause."""
  name: SortByDirection

  """Property clause."""
  locations_count: SortByDirection

  """Property clause."""
  contacts_count: SortByDirection

  """Property clause."""
  assets_count: SortByDirection

  """Property clause."""
  status: SortByClauseStatusSort

  """Property clause."""
  type: SortByClauseTypesSort

  """Property clause."""
  headquarter: SortByClauseLocationsSort
}

"""
Sort clause for input DocumentsSort (only one property allowed at a time).
"""
input SortByClauseDocumentsSort {
  """Property clause."""
  start: SortByDirection

  """Property clause."""
  end: SortByDirection

  """Property clause."""
  price: SortByDirection
}

"""
Sort clause for input LocationsSort (only one property allowed at a time).
"""
input SortByClauseLocationsSort {
  """Property clause."""
  postcode: SortByDirection

  """Property clause."""
  state: SortByDirection

  """Property clause."""
  line_one: SortByDirection

  """Property clause."""
  line_two: SortByDirection

  """Property clause."""
  country: SortByClauseCountriesSort

  """Property clause."""
  city: SortByClauseCitiesSort
}

"""
Sort clause for input MeSearchSort (only one property allowed at a time).
"""
input SortByClauseMeSearchSort {
  """Property clause."""
  key: SortByDirection

  """Property clause."""
  name: SortByDirection

  """Property clause."""
  created_at: SortByDirection
}

"""
Sort clause for input OrganizationsSort (only one property allowed at a time).
"""
input SortByClauseOrganizationsSort {
  """Property clause."""
  name: SortByDirection

  """Property clause."""
  website_url: SortByDirection

  """Property clause."""
  email: SortByDirection

  """Property clause."""
  status: SortByClauseStatusSort
}

"""
Sort clause for input ProductsSort (only one property allowed at a time).
"""
input SortByClauseProductsSort {
  """Property clause."""
  id: SortByDirection

  """Property clause."""
  sku: SortByDirection

  """Property clause."""
  name: SortByDirection

  """Property clause."""
  eol: SortByDirection

  """Property clause."""
  eos: SortByDirection
}

"""
Sort clause for input StatusSort (only one property allowed at a time).
"""
input SortByClauseStatusSort {
  """Property clause."""
  name: SortByDirection
}

"""Sort clause for input TagsSort (only one property allowed at a time)."""
input SortByClauseTagsSort {
  """Property clause."""
  name: SortByDirection
}

"""
Sort clause for input TypesSort (only one property allowed at a time).
"""
input SortByClauseTypesSort {
  """Property clause."""
  name: SortByDirection
}

"""Sort direction."""
enum SortByDirection {
  asc
  desc
}

type Status {
  id: ID!
  key: String!
  name: String!
}

input StatusSort {
  name: String!
}

type Tag {
  id: ID!
  name: String!
}

input TagsQuery {
  id: ID!
  name: String!
  assets: AssetsQuery
}

input TagsSort {
  name: String!
}

type Translation {
  key: String!
  value: String!
}

input TranslationInput {
  key: String!
  value: String!
}

type Type {
  id: ID!
  key: String!
  name: String!
}

input TypesQuery {
  id: ID!
}

input TypesSort {
  name: String!
}

input UpdateApplicationSettingsInput {
  name: String!
  value: String!
}

type UpdateApplicationSettingsPayload {
  updated: [ApplicationSetting!]!
}

input UpdateApplicationTranslationsInput {
  locale: String!
  translations: [TranslationInput!]!
}

type UpdateApplicationTranslationsPayload {
  updated: [Translation!]!
}

input UpdateClientSettingsInput {
  name: String!
  value: String!
}

type UpdateClientSettingsPayload {
  updated: [ClientSetting!]!
}

input UpdateClientTranslationsInput {
  locale: String!
  translations: [TranslationInput!]!
}

type UpdateClientTranslationsPayload {
  updated: [Translation!]!
}

input UpdateMeProfileInput {
  first_name: String
  last_name: String
  title: String
  academic_title: String
  office_phone: String
  mobile_phone: String
  contact_email: String
  department: String
  job_title: String
  photo: Upload
}

type UpdateMeProfilePayload {
  result: Boolean!
}

input UpdateOrgBranding {
  dark_theme: Boolean
  main_color: String
  secondary_color: String
  logo_url: Upload
  favicon_url: Upload
  welcome_image_url: Upload
  welcome_heading: String
  welcome_underline: String
}

input UpdateOrgInput {
  locale: String
  currency_id: ID
  website_url: String
  email: String
  analytics_code: String
  branding: UpdateOrgBranding
  timezone: String
}

type UpdateOrgPayload {
  result: Boolean!
  organization: Organization!
}

input UpdateOrgRoleInput {
  id: ID!
  name: String
  permissions: [ID!]
}

type UpdateOrgRolePayload {
  updated: Role!
}

input UpdateOrgRolesInput {
  id: ID!
  name: String
  permissions: [ID!]
}

type UpdateOrgRolesPayload {
  updated: [Role!]!
}

"""
Can be used as an argument to upload files using https://github.com/jaydenseric/graphql-multipart-request-spec
"""
scalar Upload

type User {
  id: ID!
  given_name: String!
  family_name: String!
}

type recoverApplicationSettingsPayload {
  result: Boolean!
}
