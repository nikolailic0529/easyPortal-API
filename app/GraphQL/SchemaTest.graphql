type Application {
  name: String!
  version: String!
  maintenance: ApplicationMaintenance
  locale: String!

  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <root> Authenticated user must be a root.
  """
  settings: [ApplicationSetting!]!

  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <root> Authenticated user must be a root.
  """
  settingGroups: [ApplicationSettingGroup!]!

  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <root> Authenticated user must be a root.
  """
  services: [ApplicationService!]!

  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <root> Authenticated user must be a root.
  """
  jobs: [ApplicationJob!]!

  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <root> Authenticated user must be a root.
  """
  translations(locale: String!): [ApplicationTranslation!]!

  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <root> Authenticated user must be a root.
  """
  logs(where: SearchByConditionApplicationLogsQuery, order: [SortByClauseApplicationLogsSort!], limit: Int! = 25, offset: Int! = 0): [ApplicationLog!]!

  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <root> Authenticated user must be a root.
  """
  logsAggregated(where: SearchByConditionApplicationLogsQuery): ApplicationLogsAggregated
}

type ApplicationJob {
  name: String!

  """Settings related to this job."""
  settings: [String!]!

  """Queue name"""
  queue: String!
  description: String
}

type ApplicationJobProgress {
  total: Int
  value: Int!
}

type ApplicationJobState {
  id: ID!
  running: Boolean!
  stopped: Boolean!
  pending_at: DateTime
  running_at: DateTime
}

type ApplicationLog {
  id: ID!
  category: String!
  action: String!

  """
  Possible values:
  * active
  * success
  * failed
  * unknown
  * killed
  * stopped
  """
  status: String
  object_type: String
  object_id: ID

  """Seconds"""
  duration: Float
  created_at: DateTime!
  finished_at: DateTime

  """JSON"""
  statistics: String

  """JSON"""
  context: String
}

"""Aggregated data for type ApplicationLog."""
type ApplicationLogsAggregated {
  count: Int!
}

input ApplicationLogsQuery {
  id: ID!
  category: String!
  action: String!
  status: String
  object_type: String
  object_id: ID
  duration: Float
  created_at: DateTime!
  finished_at: DateTime
}

input ApplicationLogsSort {
  duration: Float
  created_at: DateTime!
  finished_at: DateTime
}

type ApplicationMaintenance {
  enabled: Boolean!
  message: String
  start: DateTime
  end: DateTime
}

type ApplicationMaintenanceMutations {
  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <root> Authenticated user must be a root.
  """
  schedule(input: ApplicationMaintenanceScheduleInput!): ApplicationMaintenanceSchedulePayload

  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <root> Authenticated user must be a root.
  """
  stop: ApplicationMaintenanceStopPayload
}

input ApplicationMaintenanceScheduleInput {
  message: String
  start: DateTime!
  end: DateTime!
}

type ApplicationMaintenanceSchedulePayload {
  result: Boolean!
}

type ApplicationMaintenanceStopPayload {
  result: Boolean!
}

type ApplicationMutations {
  maintenance: ApplicationMaintenanceMutations
}

type ApplicationService {
  name: String!
  enabled: Boolean!

  """Cron expression that determines when service should run if enabled."""
  cron: String

  """Queue name"""
  queue: String!

  """Settings related to this service."""
  settings: [String!]!
  description: String
  state: ApplicationJobState

  """Indicates that Service can be stopped."""
  stoppable: Boolean!

  """Indicates that Service have a progress."""
  progressable: Boolean!
  progress: ApplicationJobProgress
}

type ApplicationSetting {
  name: String!

  """
  Type. Can be standard GraphQL type like Int, Boolean, etc, or a special
  application type.
  """
  type: String!

  """Indicated that the setting is array."""
  array: Boolean!

  """
  Value of the setting. For array it will contain comma-separated values, for
  Boolean: "true" or "false", also can be "null" that means null.
  """
  value: String!

  """Allowed values."""
  values: [ApplicationSettingValues!]

  """
  Indicates that the setting contains sensitive data (eg password), in this case,
  the real value will not be returned.
  """
  secret: Boolean!

  """Default value."""
  default: String!

  """
  Indicates that the setting is read-only due to configs priority and cannot
  be changed.
  """
  readonly: Boolean!

  """Indicates that this setting related to job."""
  job: Boolean!

  """Indicates that this setting related to service."""
  service: Boolean!
  description: String
}

type ApplicationSettingGroup {
  """Group name."""
  name: String!

  """Settings related to this group."""
  settings: [String!]!
}

union ApplicationSettingValues = Type | StringValue

type ApplicationTranslation {
  key: String!
  value: String!
  default: String
}

type Asset {
  id: ID!
  oem_id: ID!
  product_id: ID!
  type_id: ID
  customer_id: ID
  location_id: ID
  reseller_id: ID
  serial_number: String
  warranty_end: Date
  customer: Customer
  location: Location
  oem: Oem!
  product: Product!
  type: Type
  warranties: [AssetWarranty!]!
  reseller: Reseller
  status: Status
  contacts: [Contact!]!
  contacts_count: Int!
  coverages_count: Int!
  coverages: [Coverage!]
  tags: [Tag!]!
  data_quality: String
  quoteRequest: QuoteRequest
  changeRequest: ChangeRequest
  changed_at: DateTime
  synced_at: DateTime!
}

input AssetCoveragesQuery {
  assets: AssetsQuery
}

type AssetMutations {
  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["assets-sync"])> User must be authenticated and have any of these permissions.
  """
  sync(input: AssetSyncInput!): AssetSyncPayload
}

input AssetStatusesQuery {
  assets: AssetsQuery
}

input AssetSyncInput {
  id: [ID!]!
}

type AssetSyncPayload {
  result: Boolean!
  failed: [ID!]!
}

input AssetTypesQuery {
  assets: AssetsQuery
}

input AssetWarrantiesQuery {
  id: ID!
  start: Date
  end: Date
  asset: AssetsQuery
  customer_id: ID
  customer: CustomersQuery
  document_id: ID
  document: DocumentsQuery
  reseller_id: ID
  reseller: ResellersQuery
  service_group_id: ID
  serviceLevels: ServiceLevelsQuery
}

type AssetWarranty {
  id: ID!
  start: Date
  end: Date
  type_id: String
  type: Type
  status_id: String
  status: Status
  description: String
  customer_id: ID
  customer: Customer
  document_id: ID
  document: Document
  reseller_id: ID
  reseller: Reseller
  serviceGroup: ServiceGroup
  serviceLevels: [ServiceLevel!]!
}

"""Aggregated data for type Asset."""
type AssetsAggregated {
  types: [AssetsAggregatedType!]!
  coverages: [AssetsAggregatedCoverage!]!
  count: Int!
}

type AssetsAggregatedCoverage {
  count: Int!
  coverage_id: ID!
  coverage: Type!
}

type AssetsAggregatedType {
  count: Int!
  type_id: ID!
  type: Type!
}

input AssetsQuery {
  id: ID!
  oem_id: ID!
  type_id: ID
  product_id: ID!
  reseller_id: ID!
  customer_id: ID!
  location_id: ID!
  status_id: ID
  serial_number: String
  warranty_end: Date
  location: LocationsQuery
  customer: CustomersQuery
  product: ProductsQuery
  warranties: AssetWarrantiesQuery
  tags: TagsQuery
  coverages: CoveragesQuery
  contracts: DocumentsQuery
  quotes: DocumentsQuery
  coverages_count: Int!
}

input AssetsSearchCustomerSort {
  name: String
}

input AssetsSearchProductSort {
  sku: String
  name: String
}

input AssetsSearchSort {
  serial_number: String
  product: AssetsSearchProductSort
  customer: AssetsSearchCustomerSort
}

input AssetsSort {
  id: ID!
  product: ProductsSort!
  serial_number: String
  warranty_end: Date
  location: LocationsSort!
  customer: CustomersSort!
  status: StatusSort!
}

type Audit {
  id: ID!
  organization_id: ID
  user_id: ID
  object_type: String
  object_id: String
  action: String!
  created_at: DateTime!
  context: String
  user: User
  organization: Organization
}

"""Aggregated data for type Audit."""
type AuditsAggregated {
  count: Int!
}

input AuditsQuery {
  id: ID!
  user_id: String!
  organization_id: ID!
  action: String!
  object_id: String!
  object_type: String!
  created_at: DateTime!
  updated_at: DateTime!
  user: UsersQuery
  organization: OrganizationsQuery
}

input AuditsSort {
  id: ID!
  user_id: String!
  organization_id: ID!
  action: String!
  object_id: String!
  object_type: String!
  created_at: DateTime!
  updated_at: DateTime!
}

type AuthMutations {
  """@require <me> User must be authenticated."""
  signOut: AuthSignOutPayload

  """
  Completes Sign Up.
  
  1. Call `auth { signUpByInvite(token: "...") { result, url } }` and redirect
     User to the `url` if `true`.
  2. If `false` you should provide addition details (`input`) to complete Sign Up
     process.
  
  See also:
  * `mutation { organization(id) { user { invite } }`
  * `mutation { org { user { invite } }`
  
  @require <guest> Current visitor must be a guest.
  """
  signUpByInvite(token: String!, input: AuthSignUpByInviteInput): AuthSignUpByInvitePayload

  """
  Organization Sign In.
  
  Application use standard OAuth 2.0 Authorization Code Grant.
  
  1. Call `signIn` mutation
      ```graphql
      mutation {
        auth {
          organization(id) {
            signIn {
              url
            }
          }
        }
      }
      ```
  2. Redirect the User to `url`
  3. After successful Sign In the User will come back and Client should call
      `authorize` mutation with `code` and `state` to finish the authorization:
  
      ```graphql
        mutation {
          auth {
            organization(id) {
              authorize(input: {code: "...", state: "..."}) {
                result
                me {
                  enabled
                }
              }
            }
          }
        }
      ```
  4. Check result:
      - `result = false` -> something wrong, please try to repeat step (1)
      - `me.enabled = false` -> user disabled or doesn't have access to the
        Organization. In this case, the Client should allow the User to
        Sign Out (so the User may repeat auth process if it want).
  
  @require <guest> Current visitor must be a guest.
  """
  organization(id: ID): AuthOrganizationMutations
}

input AuthOrganizationAuthorizeInput {
  code: String!
  state: String!
}

type AuthOrganizationAuthorizePayload implements Payload {
  result: Boolean!
  me: Me
}

type AuthOrganizationMutations {
  """@require <guest> Current visitor must be a guest."""
  authorize(input: AuthOrganizationAuthorizeInput!): AuthOrganizationAuthorizePayload

  """@require <guest> Current visitor must be a guest."""
  signIn: AuthOrganizationSignInPayload
}

type AuthOrganizationSignInPayload implements Payload {
  result: Boolean!

  """The link where the User should be redirected to Sign In."""
  url: Url!
}

type AuthSignOutPayload implements Payload {
  result: Boolean!

  """The link where the User should be redirected to complete Sign Out."""
  url: Url
}

input AuthSignUpByInviteInput {
  given_name: String!
  family_name: String!
  password: String!
}

type AuthSignUpByInvitePayload implements Payload {
  result: Boolean!

  """The link where the User should be redirected to Sign In."""
  url: Url
}

enum CachedMode {
  """
  In this mode all queries will be cached in addition the resolver will
  use Atomic Locks to reduce server load. The mode is designed for
  heavy/long queries.
  """
  Lock

  """
  In this mode, the query will be cached only if the execution time is
  greater than the threshold.
  """
  Threshold
}

type ChangeRequest {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  user_id: ID!
  user: User!
  subject: String!
  message: String!
  from: String!
  to: [String!]!
  cc: [String!]
  bcc: [String!]
  files: [File!]!
}

input CitiesQuery {
  id: ID!
  name: String!
  country_id: ID!
  assets: AssetsQuery
  customers: CustomersQuery
}

input CitiesSort {
  id: ID!
  name: String!
  country: CountriesSort
}

type City {
  id: ID!
  name: String!
  country_id: ID!
  country: Country!
}

type Client {
  translations(locale: String!): [ClientTranslation!]!
  settings: [ClientSetting!]!
}

type ClientSetting {
  name: String!

  """
  Value of the setting. For array it will contain comma-separated values, for
  Boolean: "true" or "false", also can be "null" that means null.
  """
  value: String!
}

type ClientTranslation {
  key: String!
  value: String!
}

"""The RGB Color (eg `#FF0000`)."""
scalar Color

type Contact {
  id: ID!
  name: String
  email: Email
  phone_number: PhoneNumber

  """Indicates that phone_number in E.164 format"""
  phone_valid: Boolean
  types: [Type]!
}

input ContactTypesQuery {
  contacts: ContactsQuery
}

input ContactsQuery {
  id: ID!
  name: String
  email: Email
  phone_number: PhoneNumber
  phone_valid: Boolean
  types: TypesQuery
  assets: AssetsQuery
  customers: CustomersQuery
}

input ContactsSort {
  name: String
  email: Email
  phone_number: PhoneNumber
  phone_valid: Boolean
}

type ContractMutations {
  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["contracts-sync"])> User must be authenticated and have any of these permissions.
  """
  sync(input: ContractSyncInput!): ContractSyncPayload
}

input ContractStatusesQuery {
  contracts: DocumentsQuery
}

input ContractSyncInput {
  id: [ID!]!
}

type ContractSyncPayload {
  result: Boolean!
  failed: [ID!]!
}

input ContractTypesQuery {
  contracts: DocumentsQuery
}

input CountriesQuery {
  id: ID!
  code: String!
  name: String!
  cities: CitiesQuery
  assets: AssetsQuery
  customers: CustomersQuery
}

input CountriesSort {
  id: ID!
  code: String!
  name: String!
}

type Country {
  id: ID!
  name: String!
  code: String!
}

type Coverage {
  id: ID!
  key: String!
  name: String!
}

input CoveragesQuery {
  id: ID!
}

input CreateContractNoteInput {
  note: String!
  contract_id: String!
  files: [Upload!]
  pinned: Boolean
}

type CreateContractNotePayload {
  created: Note!
}

input CreateMeSearchInput {
  name: String!
  key: String!
  conditions: String!
}

type CreateMeSearchPayload {
  created: MeSearch!
}

input CreateQuoteNoteInput {
  note: String!
  quote_id: String!
  files: [Upload!]
  pinned: Boolean
}

type CreateQuoteNotePayload {
  created: Note!
}

input CreateQuoteRequestAssetsInput {
  asset_id: ID!
  duration_id: ID!
  service_level_id: ID!
}

input CreateQuoteRequestInput {
  oem_id: ID!
  customer_id: ID
  customer_name: String
  type_id: ID!
  message: String
  files: [Upload!]
  contact_name: String!
  contact_phone: PhoneNumber!
  contact_email: Email!
  assets: [CreateQuoteRequestAssetsInput!]
}

type CreateQuoteRequestPayload {
  created: QuoteRequest!
}

input CurrenciesQuery {
  documents: DocumentsQuery
}

type Currency {
  id: ID!
  code: String!
  name: String!
}

type Customer {
  id: ID!
  name: String!
  type: Type!
  type_id: ID!
  statuses: [Status!]!
  contacts_count: Int!
  contacts(where: SearchByConditionContactsQuery, order: [SortByClauseContactsSort!]): [Contact!]!
  locations: [CustomerLocation!]!
  headquarter: CustomerLocation
  changed_at: DateTime
  synced_at: DateTime!
  assets_count: Int!
  locations_count: Int!
  kpi: Kpi

  """
  @require <me(["contracts-view","customers-view"])> User must be authenticated and have any of these permissions.
  """
  contracts(where: SearchByConditionDocumentsQuery, order: [SortByClauseDocumentsSort!], limit: Int! = 25, offset: Int! = 0): [Document!]!

  """
  @require <me(["customers-view","quotes-view"])> User must be authenticated and have any of these permissions.
  """
  quotes(where: SearchByConditionDocumentsQuery, order: [SortByClauseDocumentsSort!], limit: Int! = 25, offset: Int! = 0): [Document!]!

  """
  @require <me(["assets-view","customers-view"])> User must be authenticated and have any of these permissions.
  """
  assets(where: SearchByConditionAssetsQuery, order: [SortByClauseAssetsSort!], limit: Int! = 25, offset: Int! = 0): [Asset!]!

  """
  @require <me(["contracts-view","customers-view"])> User must be authenticated and have any of these permissions.
  """
  contractsAggregated(where: SearchByConditionDocumentsQuery): DocumentsAggregated

  """
  @require <me(["customers-view","quotes-view"])> User must be authenticated and have any of these permissions.
  """
  quotesAggregated(where: SearchByConditionDocumentsQuery): DocumentsAggregated

  """
  @require <me(["assets-view","customers-view"])> User must be authenticated and have any of these permissions.
  """
  assetsAggregated(where: SearchByConditionAssetsQuery): AssetsAggregated
}

type CustomerLocation {
  location_id: ID!
  location: Location
  types: [Type!]!
}

input CustomerLocationsQuery {
  location_id: ID!
  location: LocationsQuery!
  types: TypesQuery
}

input CustomerLocationsSort {
  location: LocationsQuery!
}

type CustomerMutations {
  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["customers-sync"])> User must be authenticated and have any of these permissions.
  """
  sync(input: CustomerSyncInput!): CustomerSyncPayload
}

input CustomerStatusesQuery {
  customers: CustomersQuery
}

input CustomerSyncInput {
  id: [ID!]!
}

type CustomerSyncPayload {
  result: Boolean!
  failed: [ID!]!
}

input CustomerTypesQuery {
  customers: CustomersQuery
}

"""Aggregated data for type Customer."""
type CustomersAggregated {
  assets: Int!
  count: Int!
}

input CustomersQuery {
  id: ID!
  name: String!
  type_id: ID!
  statuses: StatusesQuery!
  statuses_count: Int!
  locations: CustomerLocationsQuery
  headquarter: CustomerLocationsQuery
  contacts_count: Int!
  contacts: ContactsQuery
  assets: AssetsQuery
  contracts: DocumentsQuery
  quotes: DocumentsQuery
}

input CustomersSearchHeadquarterCitySort {
  name: String
}

input CustomersSearchHeadquarterSort {
  city: CustomersSearchHeadquarterCitySort
}

input CustomersSearchSort {
  name: String
  headquarter: CustomersSearchHeadquarterSort
}

input CustomersSort {
  name: String!
  locations_count: Int!
  contacts_count: Int!
  assets_count: Int!
  type: TypesSort!
  headquarter: CustomerLocationsSort!
}

"""ISO 8601 Date string with format Y-m-d (`2011-05-23`)."""
scalar Date

"""
ISO 8601 Date Time string with format `Y-m-dTH:i:sP` (`2018-05-23T13:43:32+00:00`).
"""
scalar DateTime

input DeleteApplicationTranslationsInput {
  locale: String!
  keys: [String!]!
}

type DeleteApplicationTranslationsPayload {
  deleted: [String!]!
}

input DeleteClientSettingsInput {
  names: [String!]!
}

type DeleteClientSettingsPayload {
  deleted: [String!]!
}

input DeleteClientTranslationsInput {
  locale: String!
  keys: [String!]!
}

type DeleteClientTranslationsPayload {
  deleted: [String!]!
}

input DeleteContractNoteInput {
  id: ID!
}

type DeleteContractNotePayload {
  deleted: Boolean!
}

input DeleteMeSearchInput {
  id: ID!
}

type DeleteMeSearchPayload {
  deleted: Boolean!
}

input DeleteQuoteNoteInput {
  id: ID!
}

type DeleteQuoteNotePayload {
  deleted: Boolean!
}

input DispatchApplicationServiceInput {
  """Name of the service."""
  name: String!

  """If true the service will be executed right now."""
  immediately: Boolean! = false
}

type DispatchApplicationServicePayload {
  result: Boolean!
}

type Distributor {
  id: ID!
  name: String!
}

input DistributorsQuery {
  id: ID!
  name: String!
}

type Document {
  id: ID!
  oem_id: ID!
  type_id: ID!
  customer_id: ID
  number: String!
  start: Date
  end: Date
  price: Float
  currency_id: ID
  currency: Currency
  customer: Customer
  oem: Oem!
  oem_said: String
  oemGroup: OemGroup
  reseller_id: ID
  reseller: Reseller
  type: Type!
  statuses: [Status!]!
  statuses_count: Int!
  is_contract: Boolean!
  is_quote: Boolean!
  entries(where: SearchByConditionDocumentEntriesQuery): [DocumentEntry!]!
  entries_count: Int!
  language_id: ID
  language: Language
  contacts(where: SearchByConditionContactsQuery, order: [SortByClauseContactsSort!]): [Contact!]!
  contacts_count: Int!
  distributor_id: ID
  distributor: Distributor
  assets_count: Int
  notes(where: SearchByConditionNotesQuery, order: [SortByClauseNotesSort!], limit: Int! = 25, offset: Int! = 0): [Note!]!
  changed_at: DateTime
  synced_at: DateTime!
  notesAggregated(where: SearchByConditionNotesQuery): NotesAggregated
}

input DocumentEntriesQuery {
  id: ID!
  document_id: ID!
  asset_id: ID!
  asset: AssetsQuery
  net_price: Float
  list_price: Float
  discount: Float
  renewal: Float
  serial_number: String
  product_id: ID!
  product: ProductsQuery
  service_group_id: ID
  service_level_id: ID
  currency_id: ID
}

type DocumentEntry {
  id: ID!
  document_id: ID!
  net_price: Float
  list_price: Float
  discount: Float
  renewal: Float
  serial_number: String
  product_id: ID!
  product: Product!
  service_group_id: ID
  serviceGroup: ServiceGroup
  service_level_id: ID
  serviceLevel: ServiceLevel
  currency_id: ID
  currency: Currency
  asset_id: ID!
  asset: Asset
}

input DocumentStatusesQuery {
  documents: DocumentsQuery
}

input DocumentTypesQuery {
  documents: DocumentsQuery
}

"""Aggregated data for type Document."""
type DocumentsAggregated {
  prices: [DocumentsAggregatedPrice!]!
  count: Int!
}

type DocumentsAggregatedPrice {
  count: Int!
  amount: Float!
  currency_id: ID
  currency: Currency
}

input DocumentsQuery {
  id: ID!
  oem_id: ID!
  type_id: ID!
  number: String!
  start: Date!
  end: Date!
  price: Float
  currency_id: ID
  language_id: ID
  serial_number: String
  customer_id: ID
  customer: CustomersQuery
  reseller_id: ID
  reseller: ResellersQuery
  distributor_id: ID
  distributor: DistributorsQuery
  entries: DocumentEntriesQuery
  entries_count: Int!
  contacts: ContactsQuery
  contacts_count: Int!
  statuses: StatusesQuery
  statuses_count: Int!
  assets: AssetsQuery
}

input DocumentsSearchCustomerSort {
  name: String
}

input DocumentsSearchEntriesProductSort {
  sku: String
  name: String
}

input DocumentsSearchEntriesSort {
  serial_number: String
  product: DocumentsSearchEntriesProductSort
}

input DocumentsSearchSort {
  number: String
  start: String
  end: String
  price: String
  customer: DocumentsSearchCustomerSort
  entries: DocumentsSearchEntriesSort
}

input DocumentsSort {
  id: ID!
  start: Date!
  end: Date!
  price: Float
}

"""The Email."""
scalar Email

type File {
  id: ID!
  name: String!
  url: Url!
  size: Int!
}

"""Geohash (https://en.wikipedia.org/wiki/Geohash)"""
scalar Geohash

input ImportOemsInput {
  file: Upload!
}

type ImportOemsPayload {
  result: Boolean!
}

type Invitation {
  id: ID!
  organization_id: ID!
  role_id: ID!
  role: Role
  team_id: ID
  team: Team
  email: Email!
  used_at: DateTime
  expired_at: DateTime!
}

type Kpi {
  assets_total: Int!
  assets_active: Int!
  assets_active_percent: Float!
  assets_active_on_contract: Int!
  assets_active_on_warranty: Int!
  assets_active_exposed: Int!
  customers_active: Int!
  customers_active_new: Int!
  contracts_active: Int!
  contracts_active_amount: Float!
  contracts_active_new: Int!
  contracts_expiring: Int!
  contracts_expired: Int!
  quotes_active: Int!
  quotes_active_amount: Float!
  quotes_active_new: Int!
  quotes_expiring: Int!
  quotes_expired: Int!
  quotes_ordered: Int!
  quotes_accepted: Int!
  quotes_requested: Int!
  quotes_received: Int!
  quotes_rejected: Int!
  quotes_awaiting: Int!
  service_revenue_total_amount: Float!
  service_revenue_total_amount_change: Float!
}

input KpiSort {
  assets_total: Int!
  assets_active: Int!
  assets_active_percent: Float!
  assets_active_on_contract: Int!
  assets_active_on_warranty: Int!
  assets_active_exposed: Int!
  customers_active: Int!
  customers_active_new: Int!
  contracts_active: Int!
  contracts_active_amount: Float!
  contracts_active_new: Int!
  contracts_expiring: Int!
  contracts_expired: Int!
  quotes_active: Int!
  quotes_active_amount: Float!
  quotes_active_new: Int!
  quotes_expiring: Int!
  quotes_expired: Int!
  quotes_ordered: Int!
  quotes_accepted: Int!
  quotes_requested: Int!
  quotes_received: Int!
  quotes_rejected: Int!
  quotes_awaiting: Int!
  service_revenue_total_amount: Float!
  service_revenue_total_amount_change: Float!
}

type Language {
  id: ID!
  code: String!
  name: String!
}

input LanguagesQuery {
  documents: DocumentsQuery
}

type Location {
  id: ID!
  postcode: String!
  state: String!
  line_one: String!
  line_two: String!
  latitude: Float
  longitude: Float
  city: City!
  city_id: ID!
  country: Country!
  country_id: ID!
}

input LocationTypesQuery {
  locations: LocationsQuery
}

input LocationsQuery {
  id: ID!
  postcode: String!
  state: String!
  line_one: String!
  line_two: String!
  latitude: Float
  longitude: Float
  city: CitiesQuery
  city_id: ID!
  country: CountriesQuery
  country_id: ID!
  assets: CustomersQuery
  customers: CustomersQuery
}

input LocationsSort {
  postcode: String!
  state: String!
  line_one: String!
  line_two: String!
  country: CountriesSort!
  city: CitiesSort!
}

type Map {
  latitude: Float!
  longitude: Float!
  boundingBox: MapBoundingBox!
  locations_ids: [ID!]!
  customers_ids: [ID!]!
  customers_count: Int!
}

type MapBoundingBox {
  southLatitude: Float!
  northLatitude: Float!
  westLongitude: Float!
  eastLongitude: Float!
}

input MapQuery {
  postcode: String!
  state: String!
  country_id: ID!
  country: CountriesQuery
  city_id: ID!
  city: CitiesQuery
}

type Me {
  id: ID!
  email: Email!
  given_name: String!
  family_name: String!
  locale: String
  timezone: String
  homepage: String
  photo: Url
  title: String
  academic_title: String
  office_phone: PhoneNumber
  mobile_phone: PhoneNumber
  contact_email: Email
  job_title: String
  company: String
  phone: PhoneNumber
  permissions: [String!]
  team: Team
  root: Boolean!
  enabled: Boolean!
  previous_sign_in: DateTime
  searches(where: SearchByConditionMeSearchQuery, order: [SortByClauseMeSearchSort!]): [MeSearch!]!
}

type MeMutations {
  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me> User must be authenticated.
  """
  update(input: MeUpdateInput!): MeUpdatePayload
}

type MeSearch {
  id: ID!
  key: String!
  name: String!
  conditions: String!
  created_at: DateTime!
}

input MeSearchQuery {
  id: ID!
  key: String!
  name: String!
  created_at: DateTime!
}

input MeSearchSort {
  key: String!
  name: String!
  created_at: DateTime!
}

input MeUpdateInput {
  given_name: String
  family_name: String
  title: String
  academic_title: String
  office_phone: PhoneNumber
  mobile_phone: PhoneNumber
  contact_email: Email
  job_title: String
  photo: Upload
  homepage: String
  locale: String
  timezone: String
  team_id: ID
}

type MeUpdatePayload implements Payload {
  result: Boolean!
  me: Me!
}

type Mutation {
  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["contracts-view","customers-view"])> User must be authenticated and have any of these permissions.
  """
  createContractNote(input: CreateContractNoteInput!): CreateContractNotePayload

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["customers-view","quotes-view"])> User must be authenticated and have any of these permissions.
  """
  createQuoteNote(input: CreateQuoteNoteInput!): CreateQuoteNotePayload

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["requests-quote-add"])> User must be authenticated and have any of these permissions.
  """
  createQuoteRequest(input: CreateQuoteRequestInput!): CreateQuoteRequestPayload

  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <root> Authenticated user must be a root.
  """
  deleteClientSettings(input: DeleteClientSettingsInput!): DeleteClientSettingsPayload

  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <root> Authenticated user must be a root.
  """
  deleteClientTranslations(input: DeleteClientTranslationsInput!): DeleteClientTranslationsPayload

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["contracts-view","customers-view","org-administer"])> User must
  be authenticated and have any of these permissions.
  """
  deleteContractNote(input: DeleteContractNoteInput!): DeleteContractNotePayload

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["customers-view","org-administer","quotes-view"])> User must be
  authenticated and have any of these permissions.
  """
  deleteQuoteNote(input: DeleteQuoteNoteInput!): DeleteQuoteNotePayload

  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <root> Authenticated user must be a root.
  """
  importOems(input: ImportOemsInput!): ImportOemsPayload

  """
  Force delete all custom settings, may be useful to restore the corrupted file.
  
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <root> Authenticated user must be a root.
  """
  recoverClientSettings: RecoverClientSettingsPayload

  """
  Force delete all client translations for a given locale, may be useful to
  restore the corrupted file.
  
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <root> Authenticated user must be a root.
  """
  recoverClientTranslations(input: RecoverClientTranslationsInput!): RecoverClientTranslationsPayload

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["requests-asset-change"])> User must be authenticated and have any of these permissions.
  """
  requestAssetChange(input: RequestAssetChangeInput!): RequestAssetChangePayload

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["requests-contract-change"])> User must be authenticated and have any of these permissions.
  """
  requestContractChange(input: RequestContractChangeInput!): RequestContractChangePayload

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["requests-customer-change"])> User must be authenticated and have any of these permissions.
  """
  requestCustomerChange(input: RequestCustomerChangeInput!): RequestCustomerChangePayload

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["requests-quote-change"])> User must be authenticated and have any of these permissions.
  """
  requestQuoteChange(input: RequestQuoteChangeInput!): RequestQuoteChangePayload

  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <root> Authenticated user must be a root.
  """
  updateClientSettings(input: [UpdateClientSettingsInput!]!): UpdateClientSettingsPayload

  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <root> Authenticated user must be a root.
  """
  updateClientTranslations(input: UpdateClientTranslationsInput!): UpdateClientTranslationsPayload

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["contracts-view","customers-view"])> User must be authenticated and have any of these permissions.
  """
  updateContractNote(input: UpdateContractNoteInput!): UpdateContractNotePayload

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["customers-view","quotes-view"])> User must be authenticated and have any of these permissions.
  """
  updateQuoteNote(input: UpdateQuoteNoteInput!): UpdateQuoteNotePayload
  application: ApplicationMutations

  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <root> Authenticated user must be a root.
  """
  deleteApplicationTranslations(input: DeleteApplicationTranslationsInput!): DeleteApplicationTranslationsPayload

  """
  Dispatch/Run application service.
  
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <root> Authenticated user must be a root.
  """
  dispatchApplicationService(input: DispatchApplicationServiceInput!): DispatchApplicationServicePayload

  """
  Force delete all custom settings, may be useful to restore the corrupted file.
  
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <root> Authenticated user must be a root.
  """
  recoverApplicationSettings: recoverApplicationSettingsPayload

  """
  Force delete all translations for a given locale, may be useful to restore the
  corrupted file.
  
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <root> Authenticated user must be a root.
  """
  recoverApplicationTranslations(input: RecoverApplicationTranslationsInput!): RecoverApplicationTranslationsPayload

  """
  Reset application service progress.
  
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <root> Authenticated user must be a root.
  """
  resetApplicationService(input: ResetApplicationServiceInput!): ResetApplicationServicePayload
  setApplicationLocale(input: SetApplicationLocaleInput!): SetApplicationLocalePayload

  """
  Stop application service.
  
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <root> Authenticated user must be a root.
  """
  stopApplicationService(input: StopApplicationServiceInput!): StopApplicationServicePayload

  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <root> Authenticated user must be a root.
  """
  updateApplicationSettings(input: [UpdateApplicationSettingsInput!]!): UpdateApplicationSettingsPayload

  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <root> Authenticated user must be a root.
  """
  updateApplicationTranslations(input: UpdateApplicationTranslationsInput!): UpdateApplicationTranslationsPayload
  asset: AssetMutations
  auth: AuthMutations

  """
  Reset password.
  
  @require <guest> Current visitor must be a guest.
  """
  resetPassword(input: ResetPasswordInput): ResetPasswordPayload

  """
  Send reset password link if local user with given email exists.
  
  @require <guest> Current visitor must be a guest.
  """
  sendResetPasswordLink(input: SendResetPasswordLinkInput): SendResetPasswordLinkPayload

  """
  Sign In for local users.
  
  @require <guest> Current visitor must be a guest.
  """
  signIn(input: SignInInput): SignInPayload
  contract: ContractMutations
  customer: CustomerMutations

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me> User must be authenticated.
  """
  me: MeMutations

  """@require <me> User must be authenticated."""
  createMeSearch(input: CreateMeSearchInput!): CreateMeSearchPayload

  """@require <me> User must be authenticated."""
  deleteMeSearch(input: DeleteMeSearchInput!): DeleteMeSearchPayload

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me> User must be authenticated.
  """
  updateMeEmail(input: UpdateMeEmailInput!): UpdateMeEmailPayload

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me> User must be authenticated.
  """
  updateMePassword(input: UpdateMePasswordInput!): UpdateMePasswordPayload

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["org-administer"])> User must be authenticated and have any of these permissions.
  """
  org: OrgMutations

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["org-administer"])> User must be authenticated and have any of these permissions.
  """
  requestOrgChange(input: RequestOrgChangeInput!): RequestOrgChangePayload

  """
  Send reset password link to the user.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["org-administer"])> User must be authenticated and have any of these permissions.
  """
  resetOrgUserPassword(input: ResetOrgUserPasswordInput!): ResetOrgUserPasswordPayload

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["org-administer"])> User must be authenticated and have any of these permissions.
  """
  updateOrg(input: UpdateOrgInput!): UpdateOrgPayload

  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <me(["administer"])> User must be authenticated and have any of these permissions.
  """
  organization(id: ID): OrganizationMutations
  quote: QuoteMutations

  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <me(["administer"])> User must be authenticated and have any of these permissions.
  """
  user(id: ID): UserMutations
}

type Note {
  id: ID!
  pinned: Boolean!
  note: String!
  created_at: DateTime!
  updated_at: DateTime!
  user_id: ID!
  user: User!
  files: [File!]!
}

"""Aggregated data for type Note."""
type NotesAggregated {
  count: Int!
}

input NotesQuery {
  note: String!
  pinned: Boolean!
  user_id: ID!
  user: UsersQuery
}

input NotesSort {
  user_id: ID!
  pinned: Boolean!
  created_at: DateTime!
  updated_at: DateTime!
}

type Oem {
  id: ID!
  key: String!
  name: String!
}

type OemGroup {
  id: ID!
  key: String!
  name: String!
}

input OemsQuery {
  assets: AssetsQuery
  documents: DocumentsQuery
}

type OrgMutations {
  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["org-administer"])> User must be authenticated and have any of these permissions.
  """
  role(id: ID): OrgRoleMutations

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["org-administer"])> User must be authenticated and have any of these permissions.
  """
  user(id: ID): OrgUserMutations
}

input OrgRoleCreateInput {
  name: String!
  permissions: [ID!]!
}

type OrgRoleCreatePayload implements Payload {
  result: Boolean!
  role: Role!
}

type OrgRoleDeletePayload implements Payload {
  result: Boolean!
}

type OrgRoleMutations {
  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["org-administer"])> User must be authenticated and have any of these permissions.
  """
  create(input: OrgRoleCreateInput!): OrgRoleCreatePayload

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["org-administer"])> User must be authenticated and have any of these permissions.
  """
  delete: OrgRoleDeletePayload

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["org-administer"])> User must be authenticated and have any of these permissions.
  """
  update(input: OrgRoleUpdateInput!): OrgRoleUpdatePayload
}

input OrgRoleUpdateInput {
  name: String
  permissions: [ID!]
}

type OrgRoleUpdatePayload implements Payload {
  result: Boolean!
  role: Role!
}

input OrgUserInviteInput {
  email: Email!
  role_id: ID!
  team_id: ID
}

type OrgUserInvitePayload implements Payload {
  result: Boolean!
}

type OrgUserMutations {
  """
  Adds user into Organization and send invite to join.
  
  To complete Sign Up the `mutation { auth { signUpByInvite } }` should be used.
  
  Please note that mutation will return `false` when:
  - User is already a member of the organization
  - User is disabled/banned
  - User is Root
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["org-administer"])> User must be authenticated and have any of these permissions.
  """
  invite(input: OrgUserInviteInput!): OrgUserInvitePayload

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["org-administer"])> User must be authenticated and have any of these permissions.
  """
  update(input: OrgUserUpdateInput!): OrgUserUpdatePayload
}

input OrgUserUpdateInput {
  enabled: Boolean
  role_id: ID
  team_id: ID
  given_name: String
  family_name: String
  title: String
  academic_title: String
  office_phone: PhoneNumber
  mobile_phone: PhoneNumber
  contact_email: Email
  job_title: String
  photo: Upload
  homepage: String
  locale: String
  timezone: String
}

type OrgUserUpdatePayload implements Payload {
  result: Boolean!
  user: User!
}

type Organization {
  id: ID!
  name: String!
  root: Boolean!
  locale: String
  website_url: Url
  email: Email
  currency_id: ID
  currency: Currency
  analytics_code: String
  timezone: String
  branding: OrganizationBranding!
  kpi: Kpi
  statuses: [Status!]!
  locations: [ResellerLocation!]!
  contacts: [Contact!]!
  headquarter: ResellerLocation

  """
  @require <me(["administer","org-administer"])> User must be authenticated and have any of these permissions.
  """
  users(where: SearchByConditionUsersQuery, order: [SortByClauseUsersSort!], limit: Int! = 25, offset: Int! = 0): [User!]!

  """
  @require <me(["administer"])> User must be authenticated and have any of these permissions.
  """
  keycloak_scope: String

  """
  @require <me(["administer","org-administer"])> User must be authenticated and have any of these permissions.
  """
  roles: [Role!]!

  """
  @require <me(["administer","org-administer"])> User must be authenticated and have any of these permissions.
  """
  audits(where: SearchByConditionAuditsQuery, order: [SortByClauseAuditsSort!], limit: Int! = 25, offset: Int! = 0): [Audit!]!

  """
  @require <me(["administer","org-administer"])> User must be authenticated and have any of these permissions.
  """
  usersAggregated(where: SearchByConditionUsersQuery): UsersAggregated

  """
  @require <me(["administer","org-administer"])> User must be authenticated and have any of these permissions.
  """
  auditsAggregated(where: SearchByConditionAuditsQuery): AuditsAggregated
}

type OrganizationBranding {
  dark_theme: Boolean
  main_color: Color
  secondary_color: Color
  logo_url: Url
  favicon_url: Url
  default_main_color: Color
  default_secondary_color: Color
  default_logo_url: Url
  default_favicon_url: Url
  welcome_image_url: Url
  welcome_heading: String
  welcome_underline: String
  dashboard_image_url: Url
}

type OrganizationMutations {
  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <me(["administer"])> User must be authenticated and have any of these permissions.
  """
  user(id: ID): OrganizationUserMutations
}

input OrganizationUserInviteInput {
  email: Email!
  role_id: ID!
  team_id: ID
}

type OrganizationUserInvitePayload implements Payload {
  result: Boolean!
}

type OrganizationUserMutations {
  """
  Adds user into Organization and send invite to join.
  
  To complete Sign Up the `mutation { auth { signUpByInvite } }` should be used.
  
  Please note that mutation will return `false` when:
  - User is already a member of the organization
  - User is disabled/banned
  - User is Root
  
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <me(["administer"])> User must be authenticated and have any of these permissions.
  """
  invite(input: OrganizationUserInviteInput!): OrganizationUserInvitePayload
}

"""Aggregated data for type Organization."""
type OrganizationsAggregated {
  count: Int!
}

input OrganizationsQuery {
  id: ID!
  name: String!
  website_url: Url
  email: Email
  statuses: StatusesQuery
  contacts: ContactsQuery
  locations: ResellerLocationsQuery
  headquarter: ResellerLocationsQuery
}

input OrganizationsSort {
  name: String!
  website_url: Url
  email: Email
  kpi: KpiSort!
}

interface Payload {
  result: Boolean!
}

type Permission {
  id: ID!
  key: String!
  name: String!
  description: String!
}

"""Phone number in E.164 format (https://en.wikipedia.org/wiki/E.164)."""
scalar PhoneNumber

type Product {
  id: ID!
  oem_id: ID!
  sku: String!
  name: String!
  eol: Date
  eos: Date
  oem: Oem!
}

input ProductsQuery {
  id: ID!
  oem_id: ID!
  sku: String!
  name: String!
}

input ProductsSort {
  id: ID!
  sku: String!
  name: String!
  eol: Date
  eos: Date
}

type Query {
  """Authenticated user or `null` otherwise."""
  me: Me

  """Current organization."""
  org: Organization

  """Application information."""
  application: Application!

  """Client data (settings, translations, etc)."""
  client: Client

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["assets-view","contracts-view","customers-view","quotes-view"])>
  User must be authenticated and have any of these permissions.
  """
  search(search: SearchString!, limit: Int! = 25, offset: Int! = 0): [SearchResult!]!

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["customers-view"])> User must be authenticated and have any of these permissions.
  """
  map(
    """Zoom level (1-12)."""
    level: Int!

    """Only points inside these boundaries will be returned."""
    boundaries: [Geohash!]

    """Additional filters for the points."""
    locations: SearchByConditionMapQuery

    """Assets filters."""
    assets: SearchByConditionAssetsQuery
  ): [Map!]!

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["administer","org-administer"])> User must be authenticated and have any of these permissions.
  """
  permissions: [Permission!]!

  """
  List of all possible teams.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["administer","org-administer"])> User must be authenticated and have any of these permissions.
  """
  teams: [Team!]!

  """
  List of all organizations.
  
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <me(["administer"])> User must be authenticated and have any of these permissions.
  """
  organizations(where: SearchByConditionOrganizationsQuery, order: [SortByClauseOrganizationsSort!], limit: Int! = 25, offset: Int! = 0): [Organization!]!

  """
  Organization.
  
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <me(["administer"])> User must be authenticated and have any of these permissions.
  """
  organization(id: ID!): Organization

  """
  List of all organizations audits.
  
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <me(["administer"])> User must be authenticated and have any of these permissions.
  """
  audits(where: SearchByConditionAuditsQuery, order: [SortByClauseAuditsSort!], limit: Int! = 25, offset: Int! = 0): [Audit!]!

  """
  List of all users.
  
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <me(["administer"])> User must be authenticated and have any of these permissions.
  """
  users(where: SearchByConditionUsersQuery, order: [SortByClauseUsersSort!], limit: Int! = 25, offset: Int! = 0): [User!]!

  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <me(["administer"])> User must be authenticated and have any of these permissions.
  """
  user(id: ID!): User

  """
  List of all shared roles.
  
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <me(["administer"])> User must be authenticated and have any of these permissions.
  """
  roles: [Role!]!

  """
  List of all possible asset types.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["assets-view","customers-view"])> User must be authenticated and have any of these permissions.
  """
  assetTypes(where: SearchByConditionAssetTypesQuery): [Type!]!

  """
  List of all possible asset statuses.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["assets-view","customers-view"])> User must be authenticated and have any of these permissions.
  """
  assetStatuses(where: SearchByConditionAssetStatusesQuery): [Status!]!

  """
  List of all possible asset coverages.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["assets-view","customers-view"])> User must be authenticated and have any of these permissions.
  """
  assetCoverages(where: SearchByConditionAssetCoveragesQuery): [Coverage!]!

  """
  List of all assets
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["assets-view","customers-view"])> User must be authenticated and have any of these permissions.
  """
  assets(where: SearchByConditionAssetsQuery, order: [SortByClauseAssetsSort!], limit: Int! = 25, offset: Int! = 0): [Asset!]!

  """
  Asset.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["assets-view","customers-view"])> User must be authenticated and have any of these permissions.
  """
  asset(id: ID!): Asset

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["assets-view","customers-view"])> User must be authenticated and have any of these permissions.
  """
  assetsSearch(search: SearchString!, order: [SortByClauseAssetsSearchSort!], limit: Int! = 25, offset: Int! = 0): [Asset!]!

  """
  List of all possible contract types.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["contracts-view","customers-view"])> User must be authenticated and have any of these permissions.
  """
  contractTypes(where: SearchByConditionContractTypesQuery): [Type!]!

  """
  List of all possible contract statuses.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["contracts-view","customers-view"])> User must be authenticated and have any of these permissions.
  """
  contractStatuses(where: SearchByConditionContractStatusesQuery): [Status!]!

  """
  List of all contracts.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["contracts-view","customers-view"])> User must be authenticated and have any of these permissions.
  """
  contracts(where: SearchByConditionDocumentsQuery, order: [SortByClauseDocumentsSort!], limit: Int! = 25, offset: Int! = 0): [Document!]!

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["contracts-view","customers-view"])> User must be authenticated and have any of these permissions.
  """
  contractsSearch(search: String!, order: [SortByClauseDocumentsSearchSort!], limit: Int! = 25, offset: Int! = 0): [Document!]!

  """
  Contract.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["contracts-view","customers-view"])> User must be authenticated and have any of these permissions.
  """
  contract(id: ID!): Document

  """
  List of all possible customer statuses.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["customers-view"])> User must be authenticated and have any of these permissions.
  """
  customerStatuses(where: SearchByConditionCustomerStatusesQuery): [Status!]!

  """
  List of all possible customer types.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["customers-view"])> User must be authenticated and have any of these permissions.
  """
  customerTypes(where: SearchByConditionCustomerTypesQuery): [Type!]!

  """
  List of Customers.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["customers-view"])> User must be authenticated and have any of these permissions.
  """
  customers(where: SearchByConditionCustomersQuery, order: [SortByClauseCustomersSort!], limit: Int! = 25, offset: Int! = 0): [Customer!]!

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["customers-view"])> User must be authenticated and have any of these permissions.
  """
  customersSearch(search: SearchString!, order: [SortByClauseCustomersSearchSort!], limit: Int! = 25, offset: Int! = 0): [Customer!]!

  """
  Customer.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["customers-view"])> User must be authenticated and have any of these permissions.
  """
  customer(id: ID!): Customer

  """
  List of all OEMs
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me> User must be authenticated.
  """
  oems(where: SearchByConditionOemsQuery): [Oem!]!

  """
  List of all currencies.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me> User must be authenticated.
  """
  currencies(where: SearchByConditionCurrenciesQuery): [Currency!]!

  """
  List of all languages.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me> User must be authenticated.
  """
  languages(where: SearchByConditionLanguagesQuery): [Language!]!

  """
  List of all countries.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me> User must be authenticated.
  """
  countries(where: SearchByConditionCountriesQuery): [Country!]!

  """
  List of all cities.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me> User must be authenticated.
  """
  cities(where: SearchByConditionCitiesQuery): [City!]!

  """
  List of all possible location types.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me> User must be authenticated.
  """
  locationTypes(where: SearchByConditionLocationTypesQuery): [Type!]!

  """
  List of all possible contact types.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me> User must be authenticated.
  """
  contactTypes(where: SearchByConditionContactTypesQuery): [Type!]!

  """
  List of all possible tags.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me> User must be authenticated.
  """
  tags(where: SearchByConditionTagsQuery, order: [SortByClauseTag!]): [Tag!]!

  """
  List of all Service Groups.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me> User must be authenticated.
  """
  serviceGroups(where: SearchByConditionServiceGroupsQuery): [ServiceGroup!]!

  """
  List of all Service Levels.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me> User must be authenticated.
  """
  serviceLevels(where: SearchByConditionServiceLevelsQuery): [ServiceLevel!]!

  """
  List of all Timezones
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me> User must be authenticated.
  """
  timezones: [String!]!

  """
  List of all possible quote request durations.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me> User must be authenticated.
  """
  quoteRequestDurations: [QuoteRequestDuration!]!

  """
  List of all possible document types.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["contracts-view","customers-view","quotes-view"])> User must be
  authenticated and have any of these permissions.
  """
  documentTypes(where: SearchByConditionDocumentTypesQuery): [Type!]!

  """
  List of all possible document statuses.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["contracts-view","customers-view","quotes-view"])> User must be
  authenticated and have any of these permissions.
  """
  documentStatuses(where: SearchByConditionDocumentStatusesQuery): [Status!]!

  """
  List of all documents.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["contracts-view","customers-view","quotes-view"])> User must be
  authenticated and have any of these permissions.
  """
  documents(where: SearchByConditionDocumentsQuery, order: [SortByClauseDocumentsSort!], limit: Int! = 25, offset: Int! = 0): [Document!]!

  """
  List of all possible quote types.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["customers-view","quotes-view"])> User must be authenticated and have any of these permissions.
  """
  quoteTypes(where: SearchByConditionQuoteTypesQuery): [Type!]!

  """
  List of all possible quote statuses.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["customers-view","quotes-view"])> User must be authenticated and have any of these permissions.
  """
  quoteStatuses(where: SearchByConditionQuoteStatusesQuery): [Status!]!

  """
  List of all quotes.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["customers-view","quotes-view"])> User must be authenticated and have any of these permissions.
  """
  quotes(where: SearchByConditionDocumentsQuery, order: [SortByClauseDocumentsSort!], limit: Int! = 25, offset: Int! = 0): [Document!]!

  """
  Quote.
  
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["customers-view","quotes-view"])> User must be authenticated and have any of these permissions.
  """
  quote(id: ID!): Document

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["customers-view","quotes-view"])> User must be authenticated and have any of these permissions.
  """
  quotesSearch(search: String!, order: [SortByClauseDocumentsSearchSort!], limit: Int! = 25, offset: Int! = 0): [Document!]!

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["assets-view","contracts-view","customers-view","quotes-view"])>
  User must be authenticated and have any of these permissions.
  """
  searchAggregated(search: SearchString!): SearchResultsAggregated

  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <me(["administer"])> User must be authenticated and have any of these permissions.
  """
  organizationsAggregated(where: SearchByConditionOrganizationsQuery): OrganizationsAggregated

  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <me(["administer"])> User must be authenticated and have any of these permissions.
  """
  auditsAggregated(where: SearchByConditionAuditsQuery): AuditsAggregated

  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <me(["administer"])> User must be authenticated and have any of these permissions.
  """
  usersAggregated(where: SearchByConditionUsersQuery): UsersAggregated

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["assets-view","customers-view"])> User must be authenticated and have any of these permissions.
  """
  assetsAggregated(where: SearchByConditionAssetsQuery): AssetsAggregated

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["assets-view","customers-view"])> User must be authenticated and have any of these permissions.
  """
  assetsSearchAggregated(search: SearchString!): AssetsAggregated

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["contracts-view","customers-view"])> User must be authenticated and have any of these permissions.
  """
  contractsAggregated(where: SearchByConditionDocumentsQuery): DocumentsAggregated

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["contracts-view","customers-view"])> User must be authenticated and have any of these permissions.
  """
  contractsSearchAggregated(search: String!): DocumentsAggregated

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["customers-view"])> User must be authenticated and have any of these permissions.
  """
  customersAggregated(where: SearchByConditionCustomersQuery): CustomersAggregated

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["customers-view"])> User must be authenticated and have any of these permissions.
  """
  customersSearchAggregated(search: SearchString!): CustomersAggregated

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["contracts-view","customers-view","quotes-view"])> User must be
  authenticated and have any of these permissions.
  """
  documentsAggregated(where: SearchByConditionDocumentsQuery): DocumentsAggregated

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["customers-view","quotes-view"])> User must be authenticated and have any of these permissions.
  """
  quotesAggregated(where: SearchByConditionDocumentsQuery): DocumentsAggregated

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["customers-view","quotes-view"])> User must be authenticated and have any of these permissions.
  """
  quotesSearchAggregated(search: String!): DocumentsAggregated
}

type QuoteMutations {
  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["quotes-sync"])> User must be authenticated and have any of these permissions.
  """
  sync(input: QuoteSyncInput!): QuoteSyncPayload
}

type QuoteRequest {
  id: ID!
  oem_id: ID!
  oem: Oem!
  user_id: ID!
  user: User!
  customer_id: ID
  customer_name: String
  customer: Customer
  contact: Contact!
  type_id: ID!
  type: Type!
  message: String
  assets: [QuoteRequestAsset!]!
  files: [File!]!
}

type QuoteRequestAsset {
  id: ID!
  asset_id: ID!
  asset: Asset!
  request_id: ID!
  request: QuoteRequest!
  duration_id: ID!
  duration: QuoteRequestDuration!
  service_level_id: ID!
  serviceLevel: ServiceLevel!
}

type QuoteRequestDuration {
  id: ID!
  name: String!
  key: String!
}

input QuoteStatusesQuery {
  quotes: DocumentsQuery
}

input QuoteSyncInput {
  id: [ID!]!
}

type QuoteSyncPayload {
  result: Boolean!
  failed: [ID!]!
}

input QuoteTypesQuery {
  quotes: DocumentsQuery
}

input RecoverApplicationTranslationsInput {
  locale: String!
}

type RecoverApplicationTranslationsPayload {
  result: Boolean!
}

type RecoverClientSettingsPayload {
  result: Boolean!
}

input RecoverClientTranslationsInput {
  locale: String!
}

type RecoverClientTranslationsPayload {
  result: Boolean!
}

input RequestAssetChangeInput {
  asset_id: ID!
  subject: String!
  message: String!
  from: Email!
  cc: [Email!]
  bcc: [Email!]
  files: [Upload!]
}

type RequestAssetChangePayload {
  created: ChangeRequest!
}

input RequestContractChangeInput {
  contract_id: ID!
  subject: String!
  message: String!
  from: Email!
  cc: [Email!]
  bcc: [Email!]
  files: [Upload!]
}

type RequestContractChangePayload {
  created: ChangeRequest!
}

input RequestCustomerChangeInput {
  customer_id: ID!
  subject: String!
  message: String!
  from: Email!
  cc: [Email!]
  bcc: [Email!]
  files: [Upload!]
}

type RequestCustomerChangePayload {
  created: ChangeRequest!
}

input RequestOrgChangeInput {
  subject: String!
  message: String!
  from: Email!
  cc: [Email!]
  bcc: [Email!]
  files: [Upload!]
}

type RequestOrgChangePayload {
  created: ChangeRequest!
}

input RequestQuoteChangeInput {
  quote_id: ID!
  subject: String!
  message: String!
  from: Email!
  cc: [Email!]
  bcc: [Email!]
  files: [Upload!]
}

type RequestQuoteChangePayload {
  created: ChangeRequest!
}

type Reseller {
  id: ID!
  name: String!
  assets_count: Int!
  customers_count: Int!
  locations_count: Int!
  locations: [ResellerLocation!]!
  headquarter: ResellerLocation
}

type ResellerLocation {
  location_id: ID!
  location: Location
  types: [Type!]!
}

input ResellerLocationsQuery {
  location_id: ID!
  location: LocationsQuery!
  types: TypesQuery
}

input ResellerLocationsSort {
  location: LocationsQuery!
}

input ResellersQuery {
  id: ID!
  name: String!
}

input ResetApplicationServiceInput {
  """Name of the service."""
  name: String!
}

type ResetApplicationServicePayload {
  result: Boolean!
}

input ResetOrgUserPasswordInput {
  id: ID!
}

type ResetOrgUserPasswordPayload {
  result: Boolean!
}

input ResetPasswordInput {
  email: Email!
  token: String!
  password: String!
}

type ResetPasswordPayload {
  result: Boolean!
}

type Role {
  id: ID!
  name: String!
  permissions: [Permission!]!
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for input AssetWarrantiesQuery.

See also:
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationAssetWarrantiesQuery {
  """Additional conditions."""
  where: SearchByConditionAssetWarrantiesQuery

  """Count conditions."""
  count: SearchByScalarInt

  """
  Alias for `count: {greaterThanOrEqual: 1}` (`has()`). Will be ignored if `count` used.
  """
  exists: Boolean

  """
  Alias for `count: {lessThan: 1}` (`doesntHave()`). Will be ignored if `count` used.
  """
  notExists: Boolean! = false

  """Complex operator marker."""
  relation: SearchByTypeFlag! = yes
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for input AssetsQuery.

See also:
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationAssetsQuery {
  """Additional conditions."""
  where: SearchByConditionAssetsQuery

  """Count conditions."""
  count: SearchByScalarInt

  """
  Alias for `count: {greaterThanOrEqual: 1}` (`has()`). Will be ignored if `count` used.
  """
  exists: Boolean

  """
  Alias for `count: {lessThan: 1}` (`doesntHave()`). Will be ignored if `count` used.
  """
  notExists: Boolean! = false

  """Complex operator marker."""
  relation: SearchByTypeFlag! = yes
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for input CitiesQuery.

See also:
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationCitiesQuery {
  """Additional conditions."""
  where: SearchByConditionCitiesQuery

  """Count conditions."""
  count: SearchByScalarInt

  """
  Alias for `count: {greaterThanOrEqual: 1}` (`has()`). Will be ignored if `count` used.
  """
  exists: Boolean

  """
  Alias for `count: {lessThan: 1}` (`doesntHave()`). Will be ignored if `count` used.
  """
  notExists: Boolean! = false

  """Complex operator marker."""
  relation: SearchByTypeFlag! = yes
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for input ContactsQuery.

See also:
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationContactsQuery {
  """Additional conditions."""
  where: SearchByConditionContactsQuery

  """Count conditions."""
  count: SearchByScalarInt

  """
  Alias for `count: {greaterThanOrEqual: 1}` (`has()`). Will be ignored if `count` used.
  """
  exists: Boolean

  """
  Alias for `count: {lessThan: 1}` (`doesntHave()`). Will be ignored if `count` used.
  """
  notExists: Boolean! = false

  """Complex operator marker."""
  relation: SearchByTypeFlag! = yes
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for input CountriesQuery.

See also:
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationCountriesQuery {
  """Additional conditions."""
  where: SearchByConditionCountriesQuery

  """Count conditions."""
  count: SearchByScalarInt

  """
  Alias for `count: {greaterThanOrEqual: 1}` (`has()`). Will be ignored if `count` used.
  """
  exists: Boolean

  """
  Alias for `count: {lessThan: 1}` (`doesntHave()`). Will be ignored if `count` used.
  """
  notExists: Boolean! = false

  """Complex operator marker."""
  relation: SearchByTypeFlag! = yes
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for input CoveragesQuery.

See also:
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationCoveragesQuery {
  """Additional conditions."""
  where: SearchByConditionCoveragesQuery

  """Count conditions."""
  count: SearchByScalarInt

  """
  Alias for `count: {greaterThanOrEqual: 1}` (`has()`). Will be ignored if `count` used.
  """
  exists: Boolean

  """
  Alias for `count: {lessThan: 1}` (`doesntHave()`). Will be ignored if `count` used.
  """
  notExists: Boolean! = false

  """Complex operator marker."""
  relation: SearchByTypeFlag! = yes
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for input CustomerLocationsQuery.

See also:
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationCustomerLocationsQuery {
  """Additional conditions."""
  where: SearchByConditionCustomerLocationsQuery

  """Count conditions."""
  count: SearchByScalarInt

  """
  Alias for `count: {greaterThanOrEqual: 1}` (`has()`). Will be ignored if `count` used.
  """
  exists: Boolean

  """
  Alias for `count: {lessThan: 1}` (`doesntHave()`). Will be ignored if `count` used.
  """
  notExists: Boolean! = false

  """Complex operator marker."""
  relation: SearchByTypeFlag! = yes
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for input CustomersQuery.

See also:
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationCustomersQuery {
  """Additional conditions."""
  where: SearchByConditionCustomersQuery

  """Count conditions."""
  count: SearchByScalarInt

  """
  Alias for `count: {greaterThanOrEqual: 1}` (`has()`). Will be ignored if `count` used.
  """
  exists: Boolean

  """
  Alias for `count: {lessThan: 1}` (`doesntHave()`). Will be ignored if `count` used.
  """
  notExists: Boolean! = false

  """Complex operator marker."""
  relation: SearchByTypeFlag! = yes
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for input DistributorsQuery.

See also:
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationDistributorsQuery {
  """Additional conditions."""
  where: SearchByConditionDistributorsQuery

  """Count conditions."""
  count: SearchByScalarInt

  """
  Alias for `count: {greaterThanOrEqual: 1}` (`has()`). Will be ignored if `count` used.
  """
  exists: Boolean

  """
  Alias for `count: {lessThan: 1}` (`doesntHave()`). Will be ignored if `count` used.
  """
  notExists: Boolean! = false

  """Complex operator marker."""
  relation: SearchByTypeFlag! = yes
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for input DocumentEntriesQuery.

See also:
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationDocumentEntriesQuery {
  """Additional conditions."""
  where: SearchByConditionDocumentEntriesQuery

  """Count conditions."""
  count: SearchByScalarInt

  """
  Alias for `count: {greaterThanOrEqual: 1}` (`has()`). Will be ignored if `count` used.
  """
  exists: Boolean

  """
  Alias for `count: {lessThan: 1}` (`doesntHave()`). Will be ignored if `count` used.
  """
  notExists: Boolean! = false

  """Complex operator marker."""
  relation: SearchByTypeFlag! = yes
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for input DocumentsQuery.

See also:
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationDocumentsQuery {
  """Additional conditions."""
  where: SearchByConditionDocumentsQuery

  """Count conditions."""
  count: SearchByScalarInt

  """
  Alias for `count: {greaterThanOrEqual: 1}` (`has()`). Will be ignored if `count` used.
  """
  exists: Boolean

  """
  Alias for `count: {lessThan: 1}` (`doesntHave()`). Will be ignored if `count` used.
  """
  notExists: Boolean! = false

  """Complex operator marker."""
  relation: SearchByTypeFlag! = yes
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for input LocationsQuery.

See also:
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationLocationsQuery {
  """Additional conditions."""
  where: SearchByConditionLocationsQuery

  """Count conditions."""
  count: SearchByScalarInt

  """
  Alias for `count: {greaterThanOrEqual: 1}` (`has()`). Will be ignored if `count` used.
  """
  exists: Boolean

  """
  Alias for `count: {lessThan: 1}` (`doesntHave()`). Will be ignored if `count` used.
  """
  notExists: Boolean! = false

  """Complex operator marker."""
  relation: SearchByTypeFlag! = yes
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for input OrganizationsQuery.

See also:
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationOrganizationsQuery {
  """Additional conditions."""
  where: SearchByConditionOrganizationsQuery

  """Count conditions."""
  count: SearchByScalarInt

  """
  Alias for `count: {greaterThanOrEqual: 1}` (`has()`). Will be ignored if `count` used.
  """
  exists: Boolean

  """
  Alias for `count: {lessThan: 1}` (`doesntHave()`). Will be ignored if `count` used.
  """
  notExists: Boolean! = false

  """Complex operator marker."""
  relation: SearchByTypeFlag! = yes
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for input ProductsQuery.

See also:
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationProductsQuery {
  """Additional conditions."""
  where: SearchByConditionProductsQuery

  """Count conditions."""
  count: SearchByScalarInt

  """
  Alias for `count: {greaterThanOrEqual: 1}` (`has()`). Will be ignored if `count` used.
  """
  exists: Boolean

  """
  Alias for `count: {lessThan: 1}` (`doesntHave()`). Will be ignored if `count` used.
  """
  notExists: Boolean! = false

  """Complex operator marker."""
  relation: SearchByTypeFlag! = yes
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for input ResellerLocationsQuery.

See also:
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationResellerLocationsQuery {
  """Additional conditions."""
  where: SearchByConditionResellerLocationsQuery

  """Count conditions."""
  count: SearchByScalarInt

  """
  Alias for `count: {greaterThanOrEqual: 1}` (`has()`). Will be ignored if `count` used.
  """
  exists: Boolean

  """
  Alias for `count: {lessThan: 1}` (`doesntHave()`). Will be ignored if `count` used.
  """
  notExists: Boolean! = false

  """Complex operator marker."""
  relation: SearchByTypeFlag! = yes
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for input ResellersQuery.

See also:
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationResellersQuery {
  """Additional conditions."""
  where: SearchByConditionResellersQuery

  """Count conditions."""
  count: SearchByScalarInt

  """
  Alias for `count: {greaterThanOrEqual: 1}` (`has()`). Will be ignored if `count` used.
  """
  exists: Boolean

  """
  Alias for `count: {lessThan: 1}` (`doesntHave()`). Will be ignored if `count` used.
  """
  notExists: Boolean! = false

  """Complex operator marker."""
  relation: SearchByTypeFlag! = yes
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for input ServiceLevelsQuery.

See also:
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationServiceLevelsQuery {
  """Additional conditions."""
  where: SearchByConditionServiceLevelsQuery

  """Count conditions."""
  count: SearchByScalarInt

  """
  Alias for `count: {greaterThanOrEqual: 1}` (`has()`). Will be ignored if `count` used.
  """
  exists: Boolean

  """
  Alias for `count: {lessThan: 1}` (`doesntHave()`). Will be ignored if `count` used.
  """
  notExists: Boolean! = false

  """Complex operator marker."""
  relation: SearchByTypeFlag! = yes
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for input StatusesQuery.

See also:
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationStatusesQuery {
  """Additional conditions."""
  where: SearchByConditionStatusesQuery

  """Count conditions."""
  count: SearchByScalarInt

  """
  Alias for `count: {greaterThanOrEqual: 1}` (`has()`). Will be ignored if `count` used.
  """
  exists: Boolean

  """
  Alias for `count: {lessThan: 1}` (`doesntHave()`). Will be ignored if `count` used.
  """
  notExists: Boolean! = false

  """Complex operator marker."""
  relation: SearchByTypeFlag! = yes
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for input TagsQuery.

See also:
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationTagsQuery {
  """Additional conditions."""
  where: SearchByConditionTagsQuery

  """Count conditions."""
  count: SearchByScalarInt

  """
  Alias for `count: {greaterThanOrEqual: 1}` (`has()`). Will be ignored if `count` used.
  """
  exists: Boolean

  """
  Alias for `count: {lessThan: 1}` (`doesntHave()`). Will be ignored if `count` used.
  """
  notExists: Boolean! = false

  """Complex operator marker."""
  relation: SearchByTypeFlag! = yes
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for input TypesQuery.

See also:
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationTypesQuery {
  """Additional conditions."""
  where: SearchByConditionTypesQuery

  """Count conditions."""
  count: SearchByScalarInt

  """
  Alias for `count: {greaterThanOrEqual: 1}` (`has()`). Will be ignored if `count` used.
  """
  exists: Boolean

  """
  Alias for `count: {lessThan: 1}` (`doesntHave()`). Will be ignored if `count` used.
  """
  notExists: Boolean! = false

  """Complex operator marker."""
  relation: SearchByTypeFlag! = yes
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for input UsersQuery.

See also:
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationUsersQuery {
  """Additional conditions."""
  where: SearchByConditionUsersQuery

  """Count conditions."""
  count: SearchByScalarInt

  """
  Alias for `count: {greaterThanOrEqual: 1}` (`has()`). Will be ignored if `count` used.
  """
  exists: Boolean

  """
  Alias for `count: {lessThan: 1}` (`doesntHave()`). Will be ignored if `count` used.
  """
  notExists: Boolean! = false

  """Complex operator marker."""
  relation: SearchByTypeFlag! = yes
}

"""
Available conditions for input ApplicationLogsQuery (only one property allowed at a time).
"""
input SearchByConditionApplicationLogsQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionApplicationLogsQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionApplicationLogsQuery!]

  """Not."""
  not: SearchByConditionApplicationLogsQuery

  """Property condition."""
  id: SearchByScalarID

  """Property condition."""
  category: SearchByScalarString

  """Property condition."""
  action: SearchByScalarString

  """Property condition."""
  status: SearchByScalarStringOrNull

  """Property condition."""
  object_type: SearchByScalarStringOrNull

  """Property condition."""
  object_id: SearchByScalarIDOrNull

  """Property condition."""
  duration: SearchByScalarFloatOrNull

  """Property condition."""
  created_at: SearchByScalarDateTime

  """Property condition."""
  finished_at: SearchByScalarDateTimeOrNull
}

"""
Available conditions for input AssetCoveragesQuery (only one property allowed at a time).
"""
input SearchByConditionAssetCoveragesQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionAssetCoveragesQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionAssetCoveragesQuery!]

  """Not."""
  not: SearchByConditionAssetCoveragesQuery

  """Property condition."""
  assets: SearchByComplexRelationAssetsQuery
}

"""
Available conditions for input AssetStatusesQuery (only one property allowed at a time).
"""
input SearchByConditionAssetStatusesQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionAssetStatusesQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionAssetStatusesQuery!]

  """Not."""
  not: SearchByConditionAssetStatusesQuery

  """Property condition."""
  assets: SearchByComplexRelationAssetsQuery
}

"""
Available conditions for input AssetTypesQuery (only one property allowed at a time).
"""
input SearchByConditionAssetTypesQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionAssetTypesQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionAssetTypesQuery!]

  """Not."""
  not: SearchByConditionAssetTypesQuery

  """Property condition."""
  assets: SearchByComplexRelationAssetsQuery
}

"""
Available conditions for input AssetWarrantiesQuery (only one property allowed at a time).
"""
input SearchByConditionAssetWarrantiesQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionAssetWarrantiesQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionAssetWarrantiesQuery!]

  """Not."""
  not: SearchByConditionAssetWarrantiesQuery

  """Property condition."""
  id: SearchByScalarID

  """Property condition."""
  start: SearchByScalarDateOrNull

  """Property condition."""
  end: SearchByScalarDateOrNull

  """Property condition."""
  asset: SearchByComplexRelationAssetsQuery

  """Property condition."""
  customer_id: SearchByScalarIDOrNull

  """Property condition."""
  customer: SearchByComplexRelationCustomersQuery

  """Property condition."""
  document_id: SearchByScalarIDOrNull

  """Property condition."""
  document: SearchByComplexRelationDocumentsQuery

  """Property condition."""
  reseller_id: SearchByScalarIDOrNull

  """Property condition."""
  reseller: SearchByComplexRelationResellersQuery

  """Property condition."""
  service_group_id: SearchByScalarIDOrNull

  """Property condition."""
  serviceLevels: SearchByComplexRelationServiceLevelsQuery
}

"""
Available conditions for input AssetsQuery (only one property allowed at a time).
"""
input SearchByConditionAssetsQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionAssetsQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionAssetsQuery!]

  """Not."""
  not: SearchByConditionAssetsQuery

  """Property condition."""
  id: SearchByScalarID

  """Property condition."""
  oem_id: SearchByScalarID

  """Property condition."""
  type_id: SearchByScalarIDOrNull

  """Property condition."""
  product_id: SearchByScalarID

  """Property condition."""
  reseller_id: SearchByScalarID

  """Property condition."""
  customer_id: SearchByScalarID

  """Property condition."""
  location_id: SearchByScalarID

  """Property condition."""
  status_id: SearchByScalarIDOrNull

  """Property condition."""
  serial_number: SearchByScalarStringOrNull

  """Property condition."""
  warranty_end: SearchByScalarDateOrNull

  """Property condition."""
  location: SearchByComplexRelationLocationsQuery

  """Property condition."""
  customer: SearchByComplexRelationCustomersQuery

  """Property condition."""
  product: SearchByComplexRelationProductsQuery

  """Property condition."""
  warranties: SearchByComplexRelationAssetWarrantiesQuery

  """Property condition."""
  tags: SearchByComplexRelationTagsQuery

  """Property condition."""
  coverages: SearchByComplexRelationCoveragesQuery

  """Property condition."""
  contracts: SearchByComplexRelationDocumentsQuery

  """Property condition."""
  quotes: SearchByComplexRelationDocumentsQuery

  """Property condition."""
  coverages_count: SearchByScalarInt
}

"""
Available conditions for input AuditsQuery (only one property allowed at a time).
"""
input SearchByConditionAuditsQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionAuditsQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionAuditsQuery!]

  """Not."""
  not: SearchByConditionAuditsQuery

  """Property condition."""
  id: SearchByScalarID

  """Property condition."""
  user_id: SearchByScalarString

  """Property condition."""
  organization_id: SearchByScalarID

  """Property condition."""
  action: SearchByScalarString

  """Property condition."""
  object_id: SearchByScalarString

  """Property condition."""
  object_type: SearchByScalarString

  """Property condition."""
  created_at: SearchByScalarDateTime

  """Property condition."""
  updated_at: SearchByScalarDateTime

  """Property condition."""
  user: SearchByComplexRelationUsersQuery

  """Property condition."""
  organization: SearchByComplexRelationOrganizationsQuery
}

"""
Available conditions for input CitiesQuery (only one property allowed at a time).
"""
input SearchByConditionCitiesQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionCitiesQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionCitiesQuery!]

  """Not."""
  not: SearchByConditionCitiesQuery

  """Property condition."""
  id: SearchByScalarID

  """Property condition."""
  name: SearchByScalarString

  """Property condition."""
  country_id: SearchByScalarID

  """Property condition."""
  assets: SearchByComplexRelationAssetsQuery

  """Property condition."""
  customers: SearchByComplexRelationCustomersQuery
}

"""
Available conditions for input ContactTypesQuery (only one property allowed at a time).
"""
input SearchByConditionContactTypesQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionContactTypesQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionContactTypesQuery!]

  """Not."""
  not: SearchByConditionContactTypesQuery

  """Property condition."""
  contacts: SearchByComplexRelationContactsQuery
}

"""
Available conditions for input ContactsQuery (only one property allowed at a time).
"""
input SearchByConditionContactsQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionContactsQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionContactsQuery!]

  """Not."""
  not: SearchByConditionContactsQuery

  """Property condition."""
  id: SearchByScalarID

  """Property condition."""
  name: SearchByScalarStringOrNull

  """Property condition."""
  email: SearchByScalarEmailOrNull

  """Property condition."""
  phone_number: SearchByScalarPhoneNumberOrNull

  """Property condition."""
  phone_valid: SearchByScalarBooleanOrNull

  """Property condition."""
  types: SearchByComplexRelationTypesQuery

  """Property condition."""
  assets: SearchByComplexRelationAssetsQuery

  """Property condition."""
  customers: SearchByComplexRelationCustomersQuery
}

"""
Available conditions for input ContractStatusesQuery (only one property allowed at a time).
"""
input SearchByConditionContractStatusesQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionContractStatusesQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionContractStatusesQuery!]

  """Not."""
  not: SearchByConditionContractStatusesQuery

  """Property condition."""
  contracts: SearchByComplexRelationDocumentsQuery
}

"""
Available conditions for input ContractTypesQuery (only one property allowed at a time).
"""
input SearchByConditionContractTypesQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionContractTypesQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionContractTypesQuery!]

  """Not."""
  not: SearchByConditionContractTypesQuery

  """Property condition."""
  contracts: SearchByComplexRelationDocumentsQuery
}

"""
Available conditions for input CountriesQuery (only one property allowed at a time).
"""
input SearchByConditionCountriesQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionCountriesQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionCountriesQuery!]

  """Not."""
  not: SearchByConditionCountriesQuery

  """Property condition."""
  id: SearchByScalarID

  """Property condition."""
  code: SearchByScalarString

  """Property condition."""
  name: SearchByScalarString

  """Property condition."""
  cities: SearchByComplexRelationCitiesQuery

  """Property condition."""
  assets: SearchByComplexRelationAssetsQuery

  """Property condition."""
  customers: SearchByComplexRelationCustomersQuery
}

"""
Available conditions for input CoveragesQuery (only one property allowed at a time).
"""
input SearchByConditionCoveragesQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionCoveragesQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionCoveragesQuery!]

  """Not."""
  not: SearchByConditionCoveragesQuery

  """Property condition."""
  id: SearchByScalarID
}

"""
Available conditions for input CurrenciesQuery (only one property allowed at a time).
"""
input SearchByConditionCurrenciesQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionCurrenciesQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionCurrenciesQuery!]

  """Not."""
  not: SearchByConditionCurrenciesQuery

  """Property condition."""
  documents: SearchByComplexRelationDocumentsQuery
}

"""
Available conditions for input CustomerLocationsQuery (only one property allowed at a time).
"""
input SearchByConditionCustomerLocationsQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionCustomerLocationsQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionCustomerLocationsQuery!]

  """Not."""
  not: SearchByConditionCustomerLocationsQuery

  """Property condition."""
  location_id: SearchByScalarID

  """Property condition."""
  location: SearchByComplexRelationLocationsQuery

  """Property condition."""
  types: SearchByComplexRelationTypesQuery
}

"""
Available conditions for input CustomerStatusesQuery (only one property allowed at a time).
"""
input SearchByConditionCustomerStatusesQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionCustomerStatusesQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionCustomerStatusesQuery!]

  """Not."""
  not: SearchByConditionCustomerStatusesQuery

  """Property condition."""
  customers: SearchByComplexRelationCustomersQuery
}

"""
Available conditions for input CustomerTypesQuery (only one property allowed at a time).
"""
input SearchByConditionCustomerTypesQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionCustomerTypesQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionCustomerTypesQuery!]

  """Not."""
  not: SearchByConditionCustomerTypesQuery

  """Property condition."""
  customers: SearchByComplexRelationCustomersQuery
}

"""
Available conditions for input CustomersQuery (only one property allowed at a time).
"""
input SearchByConditionCustomersQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionCustomersQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionCustomersQuery!]

  """Not."""
  not: SearchByConditionCustomersQuery

  """Property condition."""
  id: SearchByScalarID

  """Property condition."""
  name: SearchByScalarString

  """Property condition."""
  type_id: SearchByScalarID

  """Property condition."""
  statuses: SearchByComplexRelationStatusesQuery

  """Property condition."""
  statuses_count: SearchByScalarInt

  """Property condition."""
  locations: SearchByComplexRelationCustomerLocationsQuery

  """Property condition."""
  headquarter: SearchByComplexRelationCustomerLocationsQuery

  """Property condition."""
  contacts_count: SearchByScalarInt

  """Property condition."""
  contacts: SearchByComplexRelationContactsQuery

  """Property condition."""
  assets: SearchByComplexRelationAssetsQuery

  """Property condition."""
  contracts: SearchByComplexRelationDocumentsQuery

  """Property condition."""
  quotes: SearchByComplexRelationDocumentsQuery
}

"""
Available conditions for input DistributorsQuery (only one property allowed at a time).
"""
input SearchByConditionDistributorsQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionDistributorsQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionDistributorsQuery!]

  """Not."""
  not: SearchByConditionDistributorsQuery

  """Property condition."""
  id: SearchByScalarID

  """Property condition."""
  name: SearchByScalarString
}

"""
Available conditions for input DocumentEntriesQuery (only one property allowed at a time).
"""
input SearchByConditionDocumentEntriesQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionDocumentEntriesQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionDocumentEntriesQuery!]

  """Not."""
  not: SearchByConditionDocumentEntriesQuery

  """Property condition."""
  id: SearchByScalarID

  """Property condition."""
  document_id: SearchByScalarID

  """Property condition."""
  asset_id: SearchByScalarID

  """Property condition."""
  asset: SearchByComplexRelationAssetsQuery

  """Property condition."""
  net_price: SearchByScalarFloatOrNull

  """Property condition."""
  list_price: SearchByScalarFloatOrNull

  """Property condition."""
  discount: SearchByScalarFloatOrNull

  """Property condition."""
  renewal: SearchByScalarFloatOrNull

  """Property condition."""
  serial_number: SearchByScalarStringOrNull

  """Property condition."""
  product_id: SearchByScalarID

  """Property condition."""
  product: SearchByComplexRelationProductsQuery

  """Property condition."""
  service_group_id: SearchByScalarIDOrNull

  """Property condition."""
  service_level_id: SearchByScalarIDOrNull

  """Property condition."""
  currency_id: SearchByScalarIDOrNull
}

"""
Available conditions for input DocumentStatusesQuery (only one property allowed at a time).
"""
input SearchByConditionDocumentStatusesQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionDocumentStatusesQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionDocumentStatusesQuery!]

  """Not."""
  not: SearchByConditionDocumentStatusesQuery

  """Property condition."""
  documents: SearchByComplexRelationDocumentsQuery
}

"""
Available conditions for input DocumentTypesQuery (only one property allowed at a time).
"""
input SearchByConditionDocumentTypesQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionDocumentTypesQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionDocumentTypesQuery!]

  """Not."""
  not: SearchByConditionDocumentTypesQuery

  """Property condition."""
  documents: SearchByComplexRelationDocumentsQuery
}

"""
Available conditions for input DocumentsQuery (only one property allowed at a time).
"""
input SearchByConditionDocumentsQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionDocumentsQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionDocumentsQuery!]

  """Not."""
  not: SearchByConditionDocumentsQuery

  """Property condition."""
  id: SearchByScalarID

  """Property condition."""
  oem_id: SearchByScalarID

  """Property condition."""
  type_id: SearchByScalarID

  """Property condition."""
  number: SearchByScalarString

  """Property condition."""
  start: SearchByScalarDate

  """Property condition."""
  end: SearchByScalarDate

  """Property condition."""
  price: SearchByScalarFloatOrNull

  """Property condition."""
  currency_id: SearchByScalarIDOrNull

  """Property condition."""
  language_id: SearchByScalarIDOrNull

  """Property condition."""
  serial_number: SearchByScalarStringOrNull

  """Property condition."""
  customer_id: SearchByScalarIDOrNull

  """Property condition."""
  customer: SearchByComplexRelationCustomersQuery

  """Property condition."""
  reseller_id: SearchByScalarIDOrNull

  """Property condition."""
  reseller: SearchByComplexRelationResellersQuery

  """Property condition."""
  distributor_id: SearchByScalarIDOrNull

  """Property condition."""
  distributor: SearchByComplexRelationDistributorsQuery

  """Property condition."""
  entries: SearchByComplexRelationDocumentEntriesQuery

  """Property condition."""
  entries_count: SearchByScalarInt

  """Property condition."""
  contacts: SearchByComplexRelationContactsQuery

  """Property condition."""
  contacts_count: SearchByScalarInt

  """Property condition."""
  statuses: SearchByComplexRelationStatusesQuery

  """Property condition."""
  statuses_count: SearchByScalarInt

  """Property condition."""
  assets: SearchByComplexRelationAssetsQuery
}

"""
Available conditions for input LanguagesQuery (only one property allowed at a time).
"""
input SearchByConditionLanguagesQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionLanguagesQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionLanguagesQuery!]

  """Not."""
  not: SearchByConditionLanguagesQuery

  """Property condition."""
  documents: SearchByComplexRelationDocumentsQuery
}

"""
Available conditions for input LocationTypesQuery (only one property allowed at a time).
"""
input SearchByConditionLocationTypesQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionLocationTypesQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionLocationTypesQuery!]

  """Not."""
  not: SearchByConditionLocationTypesQuery

  """Property condition."""
  locations: SearchByComplexRelationLocationsQuery
}

"""
Available conditions for input LocationsQuery (only one property allowed at a time).
"""
input SearchByConditionLocationsQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionLocationsQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionLocationsQuery!]

  """Not."""
  not: SearchByConditionLocationsQuery

  """Property condition."""
  id: SearchByScalarID

  """Property condition."""
  postcode: SearchByScalarString

  """Property condition."""
  state: SearchByScalarString

  """Property condition."""
  line_one: SearchByScalarString

  """Property condition."""
  line_two: SearchByScalarString

  """Property condition."""
  latitude: SearchByScalarFloatOrNull

  """Property condition."""
  longitude: SearchByScalarFloatOrNull

  """Property condition."""
  city: SearchByComplexRelationCitiesQuery

  """Property condition."""
  city_id: SearchByScalarID

  """Property condition."""
  country: SearchByComplexRelationCountriesQuery

  """Property condition."""
  country_id: SearchByScalarID

  """Property condition."""
  assets: SearchByComplexRelationCustomersQuery

  """Property condition."""
  customers: SearchByComplexRelationCustomersQuery
}

"""
Available conditions for input MapQuery (only one property allowed at a time).
"""
input SearchByConditionMapQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionMapQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionMapQuery!]

  """Not."""
  not: SearchByConditionMapQuery

  """Property condition."""
  postcode: SearchByScalarString

  """Property condition."""
  state: SearchByScalarString

  """Property condition."""
  country_id: SearchByScalarID

  """Property condition."""
  country: SearchByComplexRelationCountriesQuery

  """Property condition."""
  city_id: SearchByScalarID

  """Property condition."""
  city: SearchByComplexRelationCitiesQuery
}

"""
Available conditions for input MeSearchQuery (only one property allowed at a time).
"""
input SearchByConditionMeSearchQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionMeSearchQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionMeSearchQuery!]

  """Not."""
  not: SearchByConditionMeSearchQuery

  """Property condition."""
  id: SearchByScalarID

  """Property condition."""
  key: SearchByScalarString

  """Property condition."""
  name: SearchByScalarString

  """Property condition."""
  created_at: SearchByScalarDateTime
}

"""
Available conditions for input NotesQuery (only one property allowed at a time).
"""
input SearchByConditionNotesQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionNotesQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionNotesQuery!]

  """Not."""
  not: SearchByConditionNotesQuery

  """Property condition."""
  note: SearchByScalarString

  """Property condition."""
  pinned: SearchByScalarBoolean

  """Property condition."""
  user_id: SearchByScalarID

  """Property condition."""
  user: SearchByComplexRelationUsersQuery
}

"""
Available conditions for input OemsQuery (only one property allowed at a time).
"""
input SearchByConditionOemsQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionOemsQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionOemsQuery!]

  """Not."""
  not: SearchByConditionOemsQuery

  """Property condition."""
  assets: SearchByComplexRelationAssetsQuery

  """Property condition."""
  documents: SearchByComplexRelationDocumentsQuery
}

"""
Available conditions for input OrganizationsQuery (only one property allowed at a time).
"""
input SearchByConditionOrganizationsQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionOrganizationsQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionOrganizationsQuery!]

  """Not."""
  not: SearchByConditionOrganizationsQuery

  """Property condition."""
  id: SearchByScalarID

  """Property condition."""
  name: SearchByScalarString

  """Property condition."""
  website_url: SearchByScalarUrlOrNull

  """Property condition."""
  email: SearchByScalarEmailOrNull

  """Property condition."""
  statuses: SearchByComplexRelationStatusesQuery

  """Property condition."""
  contacts: SearchByComplexRelationContactsQuery

  """Property condition."""
  locations: SearchByComplexRelationResellerLocationsQuery

  """Property condition."""
  headquarter: SearchByComplexRelationResellerLocationsQuery
}

"""
Available conditions for input ProductsQuery (only one property allowed at a time).
"""
input SearchByConditionProductsQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionProductsQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionProductsQuery!]

  """Not."""
  not: SearchByConditionProductsQuery

  """Property condition."""
  id: SearchByScalarID

  """Property condition."""
  oem_id: SearchByScalarID

  """Property condition."""
  sku: SearchByScalarString

  """Property condition."""
  name: SearchByScalarString
}

"""
Available conditions for input QuoteStatusesQuery (only one property allowed at a time).
"""
input SearchByConditionQuoteStatusesQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionQuoteStatusesQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionQuoteStatusesQuery!]

  """Not."""
  not: SearchByConditionQuoteStatusesQuery

  """Property condition."""
  quotes: SearchByComplexRelationDocumentsQuery
}

"""
Available conditions for input QuoteTypesQuery (only one property allowed at a time).
"""
input SearchByConditionQuoteTypesQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionQuoteTypesQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionQuoteTypesQuery!]

  """Not."""
  not: SearchByConditionQuoteTypesQuery

  """Property condition."""
  quotes: SearchByComplexRelationDocumentsQuery
}

"""
Available conditions for input ResellerLocationsQuery (only one property allowed at a time).
"""
input SearchByConditionResellerLocationsQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionResellerLocationsQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionResellerLocationsQuery!]

  """Not."""
  not: SearchByConditionResellerLocationsQuery

  """Property condition."""
  location_id: SearchByScalarID

  """Property condition."""
  location: SearchByComplexRelationLocationsQuery

  """Property condition."""
  types: SearchByComplexRelationTypesQuery
}

"""
Available conditions for input ResellersQuery (only one property allowed at a time).
"""
input SearchByConditionResellersQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionResellersQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionResellersQuery!]

  """Not."""
  not: SearchByConditionResellersQuery

  """Property condition."""
  id: SearchByScalarID

  """Property condition."""
  name: SearchByScalarString
}

"""
Available conditions for input ServiceGroupsQuery (only one property allowed at a time).
"""
input SearchByConditionServiceGroupsQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionServiceGroupsQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionServiceGroupsQuery!]

  """Not."""
  not: SearchByConditionServiceGroupsQuery

  """Property condition."""
  id: SearchByScalarID

  """Property condition."""
  oem_id: SearchByScalarID

  """Property condition."""
  sku: SearchByScalarString

  """Property condition."""
  documentEntries: SearchByComplexRelationDocumentEntriesQuery
}

"""
Available conditions for input ServiceLevelsQuery (only one property allowed at a time).
"""
input SearchByConditionServiceLevelsQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionServiceLevelsQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionServiceLevelsQuery!]

  """Not."""
  not: SearchByConditionServiceLevelsQuery

  """Property condition."""
  id: SearchByScalarID

  """Property condition."""
  oem_id: SearchByScalarID

  """Property condition."""
  service_group_id: SearchByScalarID

  """Property condition."""
  sku: SearchByScalarString

  """Property condition."""
  documentEntries: SearchByComplexRelationDocumentEntriesQuery
}

"""
Available conditions for input StatusesQuery (only one property allowed at a time).
"""
input SearchByConditionStatusesQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionStatusesQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionStatusesQuery!]

  """Not."""
  not: SearchByConditionStatusesQuery

  """Property condition."""
  id: SearchByScalarID
}

"""
Available conditions for input TagsQuery (only one property allowed at a time).
"""
input SearchByConditionTagsQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionTagsQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionTagsQuery!]

  """Not."""
  not: SearchByConditionTagsQuery

  """Property condition."""
  id: SearchByScalarID

  """Property condition."""
  name: SearchByScalarString

  """Property condition."""
  assets: SearchByComplexRelationAssetsQuery
}

"""
Available conditions for input TypesQuery (only one property allowed at a time).
"""
input SearchByConditionTypesQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionTypesQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionTypesQuery!]

  """Not."""
  not: SearchByConditionTypesQuery

  """Property condition."""
  id: SearchByScalarID
}

"""
Available conditions for input UsersQuery (only one property allowed at a time).
"""
input SearchByConditionUsersQuery {
  """All of the conditions must be true."""
  allOf: [SearchByConditionUsersQuery!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionUsersQuery!]

  """Not."""
  not: SearchByConditionUsersQuery

  """Property condition."""
  id: SearchByScalarID

  """Property condition."""
  email: SearchByScalarEmail

  """Property condition."""
  given_name: SearchByScalarString

  """Property condition."""
  family_name: SearchByScalarString

  """Property condition."""
  enabled: SearchByScalarBoolean
}

"""
Available operators for scalar Boolean! (only one operator allowed at a time).
"""
input SearchByScalarBoolean {
  """Equal (`=`)."""
  equal: Boolean
}

"""
Available operators for scalar Boolean (only one operator allowed at a time).
"""
input SearchByScalarBooleanOrNull {
  """Equal (`=`)."""
  equal: Boolean

  """Is NULL?"""
  isNull: SearchByTypeFlag

  """Is NOT NULL?"""
  isNotNull: SearchByTypeFlag
}

"""
Available operators for scalar Date! (only one operator allowed at a time).
"""
input SearchByScalarDate {
  """Equal (`=`)."""
  equal: Date

  """Not Equal (`!=`)."""
  notEqual: Date

  """Less than (`<`)."""
  lessThan: Date

  """Less than or equal to (`<=`)."""
  lessThanOrEqual: Date

  """Greater than (`>`)."""
  greaterThan: Date

  """Greater than or equal to (`>=`)."""
  greaterThanOrEqual: Date

  """Within a set of values."""
  in: [Date!]

  """Outside a set of values."""
  notIn: [Date!]

  """Within a range."""
  between: SearchByTypeRangeDate

  """Outside a range."""
  notBetween: SearchByTypeRangeDate
}

"""
Available operators for scalar Date (only one operator allowed at a time).
"""
input SearchByScalarDateOrNull {
  """Equal (`=`)."""
  equal: Date

  """Not Equal (`!=`)."""
  notEqual: Date

  """Less than (`<`)."""
  lessThan: Date

  """Less than or equal to (`<=`)."""
  lessThanOrEqual: Date

  """Greater than (`>`)."""
  greaterThan: Date

  """Greater than or equal to (`>=`)."""
  greaterThanOrEqual: Date

  """Within a set of values."""
  in: [Date!]

  """Outside a set of values."""
  notIn: [Date!]

  """Within a range."""
  between: SearchByTypeRangeDate

  """Outside a range."""
  notBetween: SearchByTypeRangeDate

  """Is NULL?"""
  isNull: SearchByTypeFlag

  """Is NOT NULL?"""
  isNotNull: SearchByTypeFlag
}

"""
Available operators for scalar DateTime! (only one operator allowed at a time).
"""
input SearchByScalarDateTime {
  """Equal (`=`)."""
  equal: DateTime

  """Not Equal (`!=`)."""
  notEqual: DateTime

  """Less than (`<`)."""
  lessThan: DateTime

  """Less than or equal to (`<=`)."""
  lessThanOrEqual: DateTime

  """Greater than (`>`)."""
  greaterThan: DateTime

  """Greater than or equal to (`>=`)."""
  greaterThanOrEqual: DateTime

  """Within a set of values."""
  in: [DateTime!]

  """Outside a set of values."""
  notIn: [DateTime!]

  """Within a range."""
  between: SearchByTypeRangeDateTime

  """Outside a range."""
  notBetween: SearchByTypeRangeDateTime
}

"""
Available operators for scalar DateTime (only one operator allowed at a time).
"""
input SearchByScalarDateTimeOrNull {
  """Equal (`=`)."""
  equal: DateTime

  """Not Equal (`!=`)."""
  notEqual: DateTime

  """Less than (`<`)."""
  lessThan: DateTime

  """Less than or equal to (`<=`)."""
  lessThanOrEqual: DateTime

  """Greater than (`>`)."""
  greaterThan: DateTime

  """Greater than or equal to (`>=`)."""
  greaterThanOrEqual: DateTime

  """Within a set of values."""
  in: [DateTime!]

  """Outside a set of values."""
  notIn: [DateTime!]

  """Within a range."""
  between: SearchByTypeRangeDateTime

  """Outside a range."""
  notBetween: SearchByTypeRangeDateTime

  """Is NULL?"""
  isNull: SearchByTypeFlag

  """Is NOT NULL?"""
  isNotNull: SearchByTypeFlag
}

"""
Available operators for scalar Email! (only one operator allowed at a time).
"""
input SearchByScalarEmail {
  """Equal (`=`)."""
  equal: Email

  """Not Equal (`!=`)."""
  notEqual: Email

  """Within a set of values."""
  in: [Email!]

  """Outside a set of values."""
  notIn: [Email!]

  """Contains."""
  contains: Email

  """Ends with a string."""
  endsWith: Email

  """Starts with a string."""
  startsWith: Email
}

"""
Available operators for scalar Email (only one operator allowed at a time).
"""
input SearchByScalarEmailOrNull {
  """Equal (`=`)."""
  equal: Email

  """Not Equal (`!=`)."""
  notEqual: Email

  """Within a set of values."""
  in: [Email!]

  """Outside a set of values."""
  notIn: [Email!]

  """Contains."""
  contains: Email

  """Ends with a string."""
  endsWith: Email

  """Starts with a string."""
  startsWith: Email

  """Is NULL?"""
  isNull: SearchByTypeFlag

  """Is NOT NULL?"""
  isNotNull: SearchByTypeFlag
}

"""
Available operators for scalar Float (only one operator allowed at a time).
"""
input SearchByScalarFloatOrNull {
  """Equal (`=`)."""
  equal: Float

  """Not Equal (`!=`)."""
  notEqual: Float

  """Less than (`<`)."""
  lessThan: Float

  """Less than or equal to (`<=`)."""
  lessThanOrEqual: Float

  """Greater than (`>`)."""
  greaterThan: Float

  """Greater than or equal to (`>=`)."""
  greaterThanOrEqual: Float

  """Within a set of values."""
  in: [Float!]

  """Outside a set of values."""
  notIn: [Float!]

  """Within a range."""
  between: SearchByTypeRangeFloat

  """Outside a range."""
  notBetween: SearchByTypeRangeFloat

  """Is NULL?"""
  isNull: SearchByTypeFlag

  """Is NOT NULL?"""
  isNotNull: SearchByTypeFlag
}

"""
Available operators for scalar ID! (only one operator allowed at a time).
"""
input SearchByScalarID {
  """Equal (`=`)."""
  equal: ID

  """Not Equal (`!=`)."""
  notEqual: ID

  """Within a set of values."""
  in: [ID!]

  """Outside a set of values."""
  notIn: [ID!]
}

"""
Available operators for scalar ID (only one operator allowed at a time).
"""
input SearchByScalarIDOrNull {
  """Equal (`=`)."""
  equal: ID

  """Not Equal (`!=`)."""
  notEqual: ID

  """Within a set of values."""
  in: [ID!]

  """Outside a set of values."""
  notIn: [ID!]

  """Is NULL?"""
  isNull: SearchByTypeFlag

  """Is NOT NULL?"""
  isNotNull: SearchByTypeFlag
}

"""
Available operators for scalar Int! (only one operator allowed at a time).
"""
input SearchByScalarInt {
  """Equal (`=`)."""
  equal: Int

  """Not Equal (`!=`)."""
  notEqual: Int

  """Less than (`<`)."""
  lessThan: Int

  """Less than or equal to (`<=`)."""
  lessThanOrEqual: Int

  """Greater than (`>`)."""
  greaterThan: Int

  """Greater than or equal to (`>=`)."""
  greaterThanOrEqual: Int

  """Within a set of values."""
  in: [Int!]

  """Outside a set of values."""
  notIn: [Int!]

  """Within a range."""
  between: SearchByTypeRangeInt

  """Outside a range."""
  notBetween: SearchByTypeRangeInt
}

"""
Available operators for scalar PhoneNumber (only one operator allowed at a time).
"""
input SearchByScalarPhoneNumberOrNull {
  """Equal (`=`)."""
  equal: PhoneNumber

  """Not Equal (`!=`)."""
  notEqual: PhoneNumber

  """Within a set of values."""
  in: [PhoneNumber!]

  """Outside a set of values."""
  notIn: [PhoneNumber!]

  """Contains."""
  contains: PhoneNumber

  """Ends with a string."""
  endsWith: PhoneNumber

  """Starts with a string."""
  startsWith: PhoneNumber

  """Is NULL?"""
  isNull: SearchByTypeFlag

  """Is NOT NULL?"""
  isNotNull: SearchByTypeFlag
}

"""
Available operators for scalar String! (only one operator allowed at a time).
"""
input SearchByScalarString {
  """Equal (`=`)."""
  equal: String

  """Not Equal (`!=`)."""
  notEqual: String

  """Within a set of values."""
  in: [String!]

  """Outside a set of values."""
  notIn: [String!]

  """Contains."""
  contains: String

  """Ends with a string."""
  endsWith: String

  """Starts with a string."""
  startsWith: String
}

"""
Available operators for scalar String (only one operator allowed at a time).
"""
input SearchByScalarStringOrNull {
  """Equal (`=`)."""
  equal: String

  """Not Equal (`!=`)."""
  notEqual: String

  """Within a set of values."""
  in: [String!]

  """Outside a set of values."""
  notIn: [String!]

  """Contains."""
  contains: String

  """Ends with a string."""
  endsWith: String

  """Starts with a string."""
  startsWith: String

  """Is NULL?"""
  isNull: SearchByTypeFlag

  """Is NOT NULL?"""
  isNotNull: SearchByTypeFlag
}

"""
Available operators for scalar Url (only one operator allowed at a time).
"""
input SearchByScalarUrlOrNull {
  """Equal (`=`)."""
  equal: Url

  """Not Equal (`!=`)."""
  notEqual: Url

  """Within a set of values."""
  in: [Url!]

  """Outside a set of values."""
  notIn: [Url!]

  """Contains."""
  contains: Url

  """Ends with a string."""
  endsWith: Url

  """Starts with a string."""
  startsWith: Url

  """Is NULL?"""
  isNull: SearchByTypeFlag

  """Is NOT NULL?"""
  isNotNull: SearchByTypeFlag
}

enum SearchByTypeFlag {
  yes
}

input SearchByTypeRangeDate {
  min: Date!
  max: Date!
}

input SearchByTypeRangeDateTime {
  min: DateTime!
  max: DateTime!
}

input SearchByTypeRangeFloat {
  min: Float!
  max: Float!
}

input SearchByTypeRangeInt {
  min: Int!
  max: Int!
}

union SearchResult = Customer | Asset | Document

"""Aggregated data for union SearchResult."""
type SearchResultsAggregated {
  count: Int!
}

"""
The `SearchString` scalar type represents textual data, represented as UTF-8
character sequences. It is designed specially to search and supports
the simple syntax:

- `*`: return all objects;
- `abc`: return objects that contains `abc`;
- `abc cde`: return objects that contains `abc` and `cde` (in this order);
- `"abc cde"`: return objects that contains exact phrase `abc cde`;
"""
scalar SearchString

input SendResetPasswordLinkInput {
  email: Email!
}

type SendResetPasswordLinkPayload {
  result: Boolean!
}

type ServiceGroup {
  id: ID!
  oem_id: ID!
  sku: String!
  name: String!
}

input ServiceGroupsQuery {
  id: ID!
  oem_id: ID!
  sku: String!
  documentEntries: DocumentEntriesQuery
}

type ServiceLevel {
  id: ID!
  oem_id: ID!
  service_group_id: ID!
  sku: String!
  name: String!
  description: String!
}

input ServiceLevelsQuery {
  id: ID!
  oem_id: ID!
  service_group_id: ID!
  sku: String!
  documentEntries: DocumentEntriesQuery
}

input SetApplicationLocaleInput {
  locale: String!
}

type SetApplicationLocalePayload {
  result: Boolean!
}

input SignInInput {
  email: Email!
  password: String!
}

type SignInPayload {
  me: Me
}

"""
Sort clause for input ApplicationLogsSort (only one property allowed at a time).
"""
input SortByClauseApplicationLogsSort {
  """Property clause."""
  duration: SortByDirection

  """Property clause."""
  created_at: SortByDirection

  """Property clause."""
  finished_at: SortByDirection
}

"""
Sort clause for input AssetWarrantiesQuery (only one property allowed at a time).
"""
input SortByClauseAssetWarrantiesQuery {
  """Property clause."""
  id: SortByDirection

  """Property clause."""
  start: SortByDirection

  """Property clause."""
  end: SortByDirection

  """Property clause."""
  asset: SortByClauseAssetsQuery

  """Property clause."""
  customer_id: SortByDirection

  """Property clause."""
  customer: SortByClauseCustomersQuery

  """Property clause."""
  document_id: SortByDirection

  """Property clause."""
  document: SortByClauseDocumentsQuery

  """Property clause."""
  reseller_id: SortByDirection

  """Property clause."""
  reseller: SortByClauseResellersQuery

  """Property clause."""
  service_group_id: SortByDirection

  """Property clause."""
  serviceLevels: SortByClauseServiceLevelsQuery
}

"""
Sort clause for input AssetsQuery (only one property allowed at a time).
"""
input SortByClauseAssetsQuery {
  """Property clause."""
  id: SortByDirection

  """Property clause."""
  oem_id: SortByDirection

  """Property clause."""
  type_id: SortByDirection

  """Property clause."""
  product_id: SortByDirection

  """Property clause."""
  reseller_id: SortByDirection

  """Property clause."""
  customer_id: SortByDirection

  """Property clause."""
  location_id: SortByDirection

  """Property clause."""
  status_id: SortByDirection

  """Property clause."""
  serial_number: SortByDirection

  """Property clause."""
  warranty_end: SortByDirection

  """Property clause."""
  location: SortByClauseLocationsQuery

  """Property clause."""
  customer: SortByClauseCustomersQuery

  """Property clause."""
  product: SortByClauseProductsQuery

  """Property clause."""
  warranties: SortByClauseAssetWarrantiesQuery

  """Property clause."""
  tags: SortByClauseTagsQuery

  """Property clause."""
  coverages: SortByClauseCoveragesQuery

  """Property clause."""
  contracts: SortByClauseDocumentsQuery

  """Property clause."""
  quotes: SortByClauseDocumentsQuery

  """Property clause."""
  coverages_count: SortByDirection
}

"""
Sort clause for input AssetsSearchCustomerSort (only one property allowed at a time).
"""
input SortByClauseAssetsSearchCustomerSort {
  """Property clause."""
  name: SortByDirection
}

"""
Sort clause for input AssetsSearchProductSort (only one property allowed at a time).
"""
input SortByClauseAssetsSearchProductSort {
  """Property clause."""
  sku: SortByDirection

  """Property clause."""
  name: SortByDirection
}

"""
Sort clause for input AssetsSearchSort (only one property allowed at a time).
"""
input SortByClauseAssetsSearchSort {
  """Property clause."""
  serial_number: SortByDirection

  """Property clause."""
  product: SortByClauseAssetsSearchProductSort

  """Property clause."""
  customer: SortByClauseAssetsSearchCustomerSort
}

"""
Sort clause for input AssetsSort (only one property allowed at a time).
"""
input SortByClauseAssetsSort {
  """Property clause."""
  id: SortByDirection

  """Property clause."""
  product: SortByClauseProductsSort

  """Property clause."""
  serial_number: SortByDirection

  """Property clause."""
  warranty_end: SortByDirection

  """Property clause."""
  location: SortByClauseLocationsSort

  """Property clause."""
  customer: SortByClauseCustomersSort

  """Property clause."""
  status: SortByClauseStatusSort
}

"""
Sort clause for input AuditsSort (only one property allowed at a time).
"""
input SortByClauseAuditsSort {
  """Property clause."""
  id: SortByDirection

  """Property clause."""
  user_id: SortByDirection

  """Property clause."""
  organization_id: SortByDirection

  """Property clause."""
  action: SortByDirection

  """Property clause."""
  object_id: SortByDirection

  """Property clause."""
  object_type: SortByDirection

  """Property clause."""
  created_at: SortByDirection

  """Property clause."""
  updated_at: SortByDirection
}

"""
Sort clause for input CitiesQuery (only one property allowed at a time).
"""
input SortByClauseCitiesQuery {
  """Property clause."""
  id: SortByDirection

  """Property clause."""
  name: SortByDirection

  """Property clause."""
  country_id: SortByDirection

  """Property clause."""
  assets: SortByClauseAssetsQuery

  """Property clause."""
  customers: SortByClauseCustomersQuery
}

"""
Sort clause for input CitiesSort (only one property allowed at a time).
"""
input SortByClauseCitiesSort {
  """Property clause."""
  id: SortByDirection

  """Property clause."""
  name: SortByDirection

  """Property clause."""
  country: SortByClauseCountriesSort
}

"""
Sort clause for input ContactsQuery (only one property allowed at a time).
"""
input SortByClauseContactsQuery {
  """Property clause."""
  id: SortByDirection

  """Property clause."""
  name: SortByDirection

  """Property clause."""
  email: SortByDirection

  """Property clause."""
  phone_number: SortByDirection

  """Property clause."""
  phone_valid: SortByDirection

  """Property clause."""
  types: SortByClauseTypesQuery

  """Property clause."""
  assets: SortByClauseAssetsQuery

  """Property clause."""
  customers: SortByClauseCustomersQuery
}

"""
Sort clause for input ContactsSort (only one property allowed at a time).
"""
input SortByClauseContactsSort {
  """Property clause."""
  name: SortByDirection

  """Property clause."""
  email: SortByDirection

  """Property clause."""
  phone_number: SortByDirection

  """Property clause."""
  phone_valid: SortByDirection
}

"""
Sort clause for input CountriesQuery (only one property allowed at a time).
"""
input SortByClauseCountriesQuery {
  """Property clause."""
  id: SortByDirection

  """Property clause."""
  code: SortByDirection

  """Property clause."""
  name: SortByDirection

  """Property clause."""
  cities: SortByClauseCitiesQuery

  """Property clause."""
  assets: SortByClauseAssetsQuery

  """Property clause."""
  customers: SortByClauseCustomersQuery
}

"""
Sort clause for input CountriesSort (only one property allowed at a time).
"""
input SortByClauseCountriesSort {
  """Property clause."""
  id: SortByDirection

  """Property clause."""
  code: SortByDirection

  """Property clause."""
  name: SortByDirection
}

"""
Sort clause for input CoveragesQuery (only one property allowed at a time).
"""
input SortByClauseCoveragesQuery {
  """Property clause."""
  id: SortByDirection
}

"""
Sort clause for input CustomerLocationsQuery (only one property allowed at a time).
"""
input SortByClauseCustomerLocationsQuery {
  """Property clause."""
  location_id: SortByDirection

  """Property clause."""
  location: SortByClauseLocationsQuery

  """Property clause."""
  types: SortByClauseTypesQuery
}

"""
Sort clause for input CustomerLocationsSort (only one property allowed at a time).
"""
input SortByClauseCustomerLocationsSort {
  """Property clause."""
  location: SortByClauseLocationsQuery
}

"""
Sort clause for input CustomersQuery (only one property allowed at a time).
"""
input SortByClauseCustomersQuery {
  """Property clause."""
  id: SortByDirection

  """Property clause."""
  name: SortByDirection

  """Property clause."""
  type_id: SortByDirection

  """Property clause."""
  statuses: SortByClauseStatusesQuery

  """Property clause."""
  statuses_count: SortByDirection

  """Property clause."""
  locations: SortByClauseCustomerLocationsQuery

  """Property clause."""
  headquarter: SortByClauseCustomerLocationsQuery

  """Property clause."""
  contacts_count: SortByDirection

  """Property clause."""
  contacts: SortByClauseContactsQuery

  """Property clause."""
  assets: SortByClauseAssetsQuery

  """Property clause."""
  contracts: SortByClauseDocumentsQuery

  """Property clause."""
  quotes: SortByClauseDocumentsQuery
}

"""
Sort clause for input CustomersSearchHeadquarterCitySort (only one property allowed at a time).
"""
input SortByClauseCustomersSearchHeadquarterCitySort {
  """Property clause."""
  name: SortByDirection
}

"""
Sort clause for input CustomersSearchHeadquarterSort (only one property allowed at a time).
"""
input SortByClauseCustomersSearchHeadquarterSort {
  """Property clause."""
  city: SortByClauseCustomersSearchHeadquarterCitySort
}

"""
Sort clause for input CustomersSearchSort (only one property allowed at a time).
"""
input SortByClauseCustomersSearchSort {
  """Property clause."""
  name: SortByDirection

  """Property clause."""
  headquarter: SortByClauseCustomersSearchHeadquarterSort
}

"""
Sort clause for input CustomersSort (only one property allowed at a time).
"""
input SortByClauseCustomersSort {
  """Property clause."""
  name: SortByDirection

  """Property clause."""
  locations_count: SortByDirection

  """Property clause."""
  contacts_count: SortByDirection

  """Property clause."""
  assets_count: SortByDirection

  """Property clause."""
  type: SortByClauseTypesSort

  """Property clause."""
  headquarter: SortByClauseCustomerLocationsSort
}

"""
Sort clause for input DistributorsQuery (only one property allowed at a time).
"""
input SortByClauseDistributorsQuery {
  """Property clause."""
  id: SortByDirection

  """Property clause."""
  name: SortByDirection
}

"""
Sort clause for input DocumentEntriesQuery (only one property allowed at a time).
"""
input SortByClauseDocumentEntriesQuery {
  """Property clause."""
  id: SortByDirection

  """Property clause."""
  document_id: SortByDirection

  """Property clause."""
  asset_id: SortByDirection

  """Property clause."""
  asset: SortByClauseAssetsQuery

  """Property clause."""
  net_price: SortByDirection

  """Property clause."""
  list_price: SortByDirection

  """Property clause."""
  discount: SortByDirection

  """Property clause."""
  renewal: SortByDirection

  """Property clause."""
  serial_number: SortByDirection

  """Property clause."""
  product_id: SortByDirection

  """Property clause."""
  product: SortByClauseProductsQuery

  """Property clause."""
  service_group_id: SortByDirection

  """Property clause."""
  service_level_id: SortByDirection

  """Property clause."""
  currency_id: SortByDirection
}

"""
Sort clause for input DocumentsQuery (only one property allowed at a time).
"""
input SortByClauseDocumentsQuery {
  """Property clause."""
  id: SortByDirection

  """Property clause."""
  oem_id: SortByDirection

  """Property clause."""
  type_id: SortByDirection

  """Property clause."""
  number: SortByDirection

  """Property clause."""
  start: SortByDirection

  """Property clause."""
  end: SortByDirection

  """Property clause."""
  price: SortByDirection

  """Property clause."""
  currency_id: SortByDirection

  """Property clause."""
  language_id: SortByDirection

  """Property clause."""
  serial_number: SortByDirection

  """Property clause."""
  customer_id: SortByDirection

  """Property clause."""
  customer: SortByClauseCustomersQuery

  """Property clause."""
  reseller_id: SortByDirection

  """Property clause."""
  reseller: SortByClauseResellersQuery

  """Property clause."""
  distributor_id: SortByDirection

  """Property clause."""
  distributor: SortByClauseDistributorsQuery

  """Property clause."""
  entries: SortByClauseDocumentEntriesQuery

  """Property clause."""
  entries_count: SortByDirection

  """Property clause."""
  contacts: SortByClauseContactsQuery

  """Property clause."""
  contacts_count: SortByDirection

  """Property clause."""
  statuses: SortByClauseStatusesQuery

  """Property clause."""
  statuses_count: SortByDirection

  """Property clause."""
  assets: SortByClauseAssetsQuery
}

"""
Sort clause for input DocumentsSearchCustomerSort (only one property allowed at a time).
"""
input SortByClauseDocumentsSearchCustomerSort {
  """Property clause."""
  name: SortByDirection
}

"""
Sort clause for input DocumentsSearchEntriesProductSort (only one property allowed at a time).
"""
input SortByClauseDocumentsSearchEntriesProductSort {
  """Property clause."""
  sku: SortByDirection

  """Property clause."""
  name: SortByDirection
}

"""
Sort clause for input DocumentsSearchEntriesSort (only one property allowed at a time).
"""
input SortByClauseDocumentsSearchEntriesSort {
  """Property clause."""
  serial_number: SortByDirection

  """Property clause."""
  product: SortByClauseDocumentsSearchEntriesProductSort
}

"""
Sort clause for input DocumentsSearchSort (only one property allowed at a time).
"""
input SortByClauseDocumentsSearchSort {
  """Property clause."""
  number: SortByDirection

  """Property clause."""
  start: SortByDirection

  """Property clause."""
  end: SortByDirection

  """Property clause."""
  price: SortByDirection

  """Property clause."""
  customer: SortByClauseDocumentsSearchCustomerSort

  """Property clause."""
  entries: SortByClauseDocumentsSearchEntriesSort
}

"""
Sort clause for input DocumentsSort (only one property allowed at a time).
"""
input SortByClauseDocumentsSort {
  """Property clause."""
  id: SortByDirection

  """Property clause."""
  start: SortByDirection

  """Property clause."""
  end: SortByDirection

  """Property clause."""
  price: SortByDirection
}

"""Sort clause for input KpiSort (only one property allowed at a time)."""
input SortByClauseKpiSort {
  """Property clause."""
  assets_total: SortByDirection

  """Property clause."""
  assets_active: SortByDirection

  """Property clause."""
  assets_active_percent: SortByDirection

  """Property clause."""
  assets_active_on_contract: SortByDirection

  """Property clause."""
  assets_active_on_warranty: SortByDirection

  """Property clause."""
  assets_active_exposed: SortByDirection

  """Property clause."""
  customers_active: SortByDirection

  """Property clause."""
  customers_active_new: SortByDirection

  """Property clause."""
  contracts_active: SortByDirection

  """Property clause."""
  contracts_active_amount: SortByDirection

  """Property clause."""
  contracts_active_new: SortByDirection

  """Property clause."""
  contracts_expiring: SortByDirection

  """Property clause."""
  contracts_expired: SortByDirection

  """Property clause."""
  quotes_active: SortByDirection

  """Property clause."""
  quotes_active_amount: SortByDirection

  """Property clause."""
  quotes_active_new: SortByDirection

  """Property clause."""
  quotes_expiring: SortByDirection

  """Property clause."""
  quotes_expired: SortByDirection

  """Property clause."""
  quotes_ordered: SortByDirection

  """Property clause."""
  quotes_accepted: SortByDirection

  """Property clause."""
  quotes_requested: SortByDirection

  """Property clause."""
  quotes_received: SortByDirection

  """Property clause."""
  quotes_rejected: SortByDirection

  """Property clause."""
  quotes_awaiting: SortByDirection

  """Property clause."""
  service_revenue_total_amount: SortByDirection

  """Property clause."""
  service_revenue_total_amount_change: SortByDirection
}

"""
Sort clause for input LocationsQuery (only one property allowed at a time).
"""
input SortByClauseLocationsQuery {
  """Property clause."""
  id: SortByDirection

  """Property clause."""
  postcode: SortByDirection

  """Property clause."""
  state: SortByDirection

  """Property clause."""
  line_one: SortByDirection

  """Property clause."""
  line_two: SortByDirection

  """Property clause."""
  latitude: SortByDirection

  """Property clause."""
  longitude: SortByDirection

  """Property clause."""
  city: SortByClauseCitiesQuery

  """Property clause."""
  city_id: SortByDirection

  """Property clause."""
  country: SortByClauseCountriesQuery

  """Property clause."""
  country_id: SortByDirection

  """Property clause."""
  assets: SortByClauseCustomersQuery

  """Property clause."""
  customers: SortByClauseCustomersQuery
}

"""
Sort clause for input LocationsSort (only one property allowed at a time).
"""
input SortByClauseLocationsSort {
  """Property clause."""
  postcode: SortByDirection

  """Property clause."""
  state: SortByDirection

  """Property clause."""
  line_one: SortByDirection

  """Property clause."""
  line_two: SortByDirection

  """Property clause."""
  country: SortByClauseCountriesSort

  """Property clause."""
  city: SortByClauseCitiesSort
}

"""
Sort clause for input MeSearchSort (only one property allowed at a time).
"""
input SortByClauseMeSearchSort {
  """Property clause."""
  key: SortByDirection

  """Property clause."""
  name: SortByDirection

  """Property clause."""
  created_at: SortByDirection
}

"""
Sort clause for input NotesSort (only one property allowed at a time).
"""
input SortByClauseNotesSort {
  """Property clause."""
  user_id: SortByDirection

  """Property clause."""
  pinned: SortByDirection

  """Property clause."""
  created_at: SortByDirection

  """Property clause."""
  updated_at: SortByDirection
}

"""
Sort clause for input OrganizationsSort (only one property allowed at a time).
"""
input SortByClauseOrganizationsSort {
  """Property clause."""
  name: SortByDirection

  """Property clause."""
  website_url: SortByDirection

  """Property clause."""
  email: SortByDirection

  """Property clause."""
  kpi: SortByClauseKpiSort
}

"""
Sort clause for input ProductsQuery (only one property allowed at a time).
"""
input SortByClauseProductsQuery {
  """Property clause."""
  id: SortByDirection

  """Property clause."""
  oem_id: SortByDirection

  """Property clause."""
  sku: SortByDirection

  """Property clause."""
  name: SortByDirection
}

"""
Sort clause for input ProductsSort (only one property allowed at a time).
"""
input SortByClauseProductsSort {
  """Property clause."""
  id: SortByDirection

  """Property clause."""
  sku: SortByDirection

  """Property clause."""
  name: SortByDirection

  """Property clause."""
  eol: SortByDirection

  """Property clause."""
  eos: SortByDirection
}

"""
Sort clause for input ResellersQuery (only one property allowed at a time).
"""
input SortByClauseResellersQuery {
  """Property clause."""
  id: SortByDirection

  """Property clause."""
  name: SortByDirection
}

"""
Sort clause for input ServiceLevelsQuery (only one property allowed at a time).
"""
input SortByClauseServiceLevelsQuery {
  """Property clause."""
  id: SortByDirection

  """Property clause."""
  oem_id: SortByDirection

  """Property clause."""
  service_group_id: SortByDirection

  """Property clause."""
  sku: SortByDirection

  """Property clause."""
  documentEntries: SortByClauseDocumentEntriesQuery
}

"""
Sort clause for input StatusSort (only one property allowed at a time).
"""
input SortByClauseStatusSort {
  """Property clause."""
  name: SortByDirection
}

"""
Sort clause for input StatusesQuery (only one property allowed at a time).
"""
input SortByClauseStatusesQuery {
  """Property clause."""
  id: SortByDirection
}

"""Sort clause for type Tag (only one property allowed at a time)."""
input SortByClauseTag {
  """Property clause."""
  id: SortByDirection

  """Property clause."""
  name: SortByDirection
}

"""
Sort clause for input TagsQuery (only one property allowed at a time).
"""
input SortByClauseTagsQuery {
  """Property clause."""
  id: SortByDirection

  """Property clause."""
  name: SortByDirection

  """Property clause."""
  assets: SortByClauseAssetsQuery
}

"""
Sort clause for input TypesQuery (only one property allowed at a time).
"""
input SortByClauseTypesQuery {
  """Property clause."""
  id: SortByDirection
}

"""
Sort clause for input TypesSort (only one property allowed at a time).
"""
input SortByClauseTypesSort {
  """Property clause."""
  name: SortByDirection
}

"""
Sort clause for input UsersSort (only one property allowed at a time).
"""
input SortByClauseUsersSort {
  """Property clause."""
  email: SortByDirection

  """Property clause."""
  given_name: SortByDirection

  """Property clause."""
  family_name: SortByDirection

  """Property clause."""
  enabled: SortByDirection
}

"""Sort direction."""
enum SortByDirection {
  asc
  desc
}

type Status {
  id: ID!
  key: String!
  name: String!
}

input StatusSort {
  name: String!
}

input StatusesQuery {
  id: ID!
}

input StopApplicationServiceInput {
  """Name of the service."""
  name: String!
}

type StopApplicationServicePayload {
  result: Boolean!
}

type StringValue {
  value: String!
}

type Tag {
  id: ID!
  name: String!
}

input TagsQuery {
  id: ID!
  name: String!
  assets: AssetsQuery
}

type Team {
  id: ID!
  name: String!
}

input TeamsQuery {
  id: ID!
  name: String!
}

input TeamsSort {
  name: String!
}

input TranslationInput {
  key: String!
  value: String!
}

type Type {
  id: ID!
  key: String!
  name: String!
}

input TypesQuery {
  id: ID!
}

input TypesSort {
  name: String!
}

input UpdateApplicationSettingsInput {
  name: String!
  value: String!
}

type UpdateApplicationSettingsPayload {
  updated: [ApplicationSetting!]!
}

input UpdateApplicationTranslationsInput {
  locale: String!
  translations: [TranslationInput!]!
}

type UpdateApplicationTranslationsPayload {
  updated: [ApplicationTranslation!]!
}

input UpdateClientSettingsInput {
  name: String!
  value: String!
}

type UpdateClientSettingsPayload {
  updated: [ClientSetting!]!
}

input UpdateClientTranslationsInput {
  locale: String!
  translations: [TranslationInput!]!
}

type UpdateClientTranslationsPayload {
  updated: [ClientTranslation!]!
}

input UpdateContractNoteFile {
  id: ID
  content: Upload
}

input UpdateContractNoteInput {
  id: ID!
  note: String
  pinned: Boolean
  files: [UpdateContractNoteFile!]
}

type UpdateContractNotePayload {
  updated: Note!
}

input UpdateMeEmailInput {
  email: Email!
}

type UpdateMeEmailPayload {
  result: Boolean!
}

input UpdateMePasswordInput {
  current_password: String
  password: String!
}

type UpdateMePasswordPayload {
  result: Boolean!
}

input UpdateOrgBranding {
  dark_theme: Boolean
  main_color: Color
  secondary_color: Color
  logo_url: Upload
  favicon_url: Upload
  welcome_image_url: Upload
  welcome_heading: String
  welcome_underline: String
  dashboard_image_url: Upload
}

input UpdateOrgInput {
  locale: String
  currency_id: ID
  website_url: Url
  email: Email
  analytics_code: String
  branding: UpdateOrgBranding
  timezone: String
}

type UpdateOrgPayload {
  result: Boolean!
  organization: Organization!
}

input UpdateQuoteNoteFile {
  id: ID
  content: Upload
}

input UpdateQuoteNoteInput {
  id: ID!
  note: String
  pinned: Boolean
  files: [UpdateQuoteNoteFile!]
}

type UpdateQuoteNotePayload {
  updated: Note!
}

"""
Can be used as an argument to upload files using https://github.com/jaydenseric/graphql-multipart-request-spec
"""
scalar Upload

"""The URL."""
scalar Url

type User {
  id: ID!
  given_name: String
  family_name: String
  email: Email!
  email_verified: Boolean!
  enabled: Boolean!
  title: String
  academic_title: String
  office_phone: PhoneNumber
  mobile_phone: PhoneNumber
  contact_email: Email
  job_title: String
  company: String
  phone: PhoneNumber
  photo: Url
  locale: String
  timezone: String

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["administer","org-administer"])> User must be authenticated and have any of these permissions.
  """
  invitations: [Invitation!]!

  """
  @require <organization> Authenticated user must be a member of the current organization.
  
  @require <me(["administer","org-administer"])> User must be authenticated and have any of these permissions.
  """
  organizations: [UserOrganization!]!
}

type UserMutations {
  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <me(["administer"])> User must be authenticated and have any of these permissions.
  """
  update(input: UserUpdateInput!): UserUpdatePayload

  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <me(["administer"])> User must be authenticated and have any of these permissions.
  """
  organization(id: ID): UserOrganizationMutations
}

type UserOrganization {
  organization_id: ID!
  organization: Organization!
  role: Role
  team: Team
  enabled: Boolean!
}

type UserOrganizationMutations {
  """
  @require <organization(root)> Authenticated user must be a member of the root organization.
  
  @require <me(["administer"])> User must be authenticated and have any of these permissions.
  """
  update(input: UserOrganizationUpdateInput!): UserOrganizationUpdatePayload
}

input UserOrganizationUpdateInput {
  enabled: Boolean
  role_id: ID
  team_id: ID
}

type UserOrganizationUpdatePayload implements Payload {
  result: Boolean!
  organization: UserOrganization!
}

type UserTeam {
  team: Team!
  organization: Organization!
}

input UserUpdateInput {
  enabled: Boolean
  given_name: String
  family_name: String
  title: String
  academic_title: String
  office_phone: PhoneNumber
  mobile_phone: PhoneNumber
  contact_email: Email
  job_title: String
  photo: Upload
  homepage: String
  locale: String
  timezone: String
}

type UserUpdatePayload implements Payload {
  result: Boolean!
  user: User!
}

"""Aggregated data for type User."""
type UsersAggregated {
  count: Int!
}

input UsersQuery {
  id: ID!
  email: Email!
  given_name: String!
  family_name: String!
  enabled: Boolean!
}

input UsersSort {
  email: Email!
  given_name: String!
  family_name: String!
  enabled: Boolean!
}

type recoverApplicationSettingsPayload {
  result: Boolean!
}
