<?php declare(strict_types = 1);

namespace App\Exceptions;

use Monolog\Logger;
use Tests\TestCase;

use function array_map;

/**
 * @internal
 * @coversDefaultClass \App\Exceptions\MailableHandler
 */
class MailableHandlerTest extends TestCase {
    // <editor-fold desc="Tests">
    // =========================================================================
    /**
     * @covers ::getRecipientLevel
     *
     * @dataProvider dataProviderGetRecipientLevel
     */
    public function testGetRecipientLevel(int $expected, int $level, string $recipient): void {
        $handler = new class($level) extends MailableHandler {
            /** @noinspection PhpMissingParentConstructorInspection */
            public function __construct(int $level = Logger::DEBUG) {
                $this->setLevel($level);
            }

            public function getRecipientLevel(string $recipient): int {
                return parent::getRecipientLevel($recipient);
            }
        };

        $this->assertEquals($expected, $handler->getRecipientLevel($recipient));
    }

    /**
     * @covers ::getRecordsRecipients
     *
     * @dataProvider dataProviderRecordsRecipients
     *
     * @param array<string> $expected
     * @param array<int>    $records
     * @param array<string> $recipients
     */
    public function testRecordsRecipients(array $expected, int $level, array $records, array $recipients): void {
        $handler = new class($level) extends MailableHandler {
            /** @noinspection PhpMissingParentConstructorInspection */
            public function __construct(int $level = Logger::DEBUG) {
                $this->setLevel($level);
            }

            /**
             * @inheritDoc
             */
            public function getRecordsRecipients(array $records): array {
                return parent::getRecordsRecipients($records); // TODO: Change the autogenerated stub
            }
        };

        $records = array_map(static function (int $level): array {
            return ['level' => $level];
        }, $records);

        $this->assertEquals($expected, $handler->setRecipients($recipients)->getRecordsRecipients($records));
    }
    // </editor-fold>

    // <editor-fold desc="DataProviders">
    // =========================================================================
    /**
     * @return array<string,array{int,int,string}>
     */
    public function dataProviderGetRecipientLevel(): array {
        return [
            'email'         => [Logger::DEBUG, Logger::DEBUG, 'test@example.com'],
            'email+level'   => [Logger::WARNING, Logger::DEBUG, 'test+warning@example.com'],
            'email+invalid' => [Logger::ERROR, Logger::ERROR, 'test+invalid@example.com'],
        ];
    }

    /**
     * @return array<string,array{array<string>, int, array<int>, array<string>}>
     */
    public function dataProviderRecordsRecipients(): array {
        return [
            'a' => [
                ['b+info@example.com'],
                Logger::WARNING,
                [Logger::DEBUG, Logger::INFO],
                ['a@example.com', 'b+info@example.com', 'c+warning@example.com'],
            ],
            'b' => [
                ['a@example.com', 'b+info@example.com'],
                Logger::DEBUG,
                [Logger::DEBUG, Logger::NOTICE],
                ['a@example.com', 'b+info@example.com', 'c+warning@example.com'],
            ],
            'c' => [
                ['a@example.com'],
                Logger::DEBUG,
                [Logger::DEBUG],
                ['a@example.com', 'b+info@example.com', 'c+warning@example.com'],
            ],
            'd' => [
                ['a@example.com', 'b+info@example.com', 'c+warning@example.com'],
                Logger::DEBUG,
                [Logger::EMERGENCY, Logger::NOTICE],
                ['a@example.com', 'b+info@example.com', 'c+warning@example.com'],
            ],
        ];
    }
    // </editor-fold>
}
