#import Scalars/*.graphql
#import Types/*.graphql

type Query {
    # General
    "Current user, `null` for guests."
    me: User

    # Auth
    "Link to perform Sign In, available only for guests."
    authSignIn: String! @guest          # TODO [GraphQL] URL type needed

    # Customers
    "List of all statuses"
    customerStatuses: [CustomerStatus!]!

    "List of all types"
    customerTypes: [Type!]!

    "List of Customers"
    customers (
        where: _ @whereConditions(columnsEnum: CustomersWhereColumns)
        order: _ @orderBy(columns: ["name"])
    ): [Customer!]! @guard @paginate

    "Customer with given ID"
    customer (id: ID! @eq): Customer @guard @find

    "List of all customer assets"
    assets(
        where: _ @whereConditions(columnsEnum: AssetsWhereColumns)
        order: _ @orderBy(columns: ["serial_number"])
    ): [Asset!]! @guard @paginate

    "List of all countries"
    countries: [Country!]! @all

    "List of all cities or filter by country id"
    cities(country_id: ID @eq): [City!]! @all

    "List of all location types related to customer"
    locationTypes: [Type!]!

    "List of all contact types"
    contactTypes: [Type!]!

    "Get asset by id"
    asset(id: ID! @eq): Asset @guard @find
}

enum CustomersWhereColumns {
    NAME @enum(value: "name")
    TYPE @enum(value: "type_id")
    STATUS @enum(value: "status_id")
}

enum AssetsWhereColumns {
    OEM @enum(value: "oem_id")
    PRODUCT @enum(value: "product_id")
    TYPE @enum(value: "type_id")
    CUSTOMER @enum(value: "customer_id")
}

type Mutation {
    "Return the link where the user should be redirected to complete sign-out."
    authSignOut: String! @guard         # TODO [GraphQL] URL type needed

    "Complete sign-in and returns current User if successful."
    authSignInByCode(code: String!, state: String!): User @guest

    "Password based sing-in."
    authSignInByPassword(
        username: String!               # TODO [GraphQL] Email type needed
        password: String!
    ): User @guest @validator

    "Register new user"
    authSignUp(
        given_name: String!
        family_name: String!
        email: String!                  # TODO [GraphQL] Email type needed
        phone: String!                  # TODO [GraphQL] Phone type needed
        company: String!
        reseller: String
    ): Boolean! @guest @validator

    "Reset password"
    authResetPassword(
        username: String!               # TODO [GraphQL] Email type needed
    ): Boolean! @guest
}
