#import Scalars/*.graphql
#import Types/*.graphql
#import Filters/*.graphql

type Query {
  # General
  "Current user, `null` for guests."
  me: Me

  # Auth
  "Link to perform Sign In, available only for guests."
  authSignIn: String! @guest          # TODO [GraphQL] URL type needed

  # Customers
  "List of all statuses"
  customerStatuses: [Status!]!

  "List of all types"
  customerTypes: [Type!]!

    "List of Customers"
    customers (
        where: CustomersQuery @searchBy
        order: CustomersSort @sortBy
    ): [Customer!]! @guard @paginate

  "Customer with given ID"
  customer (id: ID! @eq): Customer @guard @find

    "List of all customer assets"
    assets(
        where: AssetsQuery @searchBy
        order: AssetsSort @sortBy
    ): [Asset!]! @guard @paginate

  "List of all countries"
  countries: [Country!]! @all @orderBy(column: "code")

  "List of all cities or filter by country id"
  cities(
    where: CitiesQuery @searchBy
  ): [City!]! @all @orderBy(column: "id")

  "List of all location types related to customer"
  locationTypes: [Type!]!

  "List of all contact types"
  contactTypes: [Type!]!

  "Get Locale"
  locale: String!

  "List of all asset types"
  assetTypes: [Type!]!

  "List of all oems"
  oems: [Oem!]! @all

  "Get asset by id"
  asset(id: ID! @eq): Asset @guard @find

  "List of all currencies"
  currencies: [Currency!]! @all @orderBy(column: "code")

  "List of all contracts"
  contracts (
    where: DocumentsQuery @searchBy
    order: DocumentsSort @sortBy
  ): [Document!]! @guard @paginate @builder(method: "App\\GraphQL\\Builders\\ContractsBuilder")

  "Get contract by id"
  contract(id: ID! @eq): Document @guard @find @builder(method: "App\\GraphQL\\Builders\\ContractsBuilder")

  "List of all quotes"
  quotes (
    where: DocumentsQuery @searchBy
    order: DocumentsSort @sortBy
  ): [Document!]! @guard @paginate @builder(method: "App\\GraphQL\\Builders\\QuotesBuilder")

  "Get quote by id"
  quote(id: ID! @eq): Document @guard @find @builder(method: "App\\GraphQL\\Builders\\QuotesBuilder")
}

enum CustomersWhereColumns {
    NAME @enum(value: "name")
    TYPE @enum(value: "type_id")
    STATUS @enum(value: "status_id")
}

input DocumentsQuery {
  id: ID!
  oem_id: ID!
  type_id: ID!
  customer_id: ID!
  reseller_id: ID!
  number: String!
  product_id: ID!
  price: String!
  currency_id: ID!
  currency: CurrenciesQuery
  customer: CustomersQuery
  oem: OemsQuery
  product: ProductsQuery
  reseller: ResellersQuery
  type: TypesQuery
}

input CurrenciesQuery {
  id: ID!
  code: String!
  name: String!
}

input OemsQuery {
  id: ID!
  abbr: String!
  name: String!
}

input ProductsQuery {
  id: ID!
  oem_id: ID!
  sku: String!
  name: String!
}

input ResellersQuery {
  id: ID!
  name: String!
}

input DocumentsSort {
  start: Date!
  end: Date!
  price: String!
}

enum AssetsWhereColumns {
    OEM @enum(value: "oem_id")
    PRODUCT @enum(value: "product_id")
    TYPE @enum(value: "type_id")
    CUSTOMER @enum(value: "customer_id")
}

type Mutation {
  "Return the link where the user should be redirected to complete sign-out."
  authSignOut: String! @guard         # TODO [GraphQL] URL type needed

  "Complete sign-in and returns current User if successful."
  authSignInByCode(code: String!, state: String!): User @guest

  "Password based sing-in."
  authSignInByPassword(
    username: String!               # TODO [GraphQL] Email type needed
    password: String!
  ): User @guest @validator

  "Register new user"
  authSignUp(
    given_name: String!
    family_name: String!
    email: String!                  # TODO [GraphQL] Email type needed
    phone: String!                  # TODO [GraphQL] Phone type needed
    company: String!
    reseller: String
  ): Boolean! @guest @validator

  "Reset password"
  authResetPassword(
    username: String!               # TODO [GraphQL] Email type needed
  ): Boolean! @guest

  "Set Locale"
  locale(
    locale: String! @rules(apply:["regex:/^[a-z]{2}(?:_[A-Z]{2})?$/"])
  ): Boolean!
}
