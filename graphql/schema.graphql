#import Scalars/*.graphql
#import Types/*.graphql
#import Filters/*.graphql
#import Inputs/*.graphql
#import Queries/*.graphql
#import Mutations/*.graphql
#import Mutations/**/*.graphql

type Query {
  # General
  # ============================================================================
  "Authenticated user or `null` otherwise."
  me: Me

  "Current organization."
  org: Organization

  "Application information."
  application: Application!
  @field(resolver: "App\\GraphQL\\Queries\\Application\\Application")

  "Client data (settings, translations, etc)."
  client: Client
  @field(resolver: "App\\GraphQL\\Resolvers\\EmptyResolver")

  # Data
  # ============================================================================
  # These endpoints available for anyone

  "List of all OEMs"
  oems(where: OemsQuery @searchBy): [Oem!]!
  @organization
  @me
  @all

  "List of all currencies."
  currencies(where: CurrenciesQuery @searchBy): [Currency!]!
  @organization
  @me
  @all

  "List of all languages."
  languages(where: LanguagesQuery @searchBy): [Language!]!
  @organization
  @me
  @all

  "List of all countries."
  countries(where: CountriesQuery @searchBy): [Country!]!
  @organization
  @me
  @all

  "List of all cities."
  cities(
    where: CitiesQuery @searchBy
  ): [City!]!
  @organization
  @me
  @all

  "List of all possible location types."
  locationTypes(where: LocationTypesQuery @searchBy): [Type!]!
  @organization
  @me
  @all(
    builder: "App\\GraphQL\\Queries\\LocationTypes"
  )

  "List of all possible contact types."
  contactTypes(where: ContactTypesQuery @searchBy): [Type!]!
  @organization
  @me
  @all(
    builder: "App\\GraphQL\\Queries\\ContactTypes"
  )

  "List of all possible tags."
  tags (
    where: TagsQuery @searchBy
    order: TagsSort @sortBy
  ): [Tag!]!
  @organization
  @me
  @all

  "List of all Service Groups."
  serviceGroups(
    where: ServiceGroupsQuery @searchBy
  ): [ServiceGroup!]!
  @organization
  @me
  @all

  "List of all Service Levels."
  serviceLevels(
    where: ServiceLevelsQuery @searchBy
  ): [ServiceLevel!]!
  @organization
  @me
  @all

  "List of all Timezones"
  timezones: [String!]!
  @organization
  @me

  "List of all possible quote request durations."
  quoteRequestDurations: [QuoteRequestDuration!]!
  @organization
  @me
  @all

  "List of all possible teams."
  teams: [Team!]!
  @organization
  @me(permissions: ["administer", "org-administer"])
  @all

  # Search
  # ============================================================================
  search(
    search: SearchString!
    @search
    @builder(method: "App\\GraphQL\\Queries\\Search")
  ): [SearchResult!]!
  @organization
  @me(permissions: ["customers-view", "assets-view", "quotes-view", "contracts-view"])
  @paginate(
    builder: "App\\GraphQL\\Queries\\Search@builder"
  )

  # Map
  # ============================================================================
  map(
    where: MapQuery @searchBy
    diff: Float! @rules(apply: ["gt:0"])
  ): [Map!]!
  @organization
  @me(permissions: ["customers-view"])
  @field(resolver: "App\\GraphQL\\Queries\\Map")

  # Organization
  # ============================================================================
  permissions: [Permission!]!
  @organization
  @me(permissions: ["org-administer"])
  @all

  # Administration
  # ============================================================================
  "List of all organizations."
  organizations(
    where: OrganizationsQuery @searchBy
    order: OrganizationsSort @sortBy
  ): [Organization!]!
  @organization(root: true)
  @me(permissions: ["administer"])
  @paginate

  "Organization."
  organization(id: ID! @eq): Organization
  @organization(root: true)
  @me(permissions: ["administer"])
  @find

  "List of all organizations audits."
  audits(
    where: AuditsQuery @searchBy
    order: AuditsSort @sortBy
  ): [Audit!]!
  @organization(root: true)
  @me(permissions: ["administer"])
  @paginate(
    model: "App\\Models\\Audits\\Audit"
  )

  "List of all users."
  users(
    where: UsersQuery @searchBy
    order: UsersSort @sortBy
  ): [User!]!
  @organization(root: true)
  @me(permissions: ["administer"])
  @builder(method: "App\\GraphQL\\Queries\\User")
  @paginate
}
