#import */*.graphql
#import */*/*.graphql
#import */*/*/*.graphql

type Query {
    # General
    # ============================================================================
    "Authenticated user or `null` otherwise."
    me: Me
    @field(resolver: "App\\GraphQL\\Queries\\Me")

    "Current organization."
    org: Organization
    @field(resolver: "App\\GraphQL\\Queries\\Org")

    "Application information."
    application: Application!
    @field(resolver: "App\\GraphQL\\Queries\\Application\\Application")

    "Client data (settings, translations, etc)."
    client: Client
    @field(resolver: "App\\GraphQL\\Resolvers\\EmptyResolver")

    # Search
    # ============================================================================
    search(
        search: SearchString!
        @search
        @builder(method: "App\\GraphQL\\Queries\\Search")
    ): [SearchResult!]!
    @authOrg
    @authMe(permissions: ["customers-view", "assets-view", "quotes-view", "contracts-view"])
    @paginated(
        builder: "App\\GraphQL\\Queries\\Search@builder"
    )

    # Map
    # ============================================================================
    map(
        "Zoom level (1-12)."
        level: Int! @rules(apply: ["App\\Rules\\MapLevel"])

        "Only points inside these boundaries will be returned."
        boundaries: [Geohash!]

        "Additional filters for the points."
        locations: MapQuery @searchBy

        "Assets filters."
        assets:  AssetsQuery @searchBy
    ): Map!
    @authOrg
    @authMe
    @field(resolver: "App\\GraphQL\\Queries\\Map\\Map")

    # Organization
    # ============================================================================
    permissions: [Permission!]!
    @authOrg
    @authMe(permissions: ["administer", "org-administer"])
    @field(
        resolver: "App\\GraphQL\\Queries\\Permissions"
    )

    "List of all possible teams."
    teams: [Team!]!
    @authOrg
    @authMe(permissions: ["administer", "org-administer"])
    @all
}
