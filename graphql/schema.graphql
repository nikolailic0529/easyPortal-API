#import Scalars/*.graphql
#import Types/*.graphql
#import Filters/*.graphql
#import Inputs/*.graphql
#import Mutations/*.graphql
#import Mutations/**/*.graphql

type Query {
  # General
  # ============================================================================
  "Authenticated user or `null` otherwise."
  me: Me

  "Current organization."
  org: Organization

  "Application information."
  application: Application!

  "Client data (settings, translations, etc)."
  client: Client
  @field(resolver: "App\\GraphQL\\Resolvers\\EmptyResolver")

  # Data
  # ============================================================================
  # These endpoints available for anyone

  "List of all OEMs"
  oems(where: OemsQuery @searchBy): [Oem!]!
  @organization
  @me
  @all

  "List of all currencies."
  currencies(where: CurrenciesQuery @searchBy): [Currency!]!
  @organization
  @me
  @all

  "List of all languages."
  languages(where: LanguagesQuery @searchBy): [Language!]!
  @organization
  @me
  @all

  "List of all countries."
  countries(where: CountriesQuery @searchBy): [Country!]!
  @organization
  @me
  @all

  "List of all cities."
  cities(
    where: CitiesQuery @searchBy
  ): [City!]!
  @organization
  @me
  @all

  "List of all possible customer statuses."
  customerStatuses(where: CustomerStatusesQuery @searchBy): [Status!]!
  @organization
  @me
  @all(
    builder: "App\\GraphQL\\Queries\\CustomerStatuses"
  )

  "List of all possible customer types."
  customerTypes(where: CustomerTypesQuery @searchBy): [Type!]!
  @organization
  @me
  @all(
    builder: "App\\GraphQL\\Queries\\CustomerTypes"
  )

  "List of all possible location types."
  locationTypes(where: LocationTypesQuery @searchBy): [Type!]!
  @organization
  @me
  @all(
    builder: "App\\GraphQL\\Queries\\LocationTypes"
  )

  "List of all possible contact types."
  contactTypes(where: ContactTypesQuery @searchBy): [Type!]!
  @organization
  @me
  @all(
    builder: "App\\GraphQL\\Queries\\ContactTypes"
  )

  "List of all possible asset types."
  assetTypes(where: AssetTypesQuery @searchBy): [Type!]!
  @organization
  @me
  @all(
    builder: "App\\GraphQL\\Queries\\AssetTypes"
  )

  "List of all possible contract types."
  contractTypes(where: ContractTypesQuery @searchBy): [Type!]!
  @organization
  @me
  @all(
    builder: "App\\GraphQL\\Queries\\ContractTypes"
  )

  "List of all possible quote types."
  quoteTypes(where: QuoteTypesQuery @searchBy): [Type!]!
  @organization
  @me
  @all(
    builder: "App\\GraphQL\\Queries\\QuoteTypes"
  )

  "List of all possible asset statuses."
  assetStatuses(where: AssetStatusesQuery @searchBy): [Status!]!
  @organization
  @me
  @all(
    builder: "App\\GraphQL\\Queries\\AssetStatuses"
  )

  "List of all possible asset coverages."
  assetCoverages(where: AssetCoveragesQuery @searchBy): [Coverage!]!
  @organization
  @me
  @all(
    model: "App\\Models\\Coverage"
  )

  "List of all possible tags."
  tags (
    where: TagsQuery @searchBy
    order: TagsSort @sortBy
  ): [Tag!]!
  @organization
  @me
  @all

  "List of all Service Groups."
  serviceGroups(
    where: ServiceGroupsQuery @searchBy
  ): [ServiceGroup!]!
  @organization
  @me
  @all

  "List of all Service Levels."
  serviceLevels(
    where: ServiceLevelsQuery @searchBy
  ): [ServiceLevel!]!
  @organization
  @me
  @all

  "List of all Timezones"
  timezones: [String!]!
  @organization
  @me

  "List of all possible quote request durations."
  quoteRequestDurations: [QuoteRequestDuration!]!
  @organization
  @me
  @all

  # Search
  # ============================================================================
  search(
    search: String!
    @search
    @builder(method: "App\\GraphQL\\Queries\\Search")
  ): [SearchResult!]!
  @organization
  @me(permissions: ["customers-view", "assets-view", "quotes-view", "contracts-view"])
  @paginate(
    builder: "App\\GraphQL\\Queries\\Search@builder"
  )

  # Customers
  # ============================================================================
  "List of Customers."
  customers (
    where: CustomersQuery @searchBy
    order: CustomersSort @sortBy
  ): [Customer!]!
  @organization
  @me(permissions: ["customers-view"])
  @paginate

  customersAggregate(
    where: CustomersQuery @searchBy
  ): CustomersAggregate!
  @organization
  @me(permissions: ["customers-view"])
  @field(resolver: "App\\GraphQL\\Queries\\CustomersAggregate")

  customersSearch(search: String! @search): [Customer!]!
  @organization
  @me(permissions: ["customers-view"])
  @paginate

  "Customer."
  customer(id: ID! @eq): Customer
  @organization
  @me(permissions: ["customers-view"])
  @find

  # Assets
  # ============================================================================
  "List of all assets"
  assets(
    where: AssetsQuery @searchBy
    order: AssetsSort @sortBy
  ): [Asset!]!
  @organization
  @me(permissions: ["assets-view", "customers-view"])
  @paginate

  "Asset."
  asset(id: ID! @eq): Asset
  @organization
  @me(permissions: ["assets-view", "customers-view"])
  @find

  assetsAggregate(
    where: AssetsQuery @searchBy
  ): AssetsAggregate!
  @organization
  @me(permissions: ["assets-view", "customers-view"])
  @field(resolver: "App\\GraphQL\\Queries\\AssetsAggregate")

  assetsSearch(search: String! @search): [Asset!]!
  @organization
  @me(permissions: ["assets-view", "customers-view"])
  @paginate

  # Contracts
  # ============================================================================
  "List of all contracts."
  contracts (
    where: DocumentsQuery @searchBy
    order: DocumentsSort @sortBy
  ): [Document!]!
  @organization
  @me(permissions: ["contracts-view", "customers-view"])
  @builder(method: "App\\GraphQL\\Queries\\Contracts")
  @paginate

  contractsAggregate(
    where: DocumentsQuery @searchBy
  ): DocumentsAggregate!
  @organization
  @me(permissions: ["contracts-view", "customers-view"])
  @field(resolver: "App\\GraphQL\\Queries\\ContractsAggregate")

  contractsSearch(
    search: String!
    @search
    @builder(method: "App\\GraphQL\\Queries\\Contracts\\ContractsSearch")
  ): [Document!]!
  @organization
  @me(permissions: ["contracts-view", "customers-view"])
  @paginate

  "Contract."
  contract(id: ID! @eq): Document
  @organization
  @me(permissions: ["contracts-view", "customers-view"])
  @builder(method: "App\\GraphQL\\Queries\\Contracts")
  @find

  # Quotes
  # ============================================================================
  "List of all quotes."
  quotes (
    where: DocumentsQuery @searchBy
    order: DocumentsSort @sortBy
  ): [Document!]!
  @organization
  @me(permissions: ["quotes-view", "customers-view"])
  @builder(method: "App\\GraphQL\\Queries\\Quotes")
  @paginate

  "Quote."
  quote(id: ID! @eq): Document
  @organization
  @me(permissions: ["quotes-view", "customers-view"])
  @builder(method: "App\\GraphQL\\Queries\\Quotes")
  @find

  quotesSearch(
    search: String!
    @search
    @builder(method: "App\\GraphQL\\Queries\\Quotes\\QuotesSearch")
  ): [Document!]!
  @organization
  @me(permissions: ["quotes-view", "customers-view"])
  @paginate

  # Map
  # ============================================================================
  map(
    where: MapQuery @searchBy
    diff: Float! @rules(apply: ["gt:0"])
  ): [Map!]!
  @organization
  @me(permissions: ["customers-view"])
  @all(builder: "App\\GraphQL\\Queries\\Map")

  # Organization
  # ============================================================================
  permissions: [Permission!]!
  @organization
  @me(permissions: ["org-administer"])
  @all

  # Administration
  # ============================================================================
  "List of all organizations."
  organizations(
    where: OrganizationsQuery @searchBy
    order: OrganizationsSort @sortBy
  ): [Organization!]!
  @organization(root: true)
  @me(permissions: ["administer"])
  @paginate

  "Organization."
  organization(id: ID! @eq): Organization
  @organization(root: true)
  @me(permissions: ["administer"])
  @find
}
