type Document {
    id: ID!
    oem_id: ID
    type_id: ID
    customer_id: ID
    number: String
    start: Date
    end: Date
    created_at: DateTime!
    updated_at: DateTime!
    deleted_at: DateTime

    price: Float
    @field(
        resolver: "App\\GraphQL\\Queries\\Documents\\Price"
    )
    @with(
        relation: "statuses"
    )

    currency_id: ID
    currency: Currency @relation
    customer: Customer @relation
    oem: Oem @relation
    oem_said: String
    oem_group_id: ID
    oemGroup: OemGroup @relation
    reseller_id: ID
    reseller: Reseller @relation
    type: Type @relation
    statuses: [Status!]! @relation
    statuses_count: Int!
    is_contract: Boolean!
    is_quote: Boolean!

    entries(
        where: DocumentEntriesQuery @searchBy
        order: DocumentEntriesSort @sortBy
    ): [DocumentEntry!]!
    @relation
    @paginatedRelation

    entries_count: Int!
    language_id: ID
    language: Language @relation

    contacts_count: Int!
    contacts (
        where: ContactsQuery @searchBy
        order: ContactsSort @sortBy
    ): [Contact!]!
    @relation
    @paginatedRelation

    distributor_id: ID
    distributor: Distributor @relation
    assets_count: Int
    notes (
        where: NotesQuery @searchBy
        order: NotesSort @sortBy
    ): [Note!]!
    @relation
    @paginatedRelation

    changeRequests(
        where: ChangeRequestsQuery @searchBy
        order: ChangeRequestsSort @sortBy
    ): [ChangeRequest!]!
    @relation
    @paginatedRelation

    changed_at: DateTime
    synced_at: DateTime!
}
