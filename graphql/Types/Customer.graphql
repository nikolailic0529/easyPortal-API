type Customer {
  id: ID!
  name: String!
  type: Type! @belongsTo
  type_id: ID!
  statuses: [Status!]! @belongsToMany
  contacts_count: Int!
  contacts (
    where: ContactsQuery @searchBy
    order: ContactsSort @sortBy
  ): [Contact!]! @morphMany

  locations: [CustomerLocation!]! @hasMany
  headquarter: CustomerLocation @hasOne

  changed_at: DateTime
  synced_at: DateTime!

  # TODO [GraphQL] Should be available only for root organization
  assets_count: Int!
  locations_count: Int!
  kpi: Kpi @morphOne

  # Contracts
  contracts (
    where: DocumentsQuery @searchBy
    order: DocumentsSort @sortBy
  ): [Document!]!
  @me(permissions: ["contracts-view", "customers-view"])
  @hasMany
  @paginatedRelation

  # Quotes
  quotes (
    where: DocumentsQuery @searchBy
    order: DocumentsSort @sortBy
  ): [Document!]!
  @me(permissions: ["quotes-view", "customers-view"])
  @hasMany
  @paginatedRelation

  # Assets
  assets(
    where: AssetsQuery @searchBy
    order: AssetsSort @sortBy
  ): [Asset!]!
  @me(permissions: ["assets-view", "customers-view"])
  @hasMany
  @paginatedRelation
}
